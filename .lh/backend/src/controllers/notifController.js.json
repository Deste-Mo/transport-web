{
    "sourceFile": "backend/src/controllers/notifController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1722270762878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722270771970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,10 +131,11 @@\n     } catch (error) {\r\n         return res.status(500).json({ \"ViewOneNotifsError\": error.message });\r\n     }\r\n }\r\n-export const setNotificationViewed = async (req, res) => {\r\n \r\n+export const getNotificationViewed = async (req, res) => {\r\n+\r\n     const { notifid } = req.params;\r\n \r\n     try {\r\n \r\n"
                },
                {
                    "date": 1722270786757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,9 +134,9 @@\n }\r\n \r\n export const getNotificationViewed = async (req, res) => {\r\n \r\n-    const { notifid } = req.params;\r\n+    const \r\n \r\n     try {\r\n \r\n         const setV = await setViewNotification(notifid);\r\n"
                },
                {
                    "date": 1722270793493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+import { allNotifs, createNotifs, createNotifsOne, deleteAllNotifications, deleteNotificationById, setViewNotification } from \"../models/notifModel.js\";\r\n+import { getReceiverSocketId, io } from \"../socket/socket.js\";\r\n+\r\n+\r\n+\r\n+export const getAllNotifs = async (req, res) => {\r\n+\r\n+    try {\r\n+        const userId = await req.user.userid;\r\n+\r\n+        const all = await allNotifs(userId);\r\n+\r\n+        if (!all[0]) return res.json({ notifications: {} })\r\n+\r\n+        return res.json({ notifications: all });\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"getAllError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const sendNotifs = async (req, res) => {\r\n+\r\n+    const { userId } = await req.params;\r\n+    const sender = await req.user;\r\n+    const { content } = await req.body;\r\n+\r\n+    // return res.json(content);\r\n+\r\n+    try {\r\n+\r\n+        const { notification, sendNotif } = await createNotifsOne(userId, sender.userid, content);\r\n+\r\n+        if (notification && sendNotif) {\r\n+            // io.TO() est utiliser pour envoyer un evenement a un utilisateur specifique\r\n+            const receiverSocketId = getReceiverSocketId(userId);\r\n+\r\n+            if (receiverSocketId) {\r\n+                io.to(receiverSocketId).emit(\"newNotif\", notification)\r\n+            }\r\n+            return res.status(201).json({ notif: notification });\r\n+        }\r\n+\r\n+        return res.status(200).json({ message: \"Creation de notif impossible!\" });\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"sendNotifsError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const sendNotifsNewPub = async (req, res) => {\r\n+\r\n+    const sender = await req.user;\r\n+    const { content } = await req.body;\r\n+\r\n+    // return res.json(content);\r\n+\r\n+    try {\r\n+\r\n+        const { notification, sendNotif, followerId } = await createNotifs(sender.userid, content);\r\n+\r\n+        if (notification && sendNotif) {\r\n+            // io.TO() est utiliser pour envoyer un evenement a un utilisateur specifique\r\n+\r\n+            console.log(followerId);\r\n+\r\n+            followerId.forEach(userId => {\r\n+                const receiverSocketId = getReceiverSocketId(userId.followerid);\r\n+\r\n+                if (receiverSocketId) {\r\n+                    io.to(receiverSocketId).emit(\"newNotif\", notification)\r\n+                }\r\n+            });\r\n+\r\n+            return res.status(201).json({ notif: notification });\r\n+        }\r\n+\r\n+        return res.status(200).json({ message: \"Creation de notif impossible!\" });\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"sendNotifsError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const delAllNotifications = async (req, res) => {\r\n+\r\n+    const userid = req.user.userid;\r\n+\r\n+\r\n+    try {\r\n+\r\n+        const delAll = await deleteAllNotifications(userid);\r\n+\r\n+        if(!delAll) return res.status(400).json({error: \"Erreur lors de la suppression des notifications\"});\r\n+\r\n+        return res.status(200).json({success: \"Tout les notifs sont supprimés\"});\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"delAllNotifsError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const deleteNotifications = async (req, res) => {\r\n+\r\n+    const { notifid } = req.params;\r\n+\r\n+    try {\r\n+\r\n+        const del = await deleteNotificationById(notifid);\r\n+\r\n+        if(!del) return res.status(400).json({error: \"Erreur lors de la suppression de la notification\"});\r\n+\r\n+        return res.status(200).json({success: \"La notif est supprimée\"});\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"delOneNotifsError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const setNotificationViewed = async (req, res) => {\r\n+\r\n+    const { notifid } = req.params;\r\n+\r\n+    try {\r\n+\r\n+        const setV = await setViewNotification(notifid);\r\n+\r\n+        if(!setV) return res.status(400).json({error: \"Erreur lors de la mise en vue de la notification\"});\r\n+\r\n+        return res.status(200).json({success: \"La notif est vue desormais\", view: setV.viewed});\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"ViewOneNotifsError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const getNotificationViewed = async (req, res) => {\r\n+\r\n+    const userId = req.user.\r\n+\r\n+    try {\r\n+\r\n+        const setV = await setViewNotification(notifid);\r\n+\r\n+        if(!setV) return res.status(400).json({error: \"Erreur lors de la mise en vue de la notification\"});\r\n+\r\n+        return res.status(200).json({success: \"La notif est vue desormais\", view: setV.viewed});\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"ViewOneNotifsError\": error.message });\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722270802612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,169 +134,18 @@\n }\r\n \r\n export const getNotificationViewed = async (req, res) => {\r\n \r\n-    const userId = req.user.\r\n+    const userId = req.user.userid;\r\n \r\n     try {\r\n \r\n-        const setV = await setViewNotification(notifid);\r\n+        const setV = await get;\r\n \r\n         if(!setV) return res.status(400).json({error: \"Erreur lors de la mise en vue de la notification\"});\r\n \r\n         return res.status(200).json({success: \"La notif est vue desormais\", view: setV.viewed});\r\n \r\n     } catch (error) {\r\n         return res.status(500).json({ \"ViewOneNotifsError\": error.message });\r\n     }\r\n-}\n-import { allNotifs, createNotifs, createNotifsOne, deleteAllNotifications, deleteNotificationById, setViewNotification } from \"../models/notifModel.js\";\r\n-import { getReceiverSocketId, io } from \"../socket/socket.js\";\r\n-\r\n-\r\n-\r\n-export const getAllNotifs = async (req, res) => {\r\n-\r\n-    try {\r\n-        const userId = await req.user.userid;\r\n-\r\n-        const all = await allNotifs(userId);\r\n-\r\n-        if (!all[0]) return res.json({ notifications: {} })\r\n-\r\n-        return res.json({ notifications: all });\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"getAllError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const sendNotifs = async (req, res) => {\r\n-\r\n-    const { userId } = await req.params;\r\n-    const sender = await req.user;\r\n-    const { content } = await req.body;\r\n-\r\n-    // return res.json(content);\r\n-\r\n-    try {\r\n-\r\n-        const { notification, sendNotif } = await createNotifsOne(userId, sender.userid, content);\r\n-\r\n-        if (notification && sendNotif) {\r\n-            // io.TO() est utiliser pour envoyer un evenement a un utilisateur specifique\r\n-            const receiverSocketId = getReceiverSocketId(userId);\r\n-\r\n-            if (receiverSocketId) {\r\n-                io.to(receiverSocketId).emit(\"newNotif\", notification)\r\n-            }\r\n-            return res.status(201).json({ notif: notification });\r\n-        }\r\n-\r\n-        return res.status(200).json({ message: \"Creation de notif impossible!\" });\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"sendNotifsError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const sendNotifsNewPub = async (req, res) => {\r\n-\r\n-    const sender = await req.user;\r\n-    const { content } = await req.body;\r\n-\r\n-    // return res.json(content);\r\n-\r\n-    try {\r\n-\r\n-        const { notification, sendNotif, followerId } = await createNotifs(sender.userid, content);\r\n-\r\n-        if (notification && sendNotif) {\r\n-            // io.TO() est utiliser pour envoyer un evenement a un utilisateur specifique\r\n-\r\n-            console.log(followerId);\r\n-\r\n-            followerId.forEach(userId => {\r\n-                const receiverSocketId = getReceiverSocketId(userId.followerid);\r\n-\r\n-                if (receiverSocketId) {\r\n-                    io.to(receiverSocketId).emit(\"newNotif\", notification)\r\n-                }\r\n-            });\r\n-\r\n-            return res.status(201).json({ notif: notification });\r\n-        }\r\n-\r\n-        return res.status(200).json({ message: \"Creation de notif impossible!\" });\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"sendNotifsError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const delAllNotifications = async (req, res) => {\r\n-\r\n-    const userid = req.user.userid;\r\n-\r\n-\r\n-    try {\r\n-\r\n-        const delAll = await deleteAllNotifications(userid);\r\n-\r\n-        if(!delAll) return res.status(400).json({error: \"Erreur lors de la suppression des notifications\"});\r\n-\r\n-        return res.status(200).json({success: \"Tout les notifs sont supprimés\"});\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"delAllNotifsError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const deleteNotifications = async (req, res) => {\r\n-\r\n-    const { notifid } = req.params;\r\n-\r\n-    try {\r\n-\r\n-        const del = await deleteNotificationById(notifid);\r\n-\r\n-        if(!del) return res.status(400).json({error: \"Erreur lors de la suppression de la notification\"});\r\n-\r\n-        return res.status(200).json({success: \"La notif est supprimée\"});\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"delOneNotifsError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const setNotificationViewed = async (req, res) => {\r\n-\r\n-    const { notifid } = req.params;\r\n-\r\n-    try {\r\n-\r\n-        const setV = await setViewNotification(notifid);\r\n-\r\n-        if(!setV) return res.status(400).json({error: \"Erreur lors de la mise en vue de la notification\"});\r\n-\r\n-        return res.status(200).json({success: \"La notif est vue desormais\", view: setV.viewed});\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"ViewOneNotifsError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const getNotificationViewed = async (req, res) => {\r\n-\r\n-    const \r\n-\r\n-    try {\r\n-\r\n-        const setV = await setViewNotification(notifid);\r\n-\r\n-        if(!setV) return res.status(400).json({error: \"Erreur lors de la mise en vue de la notification\"});\r\n-\r\n-        return res.status(200).json({success: \"La notif est vue desormais\", view: setV.viewed});\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"ViewOneNotifsError\": error.message });\r\n-    }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722270810388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n     const userId = req.user.userid;\r\n \r\n     try {\r\n \r\n-        const setV = await get;\r\n+        const setV = await count;\r\n \r\n         if(!setV) return res.status(400).json({error: \"Erreur lors de la mise en vue de la notification\"});\r\n \r\n         return res.status(200).json({success: \"La notif est vue desormais\", view: setV.viewed});\r\n"
                },
                {
                    "date": 1722270816116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { allNotifs, createNotifs, createNotifsOne, deleteAllNotifications, deleteNotificationById, setViewNotification } from \"../models/notifModel.js\";\r\n+import { allNotifs, createNotifs, createNotifsOne, deleteAllNotifications, deleteNotificationById, getCountNotifUnread, setViewNotification } from \"../models/notifModel.js\";\r\n import { getReceiverSocketId, io } from \"../socket/socket.js\";\r\n \r\n \r\n \r\n@@ -138,9 +138,9 @@\n     const userId = req.user.userid;\r\n \r\n     try {\r\n \r\n-        const setV = await count;\r\n+        const setV = await getCountNotifUnread(userId);\r\n \r\n         if(!setV) return res.status(400).json({error: \"Erreur lors de la mise en vue de la notification\"});\r\n \r\n         return res.status(200).json({success: \"La notif est vue desormais\", view: setV.viewed});\r\n"
                },
                {
                    "date": 1722270825798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+import { allNotifs, createNotifs, createNotifsOne, deleteAllNotifications, deleteNotificationById, getCountNotifUnread, setViewNotification } from \"../models/notifModel.js\";\r\n+import { getReceiverSocketId, io } from \"../socket/socket.js\";\r\n+\r\n+\r\n+\r\n+export const getAllNotifs = async (req, res) => {\r\n+\r\n+    try {\r\n+        const userId = await req.user.userid;\r\n+\r\n+        const all = await allNotifs(userId);\r\n+\r\n+        if (!all[0]) return res.json({ notifications: {} })\r\n+\r\n+        return res.json({ notifications: all });\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"getAllError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const sendNotifs = async (req, res) => {\r\n+\r\n+    const { userId } = await req.params;\r\n+    const sender = await req.user;\r\n+    const { content } = await req.body;\r\n+\r\n+    // return res.json(content);\r\n+\r\n+    try {\r\n+\r\n+        const { notification, sendNotif } = await createNotifsOne(userId, sender.userid, content);\r\n+\r\n+        if (notification && sendNotif) {\r\n+            // io.TO() est utiliser pour envoyer un evenement a un utilisateur specifique\r\n+            const receiverSocketId = getReceiverSocketId(userId);\r\n+\r\n+            if (receiverSocketId) {\r\n+                io.to(receiverSocketId).emit(\"newNotif\", notification)\r\n+            }\r\n+            return res.status(201).json({ notif: notification });\r\n+        }\r\n+\r\n+        return res.status(200).json({ message: \"Creation de notif impossible!\" });\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"sendNotifsError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const sendNotifsNewPub = async (req, res) => {\r\n+\r\n+    const sender = await req.user;\r\n+    const { content } = await req.body;\r\n+\r\n+    // return res.json(content);\r\n+\r\n+    try {\r\n+\r\n+        const { notification, sendNotif, followerId } = await createNotifs(sender.userid, content);\r\n+\r\n+        if (notification && sendNotif) {\r\n+            // io.TO() est utiliser pour envoyer un evenement a un utilisateur specifique\r\n+\r\n+            console.log(followerId);\r\n+\r\n+            followerId.forEach(userId => {\r\n+                const receiverSocketId = getReceiverSocketId(userId.followerid);\r\n+\r\n+                if (receiverSocketId) {\r\n+                    io.to(receiverSocketId).emit(\"newNotif\", notification)\r\n+                }\r\n+            });\r\n+\r\n+            return res.status(201).json({ notif: notification });\r\n+        }\r\n+\r\n+        return res.status(200).json({ message: \"Creation de notif impossible!\" });\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"sendNotifsError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const delAllNotifications = async (req, res) => {\r\n+\r\n+    const userid = req.user.userid;\r\n+\r\n+\r\n+    try {\r\n+\r\n+        const delAll = await deleteAllNotifications(userid);\r\n+\r\n+        if(!delAll) return res.status(400).json({error: \"Erreur lors de la suppression des notifications\"});\r\n+\r\n+        return res.status(200).json({success: \"Tout les notifs sont supprimés\"});\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"delAllNotifsError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const deleteNotifications = async (req, res) => {\r\n+\r\n+    const { notifid } = req.params;\r\n+\r\n+    try {\r\n+\r\n+        const del = await deleteNotificationById(notifid);\r\n+\r\n+        if(!del) return res.status(400).json({error: \"Erreur lors de la suppression de la notification\"});\r\n+\r\n+        return res.status(200).json({success: \"La notif est supprimée\"});\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"delOneNotifsError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const setNotificationViewed = async (req, res) => {\r\n+\r\n+    const { notifid } = req.params;\r\n+\r\n+    try {\r\n+\r\n+        const setV = await setViewNotification(notifid);\r\n+\r\n+        if(!setV) return res.status(400).json({error: \"Erreur lors de la mise en vue de la notification\"});\r\n+\r\n+        return res.status(200).json({success: \"La notif est vue desormais\", view: setV.viewed});\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"ViewOneNotifsError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const getNotificationViewed = async (req, res) => {\r\n+\r\n+    const userId = req.user.userid;\r\n+\r\n+    try {\r\n+\r\n+        const get = await getCountNotifUnread(userId);\r\n+\r\n+        if(!get) return res.status(400).json({error: \"Erreur lors de la mise en vue de la notification\"});\r\n+\r\n+        return res.status(200).json({success: \"La notif est vue desormais\", view: get.viewed});\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"ViewOneNotifsError\": error.message });\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722270833048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+import { allNotifs, createNotifs, createNotifsOne, deleteAllNotifications, deleteNotificationById, getCountNotifUnread, setViewNotification } from \"../models/notifModel.js\";\r\n+import { getReceiverSocketId, io } from \"../socket/socket.js\";\r\n+\r\n+\r\n+\r\n+export const getAllNotifs = async (req, res) => {\r\n+\r\n+    try {\r\n+        const userId = await req.user.userid;\r\n+\r\n+        const all = await allNotifs(userId);\r\n+\r\n+        if (!all[0]) return res.json({ notifications: {} })\r\n+\r\n+        return res.json({ notifications: all });\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"getAllError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const sendNotifs = async (req, res) => {\r\n+\r\n+    const { userId } = await req.params;\r\n+    const sender = await req.user;\r\n+    const { content } = await req.body;\r\n+\r\n+    // return res.json(content);\r\n+\r\n+    try {\r\n+\r\n+        const { notification, sendNotif } = await createNotifsOne(userId, sender.userid, content);\r\n+\r\n+        if (notification && sendNotif) {\r\n+            // io.TO() est utiliser pour envoyer un evenement a un utilisateur specifique\r\n+            const receiverSocketId = getReceiverSocketId(userId);\r\n+\r\n+            if (receiverSocketId) {\r\n+                io.to(receiverSocketId).emit(\"newNotif\", notification)\r\n+            }\r\n+            return res.status(201).json({ notif: notification });\r\n+        }\r\n+\r\n+        return res.status(200).json({ message: \"Creation de notif impossible!\" });\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"sendNotifsError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const sendNotifsNewPub = async (req, res) => {\r\n+\r\n+    const sender = await req.user;\r\n+    const { content } = await req.body;\r\n+\r\n+    // return res.json(content);\r\n+\r\n+    try {\r\n+\r\n+        const { notification, sendNotif, followerId } = await createNotifs(sender.userid, content);\r\n+\r\n+        if (notification && sendNotif) {\r\n+            // io.TO() est utiliser pour envoyer un evenement a un utilisateur specifique\r\n+\r\n+            console.log(followerId);\r\n+\r\n+            followerId.forEach(userId => {\r\n+                const receiverSocketId = getReceiverSocketId(userId.followerid);\r\n+\r\n+                if (receiverSocketId) {\r\n+                    io.to(receiverSocketId).emit(\"newNotif\", notification)\r\n+                }\r\n+            });\r\n+\r\n+            return res.status(201).json({ notif: notification });\r\n+        }\r\n+\r\n+        return res.status(200).json({ message: \"Creation de notif impossible!\" });\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"sendNotifsError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const delAllNotifications = async (req, res) => {\r\n+\r\n+    const userid = req.user.userid;\r\n+\r\n+\r\n+    try {\r\n+\r\n+        const delAll = await deleteAllNotifications(userid);\r\n+\r\n+        if(!delAll) return res.status(400).json({error: \"Erreur lors de la suppression des notifications\"});\r\n+\r\n+        return res.status(200).json({success: \"Tout les notifs sont supprimés\"});\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"delAllNotifsError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const deleteNotifications = async (req, res) => {\r\n+\r\n+    const { notifid } = req.params;\r\n+\r\n+    try {\r\n+\r\n+        const del = await deleteNotificationById(notifid);\r\n+\r\n+        if(!del) return res.status(400).json({error: \"Erreur lors de la suppression de la notification\"});\r\n+\r\n+        return res.status(200).json({success: \"La notif est supprimée\"});\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"delOneNotifsError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const setNotificationViewed = async (req, res) => {\r\n+\r\n+    const { notifid } = req.params;\r\n+\r\n+    try {\r\n+\r\n+        const setV = await setViewNotification(notifid);\r\n+\r\n+        if(!setV) return res.status(400).json({error: \"Erreur lors de la mise en vue de la notification\"});\r\n+\r\n+        return res.status(200).json({success: \"La notif est vue desormais\", view: setV.viewed});\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"ViewOneNotifsError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const getNotificationViewed = async (req, res) => {\r\n+\r\n+    const userId = req.user.userid;\r\n+\r\n+    try {\r\n+\r\n+        const getV = await getCountNotifUnread(userId);\r\n+\r\n+        if(!getV) return res.status(400).json({error: \"Erreur lors de la mise en vue de la notification\"});\r\n+\r\n+        return res.status(200).json({success: \"La notif est vue desormais\", count: getV.viewed});\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"ViewOneNotifsError\": error.message });\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722270840340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,312 +142,10 @@\n         const getV = await getCountNotifUnread(userId);\r\n \r\n         if(!getV) return res.status(400).json({error: \"Erreur lors de la mise en vue de la notification\"});\r\n \r\n-        return res.status(200).json({success: \"La notif est vue desormais\", count: getV.viewed});\r\n+        return res.status(200).json({success: \"La notif est vue desormais\", count: getV.count});\r\n \r\n     } catch (error) {\r\n         return res.status(500).json({ \"ViewOneNotifsError\": error.message });\r\n     }\r\n-}\n-import { allNotifs, createNotifs, createNotifsOne, deleteAllNotifications, deleteNotificationById, getCountNotifUnread, setViewNotification } from \"../models/notifModel.js\";\r\n-import { getReceiverSocketId, io } from \"../socket/socket.js\";\r\n-\r\n-\r\n-\r\n-export const getAllNotifs = async (req, res) => {\r\n-\r\n-    try {\r\n-        const userId = await req.user.userid;\r\n-\r\n-        const all = await allNotifs(userId);\r\n-\r\n-        if (!all[0]) return res.json({ notifications: {} })\r\n-\r\n-        return res.json({ notifications: all });\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"getAllError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const sendNotifs = async (req, res) => {\r\n-\r\n-    const { userId } = await req.params;\r\n-    const sender = await req.user;\r\n-    const { content } = await req.body;\r\n-\r\n-    // return res.json(content);\r\n-\r\n-    try {\r\n-\r\n-        const { notification, sendNotif } = await createNotifsOne(userId, sender.userid, content);\r\n-\r\n-        if (notification && sendNotif) {\r\n-            // io.TO() est utiliser pour envoyer un evenement a un utilisateur specifique\r\n-            const receiverSocketId = getReceiverSocketId(userId);\r\n-\r\n-            if (receiverSocketId) {\r\n-                io.to(receiverSocketId).emit(\"newNotif\", notification)\r\n-            }\r\n-            return res.status(201).json({ notif: notification });\r\n-        }\r\n-\r\n-        return res.status(200).json({ message: \"Creation de notif impossible!\" });\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"sendNotifsError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const sendNotifsNewPub = async (req, res) => {\r\n-\r\n-    const sender = await req.user;\r\n-    const { content } = await req.body;\r\n-\r\n-    // return res.json(content);\r\n-\r\n-    try {\r\n-\r\n-        const { notification, sendNotif, followerId } = await createNotifs(sender.userid, content);\r\n-\r\n-        if (notification && sendNotif) {\r\n-            // io.TO() est utiliser pour envoyer un evenement a un utilisateur specifique\r\n-\r\n-            console.log(followerId);\r\n-\r\n-            followerId.forEach(userId => {\r\n-                const receiverSocketId = getReceiverSocketId(userId.followerid);\r\n-\r\n-                if (receiverSocketId) {\r\n-                    io.to(receiverSocketId).emit(\"newNotif\", notification)\r\n-                }\r\n-            });\r\n-\r\n-            return res.status(201).json({ notif: notification });\r\n-        }\r\n-\r\n-        return res.status(200).json({ message: \"Creation de notif impossible!\" });\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"sendNotifsError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const delAllNotifications = async (req, res) => {\r\n-\r\n-    const userid = req.user.userid;\r\n-\r\n-\r\n-    try {\r\n-\r\n-        const delAll = await deleteAllNotifications(userid);\r\n-\r\n-        if(!delAll) return res.status(400).json({error: \"Erreur lors de la suppression des notifications\"});\r\n-\r\n-        return res.status(200).json({success: \"Tout les notifs sont supprimés\"});\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"delAllNotifsError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const deleteNotifications = async (req, res) => {\r\n-\r\n-    const { notifid } = req.params;\r\n-\r\n-    try {\r\n-\r\n-        const del = await deleteNotificationById(notifid);\r\n-\r\n-        if(!del) return res.status(400).json({error: \"Erreur lors de la suppression de la notification\"});\r\n-\r\n-        return res.status(200).json({success: \"La notif est supprimée\"});\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"delOneNotifsError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const setNotificationViewed = async (req, res) => {\r\n-\r\n-    const { notifid } = req.params;\r\n-\r\n-    try {\r\n-\r\n-        const setV = await setViewNotification(notifid);\r\n-\r\n-        if(!setV) return res.status(400).json({error: \"Erreur lors de la mise en vue de la notification\"});\r\n-\r\n-        return res.status(200).json({success: \"La notif est vue desormais\", view: setV.viewed});\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"ViewOneNotifsError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const getNotificationViewed = async (req, res) => {\r\n-\r\n-    const userId = req.user.userid;\r\n-\r\n-    try {\r\n-\r\n-        const get = await getCountNotifUnread(userId);\r\n-\r\n-        if(!get) return res.status(400).json({error: \"Erreur lors de la mise en vue de la notification\"});\r\n-\r\n-        return res.status(200).json({success: \"La notif est vue desormais\", view: get.viewed});\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"ViewOneNotifsError\": error.message });\r\n-    }\r\n-}\n-import { allNotifs, createNotifs, createNotifsOne, deleteAllNotifications, deleteNotificationById, getCountNotifUnread, setViewNotification } from \"../models/notifModel.js\";\r\n-import { getReceiverSocketId, io } from \"../socket/socket.js\";\r\n-\r\n-\r\n-\r\n-export const getAllNotifs = async (req, res) => {\r\n-\r\n-    try {\r\n-        const userId = await req.user.userid;\r\n-\r\n-        const all = await allNotifs(userId);\r\n-\r\n-        if (!all[0]) return res.json({ notifications: {} })\r\n-\r\n-        return res.json({ notifications: all });\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"getAllError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const sendNotifs = async (req, res) => {\r\n-\r\n-    const { userId } = await req.params;\r\n-    const sender = await req.user;\r\n-    const { content } = await req.body;\r\n-\r\n-    // return res.json(content);\r\n-\r\n-    try {\r\n-\r\n-        const { notification, sendNotif } = await createNotifsOne(userId, sender.userid, content);\r\n-\r\n-        if (notification && sendNotif) {\r\n-            // io.TO() est utiliser pour envoyer un evenement a un utilisateur specifique\r\n-            const receiverSocketId = getReceiverSocketId(userId);\r\n-\r\n-            if (receiverSocketId) {\r\n-                io.to(receiverSocketId).emit(\"newNotif\", notification)\r\n-            }\r\n-            return res.status(201).json({ notif: notification });\r\n-        }\r\n-\r\n-        return res.status(200).json({ message: \"Creation de notif impossible!\" });\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"sendNotifsError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const sendNotifsNewPub = async (req, res) => {\r\n-\r\n-    const sender = await req.user;\r\n-    const { content } = await req.body;\r\n-\r\n-    // return res.json(content);\r\n-\r\n-    try {\r\n-\r\n-        const { notification, sendNotif, followerId } = await createNotifs(sender.userid, content);\r\n-\r\n-        if (notification && sendNotif) {\r\n-            // io.TO() est utiliser pour envoyer un evenement a un utilisateur specifique\r\n-\r\n-            console.log(followerId);\r\n-\r\n-            followerId.forEach(userId => {\r\n-                const receiverSocketId = getReceiverSocketId(userId.followerid);\r\n-\r\n-                if (receiverSocketId) {\r\n-                    io.to(receiverSocketId).emit(\"newNotif\", notification)\r\n-                }\r\n-            });\r\n-\r\n-            return res.status(201).json({ notif: notification });\r\n-        }\r\n-\r\n-        return res.status(200).json({ message: \"Creation de notif impossible!\" });\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"sendNotifsError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const delAllNotifications = async (req, res) => {\r\n-\r\n-    const userid = req.user.userid;\r\n-\r\n-\r\n-    try {\r\n-\r\n-        const delAll = await deleteAllNotifications(userid);\r\n-\r\n-        if(!delAll) return res.status(400).json({error: \"Erreur lors de la suppression des notifications\"});\r\n-\r\n-        return res.status(200).json({success: \"Tout les notifs sont supprimés\"});\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"delAllNotifsError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const deleteNotifications = async (req, res) => {\r\n-\r\n-    const { notifid } = req.params;\r\n-\r\n-    try {\r\n-\r\n-        const del = await deleteNotificationById(notifid);\r\n-\r\n-        if(!del) return res.status(400).json({error: \"Erreur lors de la suppression de la notification\"});\r\n-\r\n-        return res.status(200).json({success: \"La notif est supprimée\"});\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"delOneNotifsError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const setNotificationViewed = async (req, res) => {\r\n-\r\n-    const { notifid } = req.params;\r\n-\r\n-    try {\r\n-\r\n-        const setV = await setViewNotification(notifid);\r\n-\r\n-        if(!setV) return res.status(400).json({error: \"Erreur lors de la mise en vue de la notification\"});\r\n-\r\n-        return res.status(200).json({success: \"La notif est vue desormais\", view: setV.viewed});\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"ViewOneNotifsError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const getNotificationViewed = async (req, res) => {\r\n-\r\n-    const userId = req.user.userid;\r\n-\r\n-    try {\r\n-\r\n-        const setV = await getCountNotifUnread(userId);\r\n-\r\n-        if(!setV) return res.status(400).json({error: \"Erreur lors de la mise en vue de la notification\"});\r\n-\r\n-        return res.status(200).json({success: \"La notif est vue desormais\", view: setV.viewed});\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"ViewOneNotifsError\": error.message });\r\n-    }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722270856081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n     try {\r\n \r\n         const getV = await getCountNotifUnread(userId);\r\n \r\n-        if(!getV) return res.status(400).json({error: \"Erreur lors de la mise en vue de la notification\"});\r\n+        if(!getV) return res.status(400).json({error: \"Erreur lors de la e en vue de la notification\"});\r\n \r\n         return res.status(200).json({success: \"La notif est vue desormais\", count: getV.count});\r\n \r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1722270865188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+import { allNotifs, createNotifs, createNotifsOne, deleteAllNotifications, deleteNotificationById, getCountNotifUnread, setViewNotification } from \"../models/notifModel.js\";\r\n+import { getReceiverSocketId, io } from \"../socket/socket.js\";\r\n+\r\n+\r\n+\r\n+export const getAllNotifs = async (req, res) => {\r\n+\r\n+    try {\r\n+        const userId = await req.user.userid;\r\n+\r\n+        const all = await allNotifs(userId);\r\n+\r\n+        if (!all[0]) return res.json({ notifications: {} })\r\n+\r\n+        return res.json({ notifications: all });\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"getAllError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const sendNotifs = async (req, res) => {\r\n+\r\n+    const { userId } = await req.params;\r\n+    const sender = await req.user;\r\n+    const { content } = await req.body;\r\n+\r\n+    // return res.json(content);\r\n+\r\n+    try {\r\n+\r\n+        const { notification, sendNotif } = await createNotifsOne(userId, sender.userid, content);\r\n+\r\n+        if (notification && sendNotif) {\r\n+            // io.TO() est utiliser pour envoyer un evenement a un utilisateur specifique\r\n+            const receiverSocketId = getReceiverSocketId(userId);\r\n+\r\n+            if (receiverSocketId) {\r\n+                io.to(receiverSocketId).emit(\"newNotif\", notification)\r\n+            }\r\n+            return res.status(201).json({ notif: notification });\r\n+        }\r\n+\r\n+        return res.status(200).json({ message: \"Creation de notif impossible!\" });\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"sendNotifsError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const sendNotifsNewPub = async (req, res) => {\r\n+\r\n+    const sender = await req.user;\r\n+    const { content } = await req.body;\r\n+\r\n+    // return res.json(content);\r\n+\r\n+    try {\r\n+\r\n+        const { notification, sendNotif, followerId } = await createNotifs(sender.userid, content);\r\n+\r\n+        if (notification && sendNotif) {\r\n+            // io.TO() est utiliser pour envoyer un evenement a un utilisateur specifique\r\n+\r\n+            console.log(followerId);\r\n+\r\n+            followerId.forEach(userId => {\r\n+                const receiverSocketId = getReceiverSocketId(userId.followerid);\r\n+\r\n+                if (receiverSocketId) {\r\n+                    io.to(receiverSocketId).emit(\"newNotif\", notification)\r\n+                }\r\n+            });\r\n+\r\n+            return res.status(201).json({ notif: notification });\r\n+        }\r\n+\r\n+        return res.status(200).json({ message: \"Creation de notif impossible!\" });\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"sendNotifsError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const delAllNotifications = async (req, res) => {\r\n+\r\n+    const userid = req.user.userid;\r\n+\r\n+\r\n+    try {\r\n+\r\n+        const delAll = await deleteAllNotifications(userid);\r\n+\r\n+        if(!delAll) return res.status(400).json({error: \"Erreur lors de la suppression des notifications\"});\r\n+\r\n+        return res.status(200).json({success: \"Tout les notifs sont supprimés\"});\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"delAllNotifsError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const deleteNotifications = async (req, res) => {\r\n+\r\n+    const { notifid } = req.params;\r\n+\r\n+    try {\r\n+\r\n+        const del = await deleteNotificationById(notifid);\r\n+\r\n+        if(!del) return res.status(400).json({error: \"Erreur lors de la suppression de la notification\"});\r\n+\r\n+        return res.status(200).json({success: \"La notif est supprimée\"});\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"delOneNotifsError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const setNotificationViewed = async (req, res) => {\r\n+\r\n+    const { notifid } = req.params;\r\n+\r\n+    try {\r\n+\r\n+        const setV = await setViewNotification(notifid);\r\n+\r\n+        if(!setV) return res.status(400).json({error: \"Erreur lors de la mise en vue de la notification\"});\r\n+\r\n+        return res.status(200).json({success: \"La notif est vue desormais\", view: setV.viewed});\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"ViewOneNotifsError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const getNotificationViewed = async (req, res) => {\r\n+\r\n+    const userId = req.user.userid;\r\n+\r\n+    try {\r\n+\r\n+        const getV = await getCountNotifUnread(userId);\r\n+\r\n+        if(!getV) return res.status(400).json({error: \"Erreur lors de la prise de nombre de non vue de la notification\"});\r\n+\r\n+        return res.status(200).json({success: \"La notif est vue desormais\", count: getV.count});\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"ViewOneNotifsError\": error.message });\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722270889736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+import { allNotifs, createNotifs, createNotifsOne, deleteAllNotifications, deleteNotificationById, getCountNotifUnread, setViewNotification } from \"../models/notifModel.js\";\r\n+import { getReceiverSocketId, io } from \"../socket/socket.js\";\r\n+\r\n+\r\n+\r\n+export const getAllNotifs = async (req, res) => {\r\n+\r\n+    try {\r\n+        const userId = await req.user.userid;\r\n+\r\n+        const all = await allNotifs(userId);\r\n+\r\n+        if (!all[0]) return res.json({ notifications: {} })\r\n+\r\n+        return res.json({ notifications: all });\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"getAllError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const sendNotifs = async (req, res) => {\r\n+\r\n+    const { userId } = await req.params;\r\n+    const sender = await req.user;\r\n+    const { content } = await req.body;\r\n+\r\n+    // return res.json(content);\r\n+\r\n+    try {\r\n+\r\n+        const { notification, sendNotif } = await createNotifsOne(userId, sender.userid, content);\r\n+\r\n+        if (notification && sendNotif) {\r\n+            // io.TO() est utiliser pour envoyer un evenement a un utilisateur specifique\r\n+            const receiverSocketId = getReceiverSocketId(userId);\r\n+\r\n+            if (receiverSocketId) {\r\n+                io.to(receiverSocketId).emit(\"newNotif\", notification)\r\n+            }\r\n+            return res.status(201).json({ notif: notification });\r\n+        }\r\n+\r\n+        return res.status(200).json({ message: \"Creation de notif impossible!\" });\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"sendNotifsError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const sendNotifsNewPub = async (req, res) => {\r\n+\r\n+    const sender = await req.user;\r\n+    const { content } = await req.body;\r\n+\r\n+    // return res.json(content);\r\n+\r\n+    try {\r\n+\r\n+        const { notification, sendNotif, followerId } = await createNotifs(sender.userid, content);\r\n+\r\n+        if (notification && sendNotif) {\r\n+            // io.TO() est utiliser pour envoyer un evenement a un utilisateur specifique\r\n+\r\n+            console.log(followerId);\r\n+\r\n+            followerId.forEach(userId => {\r\n+                const receiverSocketId = getReceiverSocketId(userId.followerid);\r\n+\r\n+                if (receiverSocketId) {\r\n+                    io.to(receiverSocketId).emit(\"newNotif\", notification)\r\n+                }\r\n+            });\r\n+\r\n+            return res.status(201).json({ notif: notification });\r\n+        }\r\n+\r\n+        return res.status(200).json({ message: \"Creation de notif impossible!\" });\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"sendNotifsError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const delAllNotifications = async (req, res) => {\r\n+\r\n+    const userid = req.user.userid;\r\n+\r\n+\r\n+    try {\r\n+\r\n+        const delAll = await deleteAllNotifications(userid);\r\n+\r\n+        if(!delAll) return res.status(400).json({error: \"Erreur lors de la suppression des notifications\"});\r\n+\r\n+        return res.status(200).json({success: \"Tout les notifs sont supprimés\"});\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"delAllNotifsError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const deleteNotifications = async (req, res) => {\r\n+\r\n+    const { notifid } = req.params;\r\n+\r\n+    try {\r\n+\r\n+        const del = await deleteNotificationById(notifid);\r\n+\r\n+        if(!del) return res.status(400).json({error: \"Erreur lors de la suppression de la notification\"});\r\n+\r\n+        return res.status(200).json({success: \"La notif est supprimée\"});\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"delOneNotifsError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const setNotificationViewed = async (req, res) => {\r\n+\r\n+    const { notifid } = req.params;\r\n+\r\n+    try {\r\n+\r\n+        const setV = await setViewNotification(notifid);\r\n+\r\n+        if(!setV) return res.status(400).json({error: \"Erreur lors de la mise en vue de la notification\"});\r\n+\r\n+        return res.status(200).json({success: \"La notif est vue desormais\", view: setV.viewed});\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"ViewOneNotifsError\": error.message });\r\n+    }\r\n+}\r\n+\r\n+export const getNotificationViewed = async (req, res) => {\r\n+\r\n+    const userId = req.user.userid;\r\n+\r\n+    try {\r\n+\r\n+        const getV = await getCountNotifUnread(userId);\r\n+\r\n+        if(!getV) return res.status(400).json({error: \"Erreur lors de la prise de nombre de non vue des notification\"});\r\n+\r\n+        return res.status(200).json({success: \"Le nombre de unread notif est obtenu\", count: getV.count});\r\n+\r\n+    } catch (error) {\r\n+        return res.status(500).json({ \"ViewOneNotifsError\": error.message });\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722270908915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,309 +145,7 @@\n \r\n         return res.status(200).json({success: \"Le nombre de unread notif est obtenu\", count: getV.count});\r\n \r\n     } catch (error) {\r\n-        return res.status(500).json({ \"ViewOneNotifsError\": error.message });\r\n+        return res.status(500).json({ \"getCountUnreadNotifsError\": error.message });\r\n     }\r\n-}\n-import { allNotifs, createNotifs, createNotifsOne, deleteAllNotifications, deleteNotificationById, getCountNotifUnread, setViewNotification } from \"../models/notifModel.js\";\r\n-import { getReceiverSocketId, io } from \"../socket/socket.js\";\r\n-\r\n-\r\n-\r\n-export const getAllNotifs = async (req, res) => {\r\n-\r\n-    try {\r\n-        const userId = await req.user.userid;\r\n-\r\n-        const all = await allNotifs(userId);\r\n-\r\n-        if (!all[0]) return res.json({ notifications: {} })\r\n-\r\n-        return res.json({ notifications: all });\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"getAllError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const sendNotifs = async (req, res) => {\r\n-\r\n-    const { userId } = await req.params;\r\n-    const sender = await req.user;\r\n-    const { content } = await req.body;\r\n-\r\n-    // return res.json(content);\r\n-\r\n-    try {\r\n-\r\n-        const { notification, sendNotif } = await createNotifsOne(userId, sender.userid, content);\r\n-\r\n-        if (notification && sendNotif) {\r\n-            // io.TO() est utiliser pour envoyer un evenement a un utilisateur specifique\r\n-            const receiverSocketId = getReceiverSocketId(userId);\r\n-\r\n-            if (receiverSocketId) {\r\n-                io.to(receiverSocketId).emit(\"newNotif\", notification)\r\n-            }\r\n-            return res.status(201).json({ notif: notification });\r\n-        }\r\n-\r\n-        return res.status(200).json({ message: \"Creation de notif impossible!\" });\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"sendNotifsError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const sendNotifsNewPub = async (req, res) => {\r\n-\r\n-    const sender = await req.user;\r\n-    const { content } = await req.body;\r\n-\r\n-    // return res.json(content);\r\n-\r\n-    try {\r\n-\r\n-        const { notification, sendNotif, followerId } = await createNotifs(sender.userid, content);\r\n-\r\n-        if (notification && sendNotif) {\r\n-            // io.TO() est utiliser pour envoyer un evenement a un utilisateur specifique\r\n-\r\n-            console.log(followerId);\r\n-\r\n-            followerId.forEach(userId => {\r\n-                const receiverSocketId = getReceiverSocketId(userId.followerid);\r\n-\r\n-                if (receiverSocketId) {\r\n-                    io.to(receiverSocketId).emit(\"newNotif\", notification)\r\n-                }\r\n-            });\r\n-\r\n-            return res.status(201).json({ notif: notification });\r\n-        }\r\n-\r\n-        return res.status(200).json({ message: \"Creation de notif impossible!\" });\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"sendNotifsError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const delAllNotifications = async (req, res) => {\r\n-\r\n-    const userid = req.user.userid;\r\n-\r\n-\r\n-    try {\r\n-\r\n-        const delAll = await deleteAllNotifications(userid);\r\n-\r\n-        if(!delAll) return res.status(400).json({error: \"Erreur lors de la suppression des notifications\"});\r\n-\r\n-        return res.status(200).json({success: \"Tout les notifs sont supprimés\"});\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"delAllNotifsError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const deleteNotifications = async (req, res) => {\r\n-\r\n-    const { notifid } = req.params;\r\n-\r\n-    try {\r\n-\r\n-        const del = await deleteNotificationById(notifid);\r\n-\r\n-        if(!del) return res.status(400).json({error: \"Erreur lors de la suppression de la notification\"});\r\n-\r\n-        return res.status(200).json({success: \"La notif est supprimée\"});\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"delOneNotifsError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const setNotificationViewed = async (req, res) => {\r\n-\r\n-    const { notifid } = req.params;\r\n-\r\n-    try {\r\n-\r\n-        const setV = await setViewNotification(notifid);\r\n-\r\n-        if(!setV) return res.status(400).json({error: \"Erreur lors de la mise en vue de la notification\"});\r\n-\r\n-        return res.status(200).json({success: \"La notif est vue desormais\", view: setV.viewed});\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"ViewOneNotifsError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const getNotificationViewed = async (req, res) => {\r\n-\r\n-    const userId = req.user.userid;\r\n-\r\n-    try {\r\n-\r\n-        const getV = await getCountNotifUnread(userId);\r\n-\r\n-        if(!getV) return res.status(400).json({error: \"Erreur lors de la prise de nombre de non vue de la notification\"});\r\n-\r\n-        return res.status(200).json({success: \"La notif est vue desormais\", count: getV.count});\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"ViewOneNotifsError\": error.message });\r\n-    }\r\n-}\n-import { allNotifs, createNotifs, createNotifsOne, deleteAllNotifications, deleteNotificationById, getCountNotifUnread, setViewNotification } from \"../models/notifModel.js\";\r\n-import { getReceiverSocketId, io } from \"../socket/socket.js\";\r\n-\r\n-\r\n-\r\n-export const getAllNotifs = async (req, res) => {\r\n-\r\n-    try {\r\n-        const userId = await req.user.userid;\r\n-\r\n-        const all = await allNotifs(userId);\r\n-\r\n-        if (!all[0]) return res.json({ notifications: {} })\r\n-\r\n-        return res.json({ notifications: all });\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"getAllError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const sendNotifs = async (req, res) => {\r\n-\r\n-    const { userId } = await req.params;\r\n-    const sender = await req.user;\r\n-    const { content } = await req.body;\r\n-\r\n-    // return res.json(content);\r\n-\r\n-    try {\r\n-\r\n-        const { notification, sendNotif } = await createNotifsOne(userId, sender.userid, content);\r\n-\r\n-        if (notification && sendNotif) {\r\n-            // io.TO() est utiliser pour envoyer un evenement a un utilisateur specifique\r\n-            const receiverSocketId = getReceiverSocketId(userId);\r\n-\r\n-            if (receiverSocketId) {\r\n-                io.to(receiverSocketId).emit(\"newNotif\", notification)\r\n-            }\r\n-            return res.status(201).json({ notif: notification });\r\n-        }\r\n-\r\n-        return res.status(200).json({ message: \"Creation de notif impossible!\" });\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"sendNotifsError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const sendNotifsNewPub = async (req, res) => {\r\n-\r\n-    const sender = await req.user;\r\n-    const { content } = await req.body;\r\n-\r\n-    // return res.json(content);\r\n-\r\n-    try {\r\n-\r\n-        const { notification, sendNotif, followerId } = await createNotifs(sender.userid, content);\r\n-\r\n-        if (notification && sendNotif) {\r\n-            // io.TO() est utiliser pour envoyer un evenement a un utilisateur specifique\r\n-\r\n-            console.log(followerId);\r\n-\r\n-            followerId.forEach(userId => {\r\n-                const receiverSocketId = getReceiverSocketId(userId.followerid);\r\n-\r\n-                if (receiverSocketId) {\r\n-                    io.to(receiverSocketId).emit(\"newNotif\", notification)\r\n-                }\r\n-            });\r\n-\r\n-            return res.status(201).json({ notif: notification });\r\n-        }\r\n-\r\n-        return res.status(200).json({ message: \"Creation de notif impossible!\" });\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"sendNotifsError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const delAllNotifications = async (req, res) => {\r\n-\r\n-    const userid = req.user.userid;\r\n-\r\n-\r\n-    try {\r\n-\r\n-        const delAll = await deleteAllNotifications(userid);\r\n-\r\n-        if(!delAll) return res.status(400).json({error: \"Erreur lors de la suppression des notifications\"});\r\n-\r\n-        return res.status(200).json({success: \"Tout les notifs sont supprimés\"});\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"delAllNotifsError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const deleteNotifications = async (req, res) => {\r\n-\r\n-    const { notifid } = req.params;\r\n-\r\n-    try {\r\n-\r\n-        const del = await deleteNotificationById(notifid);\r\n-\r\n-        if(!del) return res.status(400).json({error: \"Erreur lors de la suppression de la notification\"});\r\n-\r\n-        return res.status(200).json({success: \"La notif est supprimée\"});\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"delOneNotifsError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const setNotificationViewed = async (req, res) => {\r\n-\r\n-    const { notifid } = req.params;\r\n-\r\n-    try {\r\n-\r\n-        const setV = await setViewNotification(notifid);\r\n-\r\n-        if(!setV) return res.status(400).json({error: \"Erreur lors de la mise en vue de la notification\"});\r\n-\r\n-        return res.status(200).json({success: \"La notif est vue desormais\", view: setV.viewed});\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"ViewOneNotifsError\": error.message });\r\n-    }\r\n-}\r\n-\r\n-export const getNotificationViewed = async (req, res) => {\r\n-\r\n-    const userId = req.user.userid;\r\n-\r\n-    try {\r\n-\r\n-        const getV = await getCountNotifUnread(userId);\r\n-\r\n-        if(!getV) return res.status(400).json({error: \"Erreur lors de la e en vue de la notification\"});\r\n-\r\n-        return res.status(200).json({success: \"La notif est vue desormais\", count: getV.count});\r\n-\r\n-    } catch (error) {\r\n-        return res.status(500).json({ \"ViewOneNotifsError\": error.message });\r\n-    }\r\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1722270762878,
            "name": "Commit-0",
            "content": "import { allNotifs, createNotifs, createNotifsOne, deleteAllNotifications, deleteNotificationById, setViewNotification } from \"../models/notifModel.js\";\r\nimport { getReceiverSocketId, io } from \"../socket/socket.js\";\r\n\r\n\r\n\r\nexport const getAllNotifs = async (req, res) => {\r\n\r\n    try {\r\n        const userId = await req.user.userid;\r\n\r\n        const all = await allNotifs(userId);\r\n\r\n        if (!all[0]) return res.json({ notifications: {} })\r\n\r\n        return res.json({ notifications: all });\r\n    } catch (error) {\r\n        return res.status(500).json({ \"getAllError\": error.message });\r\n    }\r\n}\r\n\r\nexport const sendNotifs = async (req, res) => {\r\n\r\n    const { userId } = await req.params;\r\n    const sender = await req.user;\r\n    const { content } = await req.body;\r\n\r\n    // return res.json(content);\r\n\r\n    try {\r\n\r\n        const { notification, sendNotif } = await createNotifsOne(userId, sender.userid, content);\r\n\r\n        if (notification && sendNotif) {\r\n            // io.TO() est utiliser pour envoyer un evenement a un utilisateur specifique\r\n            const receiverSocketId = getReceiverSocketId(userId);\r\n\r\n            if (receiverSocketId) {\r\n                io.to(receiverSocketId).emit(\"newNotif\", notification)\r\n            }\r\n            return res.status(201).json({ notif: notification });\r\n        }\r\n\r\n        return res.status(200).json({ message: \"Creation de notif impossible!\" });\r\n\r\n    } catch (error) {\r\n        return res.status(500).json({ \"sendNotifsError\": error.message });\r\n    }\r\n}\r\n\r\nexport const sendNotifsNewPub = async (req, res) => {\r\n\r\n    const sender = await req.user;\r\n    const { content } = await req.body;\r\n\r\n    // return res.json(content);\r\n\r\n    try {\r\n\r\n        const { notification, sendNotif, followerId } = await createNotifs(sender.userid, content);\r\n\r\n        if (notification && sendNotif) {\r\n            // io.TO() est utiliser pour envoyer un evenement a un utilisateur specifique\r\n\r\n            console.log(followerId);\r\n\r\n            followerId.forEach(userId => {\r\n                const receiverSocketId = getReceiverSocketId(userId.followerid);\r\n\r\n                if (receiverSocketId) {\r\n                    io.to(receiverSocketId).emit(\"newNotif\", notification)\r\n                }\r\n            });\r\n\r\n            return res.status(201).json({ notif: notification });\r\n        }\r\n\r\n        return res.status(200).json({ message: \"Creation de notif impossible!\" });\r\n\r\n    } catch (error) {\r\n        return res.status(500).json({ \"sendNotifsError\": error.message });\r\n    }\r\n}\r\n\r\nexport const delAllNotifications = async (req, res) => {\r\n\r\n    const userid = req.user.userid;\r\n\r\n\r\n    try {\r\n\r\n        const delAll = await deleteAllNotifications(userid);\r\n\r\n        if(!delAll) return res.status(400).json({error: \"Erreur lors de la suppression des notifications\"});\r\n\r\n        return res.status(200).json({success: \"Tout les notifs sont supprimés\"});\r\n\r\n    } catch (error) {\r\n        return res.status(500).json({ \"delAllNotifsError\": error.message });\r\n    }\r\n}\r\n\r\nexport const deleteNotifications = async (req, res) => {\r\n\r\n    const { notifid } = req.params;\r\n\r\n    try {\r\n\r\n        const del = await deleteNotificationById(notifid);\r\n\r\n        if(!del) return res.status(400).json({error: \"Erreur lors de la suppression de la notification\"});\r\n\r\n        return res.status(200).json({success: \"La notif est supprimée\"});\r\n\r\n    } catch (error) {\r\n        return res.status(500).json({ \"delOneNotifsError\": error.message });\r\n    }\r\n}\r\n\r\nexport const setNotificationViewed = async (req, res) => {\r\n\r\n    const { notifid } = req.params;\r\n\r\n    try {\r\n\r\n        const setV = await setViewNotification(notifid);\r\n\r\n        if(!setV) return res.status(400).json({error: \"Erreur lors de la mise en vue de la notification\"});\r\n\r\n        return res.status(200).json({success: \"La notif est vue desormais\", view: setV.viewed});\r\n\r\n    } catch (error) {\r\n        return res.status(500).json({ \"ViewOneNotifsError\": error.message });\r\n    }\r\n}\r\nexport const setNotificationViewed = async (req, res) => {\r\n\r\n    const { notifid } = req.params;\r\n\r\n    try {\r\n\r\n        const setV = await setViewNotification(notifid);\r\n\r\n        if(!setV) return res.status(400).json({error: \"Erreur lors de la mise en vue de la notification\"});\r\n\r\n        return res.status(200).json({success: \"La notif est vue desormais\", view: setV.viewed});\r\n\r\n    } catch (error) {\r\n        return res.status(500).json({ \"ViewOneNotifsError\": error.message });\r\n    }\r\n}"
        }
    ]
}