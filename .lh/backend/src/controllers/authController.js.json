{
    "sourceFile": "backend/src/controllers/authController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1720428093505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1720428142032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n             companynumber, \r\n             phone, \r\n             adress, \r\n             email, \r\n-            bio, \r\n+            bio,\r\n             profileimage, \r\n             accountid, \r\n             password, \r\n             confirmPassword \r\n"
                },
                {
                    "date": 1720428156247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,173 @@\n+import bcryptjs from 'bcryptjs';\r\n+import pool from \"../db/connexion.js\";\r\n+import generateToken from '../utils/jwtGenerator.js';\r\n+\r\n+export const signup = async (req, res) => {\r\n+    try {\r\n+        // Prend les information du clients side\r\n+        const { \r\n+            firstname, \r\n+            lastname, \r\n+            usercin, \r\n+            companynumber, \r\n+            phone, \r\n+            adress, \r\n+            email, \r\n+            bio,\r\n+            profileimage, \r\n+            accountid, \r\n+            password, \r\n+            confirmPassword \r\n+        } = req.body;\r\n+\r\n+        const profile = \"X.jpg\";\r\n+\r\n+        var data = [];\r\n+\r\n+        var query = \"\";\r\n+\r\n+        // Verifie si les champs sont vide\r\n+        if (!firstname || !password || !confirmPassword || !phone || !adress || !accountid) {\r\n+            return res.status(400).json({ error: \"Completer tous les champs s'il vous plait\" });\r\n+        }\r\n+\r\n+        if (accountid == 1 || accountid == 3) {\r\n+            if (!usercin) {\r\n+                return res.status(400).json({ error: \"Completer tous les champs s'il vous plait\" });\r\n+            }\r\n+\r\n+            query = \"INSERT INTO users (firstname,lastname,usercin,phone,address,email,bio,profileimage,accountid,password) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING *\";\r\n+\r\n+            data = [\r\n+                firstname,\r\n+                lastname,\r\n+                usercin,\r\n+                phone,\r\n+                adress,\r\n+                email,\r\n+                bio,\r\n+                profile,\r\n+                accountid\r\n+            ];\r\n+\r\n+        } else if (accountid == 2) {\r\n+            if (!companynumber || !email) {\r\n+                return res.status(400).json({ error: \"Completer tous les champs s'il vous plait\" });\r\n+            }\r\n+\r\n+            query = \"INSERT INTO users (firstname,companynumber,phone,address,email,bio,profileimage,accountid,password) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING *\";\r\n+\r\n+            data = [\r\n+                firstname,\r\n+                companynumber,\r\n+                phone,\r\n+                adress,\r\n+                email,\r\n+                bio,\r\n+                profile,\r\n+                accountid\r\n+            ];\r\n+        }\r\n+\r\n+        // Verifie si le mots de passe correspond a celui du confirmation\r\n+        if (password != confirmPassword) {\r\n+            return res.status(400).json({ error: \"Mots de passe ne correspond pas\" });\r\n+        }\r\n+\r\n+        // Verifier si l'utilisateur existe deja dans la base de donnees\r\n+        const user = await pool.query(\"SELECT * FROM users WHERE email = $1 or phone = $2\", [email, phone]);\r\n+        if (user.rowCount > 0) {\r\n+            return res.status(400).json({ error: \"L'utilisateur existe Dejas\" });\r\n+        }\r\n+\r\n+        // Crypter le mots de passe\r\n+        const salt = await bcryptjs.genSalt(10);\r\n+        const hashedPassword = await bcryptjs.hash(password, salt);\r\n+\r\n+\r\n+        data.push(hashedPassword);\r\n+\r\n+        const createUsers = await pool.query(query, data);\r\n+\r\n+        if (createUsers) {\r\n+            // generer un token\r\n+            const newUsers = createUsers.rows[0];\r\n+\r\n+            const token = generateToken(newUsers.userid, res);\r\n+\r\n+\r\n+            return res.json({ token });\r\n+\r\n+        } else {\r\n+            return res.status(400).json({ error: \"Donnee incoherents\" });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.log(\"Erreur au niveau du signupController: \", error.message)\r\n+        return res.status(500).send(\"Server error: \" + error.message);\r\n+    }\r\n+};\r\n+\r\n+export const login = async (req, res) => {\r\n+    try {\r\n+\r\n+        // prend les information sur le client\r\n+        const { email, password } = req.body;\r\n+\r\n+        // Verifier si l'email/telephone existe et que le password correspond\r\n+        const userExist = await pool.query(\"SELECT * from users WHERE email = $1 or phone = $2\", [email, email]);\r\n+\r\n+        if (!userExist.rows[0]) {// utilisateur n'existe pas\r\n+            return res.status(500).json({ error: \"L'utilisateur n'existe pas\" });\r\n+        }\r\n+\r\n+        const users = userExist.rows[0];\r\n+\r\n+        const isCorrectPassword = await bcryptjs.compare(password,users.password);\r\n+\r\n+        if (!isCorrectPassword) {\r\n+            return res.status(500).json({ error: \"Mots de passe incorrect\" });\r\n+        }\r\n+\r\n+        const token = generateToken(users.userid, res);\r\n+\r\n+        return res.json({ token });\r\n+\r\n+    } catch (error) {\r\n+        console.log(error)\r\n+        return res.status(500).send(\"Server error: \" + error.message);\r\n+    }\r\n+};\r\n+\r\n+export const getMe = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const user = req.user;\r\n+\r\n+        if (!user) {\r\n+            return res.status(500).json({ error: \"L'utilisateur existe pas\" });\r\n+        }\r\n+\r\n+        console.log(user)\r\n+\r\n+        let fullname = \"\";\r\n+\r\n+        if(!user.lastname){\r\n+            fullname = user.firstname;\r\n+        }else{\r\n+            fullname = user.firstname + \" \" + user.lastname;\r\n+        }\r\n+\r\n+        return res.status(200).json({\r\n+            id: user.userid,\r\n+            fullName: fullname,\r\n+            accounttype: user.accounttype\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.log(error)\r\n+        return res.status(500).send(\"Server error: \" + error);\r\n+    }\r\n+\r\n+}\r\n"
                },
                {
                    "date": 1720428162394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,177 +170,4 @@\n         return res.status(500).send(\"Server error: \" + error);\r\n     }\r\n \r\n }\r\n-import bcryptjs from 'bcryptjs';\r\n-import pool from \"../db/connexion.js\";\r\n-import generateToken from '../utils/jwtGenerator.js';\r\n-\r\n-export const signup = async (req, res) => {\r\n-    try {\r\n-        // Prend les information du clients side\r\n-        const { \r\n-            firstname, \r\n-            lastname, \r\n-            usercin, \r\n-            companynumber, \r\n-            phone, \r\n-            adress, \r\n-            email, \r\n-            bio,\r\n-            profileimage, \r\n-            accountid, \r\n-            password, \r\n-            confirmPassword \r\n-        } = req.body;\r\n-\r\n-        const profile = \"X.jpg\";\r\n-\r\n-        var data = [];\r\n-\r\n-        var query = \"\";\r\n-\r\n-        // Verifie si les champs sont vide\r\n-        if (!firstname || !password || !confirmPassword || !phone || !adress || !accountid) {\r\n-            return res.status(400).json({ error: \"Completer tous les champs s'il vous plait\" });\r\n-        }\r\n-\r\n-        if (accountid == 1 || accountid == 3) {\r\n-            if (!usercin) {\r\n-                return res.status(400).json({ error: \"Completer tous les champs s'il vous plait\" });\r\n-            }\r\n-\r\n-            query = \"INSERT INTO users (firstname,lastname,usercin,phone,address,email,bio,profileimage,accountid,password) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING *\";\r\n-\r\n-            data = [\r\n-                firstname,\r\n-                lastname,\r\n-                usercin,\r\n-                phone,\r\n-                adress,\r\n-                email,\r\n-                bio,\r\n-                profile,\r\n-                accountid\r\n-            ];\r\n-\r\n-        } else if (accountid == 2) {\r\n-            if (!companynumber || !email) {\r\n-                return res.status(400).json({ error: \"Completer tous les champs s'il vous plait\" });\r\n-            }\r\n-\r\n-            query = \"INSERT INTO users (firstname,companynumber,phone,address,email,bio,profileimage,accountid,password) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING *\";\r\n-\r\n-            data = [\r\n-                firstname,\r\n-                companynumber,\r\n-                phone,\r\n-                adress,\r\n-                email,\r\n-                bio,\r\n-                profile,\r\n-                accountid\r\n-            ];\r\n-        }\r\n-\r\n-        // Verifie si le mots de passe correspond a celui du confirmation\r\n-        if (password != confirmPassword) {\r\n-            return res.status(400).json({ error: \"Mots de passe ne correspond pas\" });\r\n-        }\r\n-\r\n-        // Verifier si l'utilisateur existe deja dans la base de donnees\r\n-        const user = await pool.query(\"SELECT * FROM users WHERE email = $1 or phone = $2\", [email, phone]);\r\n-        if (user.rowCount > 0) {\r\n-            return res.status(400).json({ error: \"L'utilisateur existe Dejas\" });\r\n-        }\r\n-\r\n-        // Crypter le mots de passe\r\n-        const salt = await bcryptjs.genSalt(10);\r\n-        const hashedPassword = await bcryptjs.hash(password, salt);\r\n-\r\n-\r\n-        data.push(hashedPassword);\r\n-\r\n-        const createUsers = await pool.query(query, data);\r\n-\r\n-        if (createUsers) {\r\n-            // generer un token\r\n-            const newUsers = createUsers.rows[0];\r\n-\r\n-            const token = generateToken(newUsers.userid, res);\r\n-\r\n-\r\n-            return res.json({ token });\r\n-\r\n-        } else {\r\n-            return res.status(400).json({ error: \"Donnee incoherents\" });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.log(\"Erreur au niveau du signupController: \", error.message)\r\n-        return res.status(500).send(\"Server error: \" + error.message);\r\n-    }\r\n-};\r\n-\r\n-export const login = async (req, res) => {\r\n-    try {\r\n-\r\n-        // prend les information sur le client\r\n-        const { email, password } = req.body;\r\n-\r\n-        // Verifier si l'email/telephone existe et que le password correspond\r\n-        const userExist = await pool.query(\"SELECT * from users WHERE email = $1 or phone = $2\", [email, email]);\r\n-\r\n-        if (!userExist.rows[0]) {// utilisateur n'existe pas\r\n-            return res.status(500).json({ error: \"L'utilisateur n'existe pas\" });\r\n-        }\r\n-\r\n-        const users = userExist.rows[0];\r\n-\r\n-        const isCorrectPassword = await bcryptjs.compare(password,users.password);\r\n-\r\n-        if (!isCorrectPassword) {\r\n-            return res.status(500).json({ error: \"Mots de passe incorrect\" });\r\n-        }\r\n-\r\n-        const token = generateToken(users.userid, res);\r\n-\r\n-        return res.json({ token });\r\n-\r\n-    } catch (error) {\r\n-        console.log(error)\r\n-        return res.status(500).send(\"Server error: \" + error.message);\r\n-    }\r\n-};\r\n-\r\n-export const getMe = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const user = req.user;\r\n-\r\n-        if (!user) {\r\n-            return res.status(500).json({ error: \"L'utilisateur existe pas\" });\r\n-        }\r\n-\r\n-        console.log(user)\r\n-\r\n-        let fullname = \"\";\r\n-\r\n-        if(!user.lastname){\r\n-            fullname = user.firstname;\r\n-        }else{\r\n-            fullname = user.firstname + \" \" + user.lastname;\r\n-        }\r\n-\r\n-        return res.status(200).json({\r\n-            id: user.userid,\r\n-            fullName: fullname,\r\n-            accounttype: user.accounttype\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.log(error)\r\n-        return res.status(500).send(\"Server error: \" + error);\r\n-    }\r\n-\r\n-}\r\n"
                },
                {
                    "date": 1720428168816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n         } = req.body;\r\n \r\n         const profile = \"X.jpg\";\r\n \r\n-        var data = [];\r\n+        var data = [];loj\r\n \r\n         var query = \"\";\r\n \r\n         // Verifie si les champs sont vide\r\n"
                },
                {
                    "date": 1720603034695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,44 +1,43 @@\n import bcryptjs from 'bcryptjs';\r\n import pool from \"../db/connexion.js\";\r\n-import generateToken from '../utils/jwtGenerator.js';\r\n+import { generateAccessToken, generateRefreshToken, hashPassword } from '../utils/jwtGenerator.js';\r\n+import { createUser, getUser } from '../models/users.js';\r\n \r\n export const signup = async (req, res) => {\r\n     try {\r\n         // Prend les information du clients side\r\n-        const { \r\n-            firstname, \r\n-            lastname, \r\n-            usercin, \r\n-            companynumber, \r\n-            phone, \r\n-            adress, \r\n-            email, \r\n+\r\n+        const {\r\n+            firstname,\r\n+            lastname,\r\n+            usercin,\r\n+            companynumber,\r\n+            phone,\r\n+            adress,\r\n+            email,\r\n             bio,\r\n-            profileimage, \r\n-            accountid, \r\n-            password, \r\n-            confirmPassword \r\n-        } = req.body;\r\n+            profileimage,\r\n+            accountid,\r\n+            password,\r\n+            confirmPassword\r\n+        } = await req.body;\r\n \r\n+\r\n         const profile = \"X.jpg\";\r\n \r\n-        var data = [];loj\r\n+        var data = [];\r\n \r\n-        var query = \"\";\r\n-\r\n         // Verifie si les champs sont vide\r\n         if (!firstname || !password || !confirmPassword || !phone || !adress || !accountid) {\r\n             return res.status(400).json({ error: \"Completer tous les champs s'il vous plait\" });\r\n         }\r\n \r\n-        if (accountid == 1 || accountid == 3) {\r\n+        if (accountid === 2 || accountid === 3) {\r\n             if (!usercin) {\r\n-                return res.status(400).json({ error: \"Completer tous les champs s'il vous plait\" });\r\n+                return res.status(400).json({ error: \"Completer tous les champs Obligatoire s'il vous plait (CIN)\" });\r\n             }\r\n \r\n-            query = \"INSERT INTO users (firstname,lastname,usercin,phone,address,email,bio,profileimage,accountid,password) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING *\";\r\n-\r\n             data = [\r\n                 firstname,\r\n                 lastname,\r\n                 usercin,\r\n@@ -49,15 +48,13 @@\n                 profile,\r\n                 accountid\r\n             ];\r\n \r\n-        } else if (accountid == 2) {\r\n+        } else if (accountid === 1) {\r\n             if (!companynumber || !email) {\r\n-                return res.status(400).json({ error: \"Completer tous les champs s'il vous plait\" });\r\n+                return res.status(400).json({ error: \"Completer tous les champs s'il vous plait (companyNumber / email)\" });\r\n             }\r\n \r\n-            query = \"INSERT INTO users (firstname,companynumber,phone,address,email,bio,profileimage,accountid,password) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING *\";\r\n-\r\n             data = [\r\n                 firstname,\r\n                 companynumber,\r\n                 phone,\r\n@@ -74,30 +71,32 @@\n             return res.status(400).json({ error: \"Mots de passe ne correspond pas\" });\r\n         }\r\n \r\n         // Verifier si l'utilisateur existe deja dans la base de donnees\r\n-        const user = await pool.query(\"SELECT * FROM users WHERE email = $1 or phone = $2\", [email, phone]);\r\n-        if (user.rowCount > 0) {\r\n+        const user = await getUser(email, usercin, companynumber, phone);\r\n+\r\n+        \r\n+        if (user) {\r\n             return res.status(400).json({ error: \"L'utilisateur existe Dejas\" });\r\n         }\r\n \r\n         // Crypter le mots de passe\r\n-        const salt = await bcryptjs.genSalt(10);\r\n-        const hashedPassword = await bcryptjs.hash(password, salt);\r\n+        const hashedPassword = await hashPassword(password);\r\n \r\n \r\n         data.push(hashedPassword);\r\n \r\n-        const createUsers = await pool.query(query, data);\r\n \r\n+        const createUsers = await createUser(data, accountid);\r\n+\r\n         if (createUsers) {\r\n             // generer un token\r\n-            const newUsers = createUsers.rows[0];\r\n \r\n-            const token = generateToken(newUsers.userid, res);\r\n+            const token = generateAccessToken(createUsers, res);\r\n+            const refToken = await generateRefreshToken(createUsers);\r\n \r\n \r\n-            return res.json({ token });\r\n+            return res.json({ token, refToken });\r\n \r\n         } else {\r\n             return res.status(400).json({ error: \"Donnee incoherents\" });\r\n         }\r\n@@ -107,36 +106,76 @@\n         return res.status(500).send(\"Server error: \" + error.message);\r\n     }\r\n };\r\n \r\n+\r\n+\r\n+export const setImageProfile = async (req, res) => {\r\n+    try{\r\n+\r\n+        const id = req.user.userid;\r\n+\r\n+        console.log(id);\r\n+\r\n+        if(!req.file){\r\n+            return res.status(400).json({ error: \"Aucun fichier sélectionné\" });\r\n+        }\r\n+\r\n+        const profileImage = req.file.filename;\r\n+\r\n+        const user = await pool.query(\"UPDATE users SET profileimage = $1 WHERE userid = $2 RETURNING *\", [profileImage, id]);\r\n+\r\n+        if(user.rows[0]){\r\n+            return res.status(200).json({ user: user.rows[0] });\r\n+        }else{\r\n+            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n+        }\r\n+\r\n+\r\n+    }catch(error){\r\n+        console.log(error);\r\n+        return res.status(500).send(\"Server error: \" + error);\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n export const login = async (req, res) => {\r\n     try {\r\n \r\n         // prend les information sur le client\r\n         const { email, password } = req.body;\r\n \r\n         // Verifier si l'email/telephone existe et que le password correspond\r\n-        const userExist = await pool.query(\"SELECT * from users WHERE email = $1 or phone = $2\", [email, email]);\r\n+        const userExist = await pool.query(\"SELECT * FROM users WHERE email = $1 or phone = $2\", [email, email]);\r\n \r\n         if (!userExist.rows[0]) {// utilisateur n'existe pas\r\n             return res.status(500).json({ error: \"L'utilisateur n'existe pas\" });\r\n         }\r\n \r\n         const users = userExist.rows[0];\r\n \r\n-        const isCorrectPassword = await bcryptjs.compare(password,users.password);\r\n+        const isCorrectPassword = await bcryptjs.compare(password, users.password);\r\n \r\n         if (!isCorrectPassword) {\r\n             return res.status(500).json({ error: \"Mots de passe incorrect\" });\r\n         }\r\n \r\n-        const token = generateToken(users.userid, res);\r\n+        const accessToken = generateAccessToken(users, res);\r\n+        const refToken = await generateRefreshToken(users);\r\n \r\n-        return res.json({ token });\r\n+        res.cookie('refreshToken', refToken, {\r\n+            httpOnly: true,\r\n+            secure: true,\r\n+            sameSite: 'Strict',\r\n+            maxAge: 7 * 24 * 60 * 60 * 1000 // 7 jours\r\n+        });\r\n \r\n+        return res.json({ accessToken, refToken });\r\n+\r\n     } catch (error) {\r\n         console.log(error)\r\n-        return res.status(500).send(\"Server error: \" + error.message);\r\n+        return res.status(500).json({error: \"Server error: \" + error.message });\r\n     }\r\n };\r\n \r\n export const getMe = async (req, res) => {\r\n@@ -152,22 +191,56 @@\n         console.log(user)\r\n \r\n         let fullname = \"\";\r\n \r\n-        if(!user.lastname){\r\n+        if (!user.lastname) {\r\n             fullname = user.firstname;\r\n-        }else{\r\n+        } else {\r\n             fullname = user.firstname + \" \" + user.lastname;\r\n         }\r\n \r\n         return res.status(200).json({\r\n             id: user.userid,\r\n             fullName: fullname,\r\n-            accounttype: user.accounttype\r\n+            accounttype: user.accounttype,\r\n+            profile: user.profileimage\r\n         });\r\n \r\n     } catch (error) {\r\n         console.log(error)\r\n-        return res.status(500).send(\"Server error: \" + error);\r\n+        return res.status(500).json( { error: \"Server error: \" + error });\r\n     }\r\n \r\n }\r\n+\r\n+\r\n+export const refreshAccessToken = async (req, res) => {\r\n+    const refreshToken = req.body.refToken;\r\n+\r\n+    if (refreshToken == null) return res.status(401).json({auth: false, error: \"Aucun token fourni\"});\r\n+\r\n+    try {\r\n+        // Vérifier si le refresh token existe en base de données\r\n+        const storedToken = await pool.query('SELECT * FROM refresh_tokens WHERE token = $1', [refreshToken]);\r\n+        const tokenRecord = storedToken.rows[0];\r\n+\r\n+        if (!tokenRecord) return res.status(403).json({ auth: false, error: \"Token invalide\" }); // Token invalide\r\n+\r\n+        if (tokenRecord.expires_at < Date.now()) {\r\n+            try {\r\n+                const deleteRefreshToken = await pool.query(\"DELETE FROM refresh_tokens WHERE token = $1\", [refreshToken]);\r\n+                return res.status(403).json({ auth: false, error: \"Token expiré\" });\r\n+\r\n+            } catch (error) {\r\n+                console.error('Erreur lors de la mise a jour du refresh token :', error.message);\r\n+                return res.status(500).json({ auth: false, message: 'Erreur lors de la mise a jouur du refresh token' + error });\r\n+            }\r\n+        }\r\n+\r\n+        // Générer un nouvel access token\r\n+        const accessToken = generateAccessToken(tokenRecord);\r\n+        return res.status(200).json({ auth: true, accessToken });\r\n+    } catch (error) {\r\n+        console.error('Erreur lors de la vérification du refresh token :', error.message);\r\n+        return res.status(500).json({ message: 'Erreur lors de la vérification du refresh token' });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1720605608007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,9 +184,9 @@\n \r\n         const user = req.user;\r\n \r\n         if (!user) {\r\n-            return res.status(500).json({ error: \"L'utilisateur existe pas\" });\r\n+            return res.status(500).json({ auth: false, error: \"L'utilisateur existe pas\" });\r\n         }\r\n \r\n         console.log(user)\r\n \r\n"
                },
                {
                    "date": 1720605622658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,9 +206,9 @@\n         });\r\n \r\n     } catch (error) {\r\n         console.log(error)\r\n-        return res.status(500).json( { error: \"Server error: \" + error });\r\n+        return res.status(500).json( {auth: false, error: \"Server error: \" + error });\r\n     }\r\n \r\n }\r\n \r\n"
                },
                {
                    "date": 1720605636031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,9 +206,9 @@\n         });\r\n \r\n     } catch (error) {\r\n         console.log(error)\r\n-        return res.status(500).json( {auth: false, error: \"Server error: \" + error });\r\n+        return res.status(500).json( { auth: false, error: \"Server error: \" + error });\r\n     }\r\n \r\n }\r\n \r\n"
                },
                {
                    "date": 1720605911138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,10 +111,12 @@\n \r\n export const setImageProfile = async (req, res) => {\r\n     try{\r\n \r\n+\r\n         const id = req.user.userid;\r\n \r\n+\r\n         console.log(id);\r\n \r\n         if(!req.file){\r\n             return res.status(400).json({ error: \"Aucun fichier sélectionné\" });\r\n@@ -184,9 +186,9 @@\n \r\n         const user = req.user;\r\n \r\n         if (!user) {\r\n-            return res.status(500).json({ auth: false, error: \"L'utilisateur existe pas\" });\r\n+            return res.status(500).json({ error: \"L'utilisateur existe pas\" });\r\n         }\r\n \r\n         console.log(user)\r\n \r\n@@ -206,9 +208,9 @@\n         });\r\n \r\n     } catch (error) {\r\n         console.log(error)\r\n-        return res.status(500).json( { auth: false, error: \"Server error: \" + error });\r\n+        return res.status(500).json( { error: \"Server error: \" + error });\r\n     }\r\n \r\n }\r\n \r\n@@ -222,9 +224,9 @@\n         // Vérifier si le refresh token existe en base de données\r\n         const storedToken = await pool.query('SELECT * FROM refresh_tokens WHERE token = $1', [refreshToken]);\r\n         const tokenRecord = storedToken.rows[0];\r\n \r\n-        if (!tokenRecord) return res.status(403).json({ auth: false, error: \"Token invalide\" }); // Token invalide\r\n+        if (!tokenRecord) return res.Status(403).json({ auth: false, error: \"Token invalide\" }); // Token invalide\r\n \r\n         if (tokenRecord.expires_at < Date.now()) {\r\n             try {\r\n                 const deleteRefreshToken = await pool.query(\"DELETE FROM refresh_tokens WHERE token = $1\", [refreshToken]);\r\n"
                },
                {
                    "date": 1720606185168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,9 +233,9 @@\n                 return res.status(403).json({ auth: false, error: \"Token expiré\" });\r\n \r\n             } catch (error) {\r\n                 console.error('Erreur lors de la mise a jour du refresh token :', error.message);\r\n-                return res.status(500).json({ auth: false, message: 'Erreur lors de la mise a jouur du refresh token' + error });\r\n+                return res.send({ auth: false, message: 'Erreur lors de la mise a jouur du refresh token' + error });\r\n             }\r\n         }\r\n \r\n         // Générer un nouvel access token\r\n"
                },
                {
                    "date": 1720606192033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,9 +233,9 @@\n                 return res.status(403).json({ auth: false, error: \"Token expiré\" });\r\n \r\n             } catch (error) {\r\n                 console.error('Erreur lors de la mise a jour du refresh token :', error.message);\r\n-                return res.send({ auth: false, message: 'Erreur lors de la mise a jouur du refresh token' + error });\r\n+                return res.send({message: 'Erreur lors de la mise a jouur du refresh token' + error });\r\n             }\r\n         }\r\n \r\n         // Générer un nouvel access token\r\n"
                },
                {
                    "date": 1720606201309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,9 +233,9 @@\n                 return res.status(403).json({ auth: false, error: \"Token expiré\" });\r\n \r\n             } catch (error) {\r\n                 console.error('Erreur lors de la mise a jour du refresh token :', error.message);\r\n-                return res.send({message: 'Erreur lors de la mise a jouur du refresh token' + error });\r\n+                return res.send({'Erreur lors de la mise a jouur du refresh token' + error });\r\n             }\r\n         }\r\n \r\n         // Générer un nouvel access token\r\n"
                },
                {
                    "date": 1720606209127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,9 +233,9 @@\n                 return res.status(403).json({ auth: false, error: \"Token expiré\" });\r\n \r\n             } catch (error) {\r\n                 console.error('Erreur lors de la mise a jour du refresh token :', error.message);\r\n-                return res.send({'Erreur lors de la mise a jouur du refresh token' + error });\r\n+                return res.send('Erreur lors de la mise a jouur du refresh token' + error );\r\n             }\r\n         }\r\n \r\n         // Générer un nouvel access token\r\n"
                },
                {
                    "date": 1720606350043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,9 +208,9 @@\n         });\r\n \r\n     } catch (error) {\r\n         console.log(error)\r\n-        return res.status(500).json( { error: \"Server error: \" + error });\r\n+        return res.status(400).json( { error: \"Server error: \" + error });\r\n     }\r\n \r\n }\r\n \r\n"
                },
                {
                    "date": 1720606361234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,9 +208,9 @@\n         });\r\n \r\n     } catch (error) {\r\n         console.log(error)\r\n-        return res.status(400).json( { error: \"Server error: \" + error });\r\n+        return res.status(401).json( { error: \"Token error: \" + error });\r\n     }\r\n \r\n }\r\n \r\n"
                },
                {
                    "date": 1720608646056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,247 @@\n+import bcryptjs from 'bcryptjs';\r\n+import pool from \"../db/connexion.js\";\r\n+import { generateAccessToken, generateRefreshToken, hashPassword } from '../utils/jwtGenerator.js';\r\n+import { createUser, getUser } from '../models/users.js';\r\n+\r\n+export const signup = async (req, res) => {\r\n+    try {\r\n+        // Prend les information du clients side\r\n+\r\n+        const {\r\n+            firstname,\r\n+            lastname,\r\n+            usercin,\r\n+            companynumber,\r\n+            phone,\r\n+            adress,\r\n+            email,\r\n+            bio,\r\n+            profileimage,\r\n+            accountid,\r\n+            password,\r\n+            confirmPassword\r\n+        } = await req.body;\r\n+\r\n+\r\n+        const profile = \"X.jpg\";\r\n+\r\n+        var data = [];\r\n+\r\n+        // Verifie si les champs sont vide\r\n+        if (!firstname || !password || !confirmPassword || !phone || !adress || !accountid) {\r\n+            return res.status(400).json({ error: \"Completer tous les champs s'il vous plait\" });\r\n+        }\r\n+\r\n+        if (accountid === 2 || accountid === 3) {\r\n+            if (!usercin) {\r\n+                return res.status(400).json({ error: \"Completer tous les champs Obligatoire s'il vous plait (CIN)\" });\r\n+            }\r\n+\r\n+            data = [\r\n+                firstname,\r\n+                lastname,\r\n+                usercin,\r\n+                phone,\r\n+                adress,\r\n+                email,\r\n+                bio,\r\n+                profile,\r\n+                accountid\r\n+            ];\r\n+\r\n+        } else if (accountid === 1) {\r\n+            if (!companynumber || !email) {\r\n+                return res.status(400).json({ error: \"Completer tous les champs s'il vous plait (companyNumber / email)\" });\r\n+            }\r\n+\r\n+            data = [\r\n+                firstname,\r\n+                companynumber,\r\n+                phone,\r\n+                adress,\r\n+                email,\r\n+                bio,\r\n+                profile,\r\n+                accountid\r\n+            ];\r\n+        }\r\n+\r\n+        // Verifie si le mots de passe correspond a celui du confirmation\r\n+        if (password != confirmPassword) {\r\n+            return res.status(400).json({ error: \"Mots de passe ne correspond pas\" });\r\n+        }\r\n+\r\n+        // Verifier si l'utilisateur existe deja dans la base de donnees\r\n+        const user = await getUser(email, usercin, companynumber, phone);\r\n+\r\n+        \r\n+        if (user) {\r\n+            return res.status(400).json({ error: \"L'utilisateur existe Dejas\" });\r\n+        }\r\n+\r\n+        // Crypter le mots de passe\r\n+        const hashedPassword = await hashPassword(password);\r\n+\r\n+\r\n+        data.push(hashedPassword);\r\n+\r\n+\r\n+        const createUsers = await createUser(data, accountid);\r\n+\r\n+        if (createUsers) {\r\n+            // generer un token\r\n+\r\n+            const token = generateAccessToken(createUsers, res);\r\n+            const refToken = await generateRefreshToken(createUsers);\r\n+\r\n+\r\n+            return res.json({ token, refToken });\r\n+\r\n+        } else {\r\n+            return res.status(400).json({ error: \"Donnee incoherents\" });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+        console.log(\"Erreur au niveau du signupController: \", error.message)\r\n+        return res.status(500).send(\"Server error: \" + error.message);\r\n+    }\r\n+};\r\n+\r\n+\r\n+\r\n+export const setImageProfile = async (req, res) => {\r\n+    try{\r\n+\r\n+\r\n+        const id = req.user.userid;\r\n+\r\n+\r\n+        console.log(id);\r\n+\r\n+        if(!req.file){\r\n+            return res.status(400).json({ error: \"Aucun fichier sélectionné\" });\r\n+        }\r\n+\r\n+        const profileImage = req.file.filename;\r\n+\r\n+        const user = await pool.query(\"UPDATE users SET profileimage = $1 WHERE userid = $2 RETURNING *\", [profileImage, id]);\r\n+\r\n+        if(user.rows[0]){\r\n+            return res.status(200).json({ user: user.rows[0] });\r\n+        }else{\r\n+            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n+        }\r\n+\r\n+\r\n+    }catch(error){\r\n+        console.log(error);\r\n+        return res.status(500).send(\"Server error: \" + error);\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+export const login = async (req, res) => {\r\n+    try {\r\n+\r\n+        // prend les information sur le client\r\n+        const { email, password } = req.body;\r\n+\r\n+        // Verifier si l'email/telephone existe et que le password correspond\r\n+        const userExist = await pool.query(\"SELECT * FROM users WHERE email = $1 or phone = $2\", [email, email]);\r\n+\r\n+        if (!userExist.rows[0]) {// utilisateur n'existe pas\r\n+            return res.status(500).json({ error: \"L'utilisateur n'existe pas\" });\r\n+        }\r\n+\r\n+        const users = userExist.rows[0];\r\n+\r\n+        const isCorrectPassword = await bcryptjs.compare(password, users.password);\r\n+\r\n+        if (!isCorrectPassword) {\r\n+            return res.status(500).json({ error: \"Mots de passe incorrect\" });\r\n+        }\r\n+\r\n+        const accessToken = generateAccessToken(users, res);\r\n+        const refToken = await generateRefreshToken(users);\r\n+\r\n+        res.cookie('refreshToken', refToken, {\r\n+            httpOnly: true,\r\n+            secure: true,\r\n+            sameSite: 'Strict',\r\n+            maxAge: 7 * 24 * 60 * 60 * 1000 // 7 jours\r\n+        });\r\n+\r\n+        return res.json({ accessToken, refToken });\r\n+\r\n+    } catch (error) {\r\n+        console.log(error)\r\n+        return res.status(500).json({error: \"Server error: \" + error.message });\r\n+    }\r\n+};\r\n+\r\n+export const getMe = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const user = req.user;\r\n+\r\n+        if (!user) {\r\n+            return res.status(500).json({ error: \"L'utilisateur existe pas\" });\r\n+        }\r\n+\r\n+        console.log(user)\r\n+\r\n+        let fullname = \"\";\r\n+\r\n+        if (!user.lastname) {\r\n+            fullname = user.firstname;\r\n+        } else {\r\n+            fullname = user.firstname + \" \" + user.lastname;\r\n+        }\r\n+\r\n+        return res.status(200).json({\r\n+            id: user.userid,\r\n+            fullName: fullname,\r\n+            accounttype: user.accounttype,\r\n+            profile: user.profileimage\r\n+        });\r\n+\r\n+    } catch (error) {\r\n+        console.log(error)\r\n+        return res.status(401).json( { error: \"Token error: \" + error });\r\n+    }\r\n+\r\n+}\r\n+\r\n+\r\n+export const refreshAccessToken = async (req, res) => {\r\n+    const refreshToken = req.body.refToken;\r\n+\r\n+    if (refreshToken == null) return res.status(401).json({auth: false, error: \"Aucun token fourni\"});\r\n+\r\n+    try {\r\n+        // Vérifier si le refresh token existe en base de données\r\n+        const storedToken = await pool.query('SELECT * FROM refresh_tokens WHERE token = $1', [refreshToken]);\r\n+        const tokenRecord = storedToken.rows[0];\r\n+\r\n+        if (!tokenRecord) return res.Status(403).json({ auth: false, error: \"Token invalide\" }); // Token invalide\r\n+\r\n+        if (tokenRecord.expires_at < Date.now()) {\r\n+            try {\r\n+                const deleteRefreshToken = await pool.query(\"DELETE FROM refresh_tokens WHERE token = $1\", [refreshToken]);\r\n+                return res.status(403).json({ auth: false, error: \"Token expiré\" });\r\n+\r\n+            } catch (error) {\r\n+                return res.send('Erreur lors de la mise a jouur du refresh token' + error );\r\n+            }\r\n+        }\r\n+\r\n+        // Générer un nouvel access token\r\n+        const accessToken = generateAccessToken(tokenRecord);\r\n+        return res.status(200).json({ auth: true, accessToken });\r\n+    } catch (error) {\r\n+        console.error('Erreur lors de la vérification du refresh token :', error.message);\r\n+        return res.status(500).json({ message: 'Erreur lors de la vérification du refresh token' });\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1720608661171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -235,261 +235,12 @@\n             } catch (error) {\r\n                 return res.send('Erreur lors de la mise a jouur du refresh token' + error );\r\n             }\r\n         }\r\n-\r\n         // Générer un nouvel access token\r\n         const accessToken = generateAccessToken(tokenRecord);\r\n         return res.status(200).json({ auth: true, accessToken });\r\n     } catch (error) {\r\n         console.error('Erreur lors de la vérification du refresh token :', error.message);\r\n         return res.status(500).json({ message: 'Erreur lors de la vérification du refresh token' });\r\n     }\r\n }\r\n-import bcryptjs from 'bcryptjs';\r\n-import pool from \"../db/connexion.js\";\r\n-import { generateAccessToken, generateRefreshToken, hashPassword } from '../utils/jwtGenerator.js';\r\n-import { createUser, getUser } from '../models/users.js';\r\n-\r\n-export const signup = async (req, res) => {\r\n-    try {\r\n-        // Prend les information du clients side\r\n-\r\n-        const {\r\n-            firstname,\r\n-            lastname,\r\n-            usercin,\r\n-            companynumber,\r\n-            phone,\r\n-            adress,\r\n-            email,\r\n-            bio,\r\n-            profileimage,\r\n-            accountid,\r\n-            password,\r\n-            confirmPassword\r\n-        } = await req.body;\r\n-\r\n-\r\n-        const profile = \"X.jpg\";\r\n-\r\n-        var data = [];\r\n-\r\n-        // Verifie si les champs sont vide\r\n-        if (!firstname || !password || !confirmPassword || !phone || !adress || !accountid) {\r\n-            return res.status(400).json({ error: \"Completer tous les champs s'il vous plait\" });\r\n-        }\r\n-\r\n-        if (accountid === 2 || accountid === 3) {\r\n-            if (!usercin) {\r\n-                return res.status(400).json({ error: \"Completer tous les champs Obligatoire s'il vous plait (CIN)\" });\r\n-            }\r\n-\r\n-            data = [\r\n-                firstname,\r\n-                lastname,\r\n-                usercin,\r\n-                phone,\r\n-                adress,\r\n-                email,\r\n-                bio,\r\n-                profile,\r\n-                accountid\r\n-            ];\r\n-\r\n-        } else if (accountid === 1) {\r\n-            if (!companynumber || !email) {\r\n-                return res.status(400).json({ error: \"Completer tous les champs s'il vous plait (companyNumber / email)\" });\r\n-            }\r\n-\r\n-            data = [\r\n-                firstname,\r\n-                companynumber,\r\n-                phone,\r\n-                adress,\r\n-                email,\r\n-                bio,\r\n-                profile,\r\n-                accountid\r\n-            ];\r\n-        }\r\n-\r\n-        // Verifie si le mots de passe correspond a celui du confirmation\r\n-        if (password != confirmPassword) {\r\n-            return res.status(400).json({ error: \"Mots de passe ne correspond pas\" });\r\n-        }\r\n-\r\n-        // Verifier si l'utilisateur existe deja dans la base de donnees\r\n-        const user = await getUser(email, usercin, companynumber, phone);\r\n-\r\n-        \r\n-        if (user) {\r\n-            return res.status(400).json({ error: \"L'utilisateur existe Dejas\" });\r\n-        }\r\n-\r\n-        // Crypter le mots de passe\r\n-        const hashedPassword = await hashPassword(password);\r\n-\r\n-\r\n-        data.push(hashedPassword);\r\n-\r\n-\r\n-        const createUsers = await createUser(data, accountid);\r\n-\r\n-        if (createUsers) {\r\n-            // generer un token\r\n-\r\n-            const token = generateAccessToken(createUsers, res);\r\n-            const refToken = await generateRefreshToken(createUsers);\r\n-\r\n-\r\n-            return res.json({ token, refToken });\r\n-\r\n-        } else {\r\n-            return res.status(400).json({ error: \"Donnee incoherents\" });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-        console.log(\"Erreur au niveau du signupController: \", error.message)\r\n-        return res.status(500).send(\"Server error: \" + error.message);\r\n-    }\r\n-};\r\n-\r\n-\r\n-\r\n-export const setImageProfile = async (req, res) => {\r\n-    try{\r\n-\r\n-\r\n-        const id = req.user.userid;\r\n-\r\n-\r\n-        console.log(id);\r\n-\r\n-        if(!req.file){\r\n-            return res.status(400).json({ error: \"Aucun fichier sélectionné\" });\r\n-        }\r\n-\r\n-        const profileImage = req.file.filename;\r\n-\r\n-        const user = await pool.query(\"UPDATE users SET profileimage = $1 WHERE userid = $2 RETURNING *\", [profileImage, id]);\r\n-\r\n-        if(user.rows[0]){\r\n-            return res.status(200).json({ user: user.rows[0] });\r\n-        }else{\r\n-            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n-        }\r\n-\r\n-\r\n-    }catch(error){\r\n-        console.log(error);\r\n-        return res.status(500).send(\"Server error: \" + error);\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-export const login = async (req, res) => {\r\n-    try {\r\n-\r\n-        // prend les information sur le client\r\n-        const { email, password } = req.body;\r\n-\r\n-        // Verifier si l'email/telephone existe et que le password correspond\r\n-        const userExist = await pool.query(\"SELECT * FROM users WHERE email = $1 or phone = $2\", [email, email]);\r\n-\r\n-        if (!userExist.rows[0]) {// utilisateur n'existe pas\r\n-            return res.status(500).json({ error: \"L'utilisateur n'existe pas\" });\r\n-        }\r\n-\r\n-        const users = userExist.rows[0];\r\n-\r\n-        const isCorrectPassword = await bcryptjs.compare(password, users.password);\r\n-\r\n-        if (!isCorrectPassword) {\r\n-            return res.status(500).json({ error: \"Mots de passe incorrect\" });\r\n-        }\r\n-\r\n-        const accessToken = generateAccessToken(users, res);\r\n-        const refToken = await generateRefreshToken(users);\r\n-\r\n-        res.cookie('refreshToken', refToken, {\r\n-            httpOnly: true,\r\n-            secure: true,\r\n-            sameSite: 'Strict',\r\n-            maxAge: 7 * 24 * 60 * 60 * 1000 // 7 jours\r\n-        });\r\n-\r\n-        return res.json({ accessToken, refToken });\r\n-\r\n-    } catch (error) {\r\n-        console.log(error)\r\n-        return res.status(500).json({error: \"Server error: \" + error.message });\r\n-    }\r\n-};\r\n-\r\n-export const getMe = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const user = req.user;\r\n-\r\n-        if (!user) {\r\n-            return res.status(500).json({ error: \"L'utilisateur existe pas\" });\r\n-        }\r\n-\r\n-        console.log(user)\r\n-\r\n-        let fullname = \"\";\r\n-\r\n-        if (!user.lastname) {\r\n-            fullname = user.firstname;\r\n-        } else {\r\n-            fullname = user.firstname + \" \" + user.lastname;\r\n-        }\r\n-\r\n-        return res.status(200).json({\r\n-            id: user.userid,\r\n-            fullName: fullname,\r\n-            accounttype: user.accounttype,\r\n-            profile: user.profileimage\r\n-        });\r\n-\r\n-    } catch (error) {\r\n-        console.log(error)\r\n-        return res.status(401).json( { error: \"Token error: \" + error });\r\n-    }\r\n-\r\n-}\r\n-\r\n-\r\n-export const refreshAccessToken = async (req, res) => {\r\n-    const refreshToken = req.body.refToken;\r\n-\r\n-    if (refreshToken == null) return res.status(401).json({auth: false, error: \"Aucun token fourni\"});\r\n-\r\n-    try {\r\n-        // Vérifier si le refresh token existe en base de données\r\n-        const storedToken = await pool.query('SELECT * FROM refresh_tokens WHERE token = $1', [refreshToken]);\r\n-        const tokenRecord = storedToken.rows[0];\r\n-\r\n-        if (!tokenRecord) return res.Status(403).json({ auth: false, error: \"Token invalide\" }); // Token invalide\r\n-\r\n-        if (tokenRecord.expires_at < Date.now()) {\r\n-            try {\r\n-                const deleteRefreshToken = await pool.query(\"DELETE FROM refresh_tokens WHERE token = $1\", [refreshToken]);\r\n-                return res.status(403).json({ auth: false, error: \"Token expiré\" });\r\n-\r\n-            } catch (error) {\r\n-                console.error('Erreur lors de la mise a jour du refresh token :', error.message);\r\n-                return res.send('Erreur lors de la mise a jouur du refresh token' + error );\r\n-            }\r\n-        }\r\n-\r\n-        // Générer un nouvel access token\r\n-        const accessToken = generateAccessToken(tokenRecord);\r\n-        return res.status(200).json({ auth: true, accessToken });\r\n-    } catch (error) {\r\n-        console.error('Erreur lors de la vérification du refresh token :', error.message);\r\n-        return res.status(500).json({ message: 'Erreur lors de la vérification du refresh token' });\r\n-    }\r\n-}\r\n"
                }
            ],
            "date": 1720428093504,
            "name": "Commit-0",
            "content": "import bcryptjs from 'bcryptjs';\r\nimport pool from \"../db/connexion.js\";\r\nimport generateToken from '../utils/jwtGenerator.js';\r\n\r\nexport const signup = async (req, res) => {\r\n    try {\r\n        // Prend les information du clients side\r\n        const { \r\n            firstname, \r\n            lastname, \r\n            usercin, \r\n            companynumber, \r\n            phone, \r\n            adress, \r\n            email, \r\n            bio, \r\n            profileimage, \r\n            accountid, \r\n            password, \r\n            confirmPassword \r\n        } = req.body;\r\n\r\n        const profile = \"X.jpg\";\r\n\r\n        var data = [];\r\n\r\n        var query = \"\";\r\n\r\n        // Verifie si les champs sont vide\r\n        if (!firstname || !password || !confirmPassword || !phone || !adress || !accountid) {\r\n            return res.status(400).json({ error: \"Completer tous les champs s'il vous plait\" });\r\n        }\r\n\r\n        if (accountid == 1 || accountid == 3) {\r\n            if (!usercin) {\r\n                return res.status(400).json({ error: \"Completer tous les champs s'il vous plait\" });\r\n            }\r\n\r\n            query = \"INSERT INTO users (firstname,lastname,usercin,phone,address,email,bio,profileimage,accountid,password) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING *\";\r\n\r\n            data = [\r\n                firstname,\r\n                lastname,\r\n                usercin,\r\n                phone,\r\n                adress,\r\n                email,\r\n                bio,\r\n                profile,\r\n                accountid\r\n            ];\r\n\r\n        } else if (accountid == 2) {\r\n            if (!companynumber || !email) {\r\n                return res.status(400).json({ error: \"Completer tous les champs s'il vous plait\" });\r\n            }\r\n\r\n            query = \"INSERT INTO users (firstname,companynumber,phone,address,email,bio,profileimage,accountid,password) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING *\";\r\n\r\n            data = [\r\n                firstname,\r\n                companynumber,\r\n                phone,\r\n                adress,\r\n                email,\r\n                bio,\r\n                profile,\r\n                accountid\r\n            ];\r\n        }\r\n\r\n        // Verifie si le mots de passe correspond a celui du confirmation\r\n        if (password != confirmPassword) {\r\n            return res.status(400).json({ error: \"Mots de passe ne correspond pas\" });\r\n        }\r\n\r\n        // Verifier si l'utilisateur existe deja dans la base de donnees\r\n        const user = await pool.query(\"SELECT * FROM users WHERE email = $1 or phone = $2\", [email, phone]);\r\n        if (user.rowCount > 0) {\r\n            return res.status(400).json({ error: \"L'utilisateur existe Dejas\" });\r\n        }\r\n\r\n        // Crypter le mots de passe\r\n        const salt = await bcryptjs.genSalt(10);\r\n        const hashedPassword = await bcryptjs.hash(password, salt);\r\n\r\n\r\n        data.push(hashedPassword);\r\n\r\n        const createUsers = await pool.query(query, data);\r\n\r\n        if (createUsers) {\r\n            // generer un token\r\n            const newUsers = createUsers.rows[0];\r\n\r\n            const token = generateToken(newUsers.userid, res);\r\n\r\n\r\n            return res.json({ token });\r\n\r\n        } else {\r\n            return res.status(400).json({ error: \"Donnee incoherents\" });\r\n        }\r\n\r\n    } catch (error) {\r\n        console.log(\"Erreur au niveau du signupController: \", error.message)\r\n        return res.status(500).send(\"Server error: \" + error.message);\r\n    }\r\n};\r\n\r\nexport const login = async (req, res) => {\r\n    try {\r\n\r\n        // prend les information sur le client\r\n        const { email, password } = req.body;\r\n\r\n        // Verifier si l'email/telephone existe et que le password correspond\r\n        const userExist = await pool.query(\"SELECT * from users WHERE email = $1 or phone = $2\", [email, email]);\r\n\r\n        if (!userExist.rows[0]) {// utilisateur n'existe pas\r\n            return res.status(500).json({ error: \"L'utilisateur n'existe pas\" });\r\n        }\r\n\r\n        const users = userExist.rows[0];\r\n\r\n        const isCorrectPassword = await bcryptjs.compare(password,users.password);\r\n\r\n        if (!isCorrectPassword) {\r\n            return res.status(500).json({ error: \"Mots de passe incorrect\" });\r\n        }\r\n\r\n        const token = generateToken(users.userid, res);\r\n\r\n        return res.json({ token });\r\n\r\n    } catch (error) {\r\n        console.log(error)\r\n        return res.status(500).send(\"Server error: \" + error.message);\r\n    }\r\n};\r\n\r\nexport const getMe = async (req, res) => {\r\n\r\n    try {\r\n\r\n        const user = req.user;\r\n\r\n        if (!user) {\r\n            return res.status(500).json({ error: \"L'utilisateur existe pas\" });\r\n        }\r\n\r\n        console.log(user)\r\n\r\n        let fullname = \"\";\r\n\r\n        if(!user.lastname){\r\n            fullname = user.firstname;\r\n        }else{\r\n            fullname = user.firstname + \" \" + user.lastname;\r\n        }\r\n\r\n        return res.status(200).json({\r\n            id: user.userid,\r\n            fullName: fullname,\r\n            accounttype: user.accounttype\r\n        });\r\n\r\n    } catch (error) {\r\n        console.log(error)\r\n        return res.status(500).send(\"Server error: \" + error);\r\n    }\r\n\r\n}\r\n"
        }
    ]
}