{
    "sourceFile": "backend/src/controllers/offreController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 30,
            "patches": [
                {
                    "date": 1722241186855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722241194252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,321 @@\n+import {\r\n+    createOffer,\r\n+    getAllOfferById,\r\n+    deleteOfferById,\r\n+    updateOffer,\r\n+    setunavailableOffer,\r\n+    allAvailableOffer,\r\n+    allUnavailableOffer,\r\n+    ongoingOffer,\r\n+    expiredOffer,\r\n+    latestOffers,\r\n+    getHomepageOffers,\r\n+    getOfferByOfferId\r\n+} from '../models/offreModel.js';\r\n+\r\n+// handle the offer publication and register the offer for a user in the profile page\r\n+\r\n+export const newPublication = async (req, res) => {\r\n+    try {\r\n+\r\n+        const userId = req.user.userid\r\n+\r\n+        const {\r\n+            title,\r\n+            description,\r\n+            depart,\r\n+            destination,\r\n+            capacity,\r\n+            scheduledDate\r\n+        } = req.body;\r\n+\r\n+        // return res.json(req.file)\r\n+\r\n+        // return res.json({body: req.body });\r\n+\r\n+        var data = [];\r\n+\r\n+        if (req.file) {\r\n+            const file = req.file.filename;\r\n+\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                file,\r\n+                userId\r\n+            ]\r\n+        } else {\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                userId\r\n+            ]\r\n+        }\r\n+\r\n+        // return res.json(data);\r\n+\r\n+        // create a new offer\r\n+        const offer = await createOffer(data);\r\n+\r\n+        if (offer) {\r\n+            return res.status(200).json({ user: offer });\r\n+        } else {\r\n+            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+\r\n+// home page function to show offer\r\n+\r\n+export const getHomePageOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+\r\n+        const result = await getHomepageOffers(userId);\r\n+\r\n+        if(!result[0]) return res.status(200).json({offers: {}})\r\n+\r\n+        return res.status(200).json({offers: result});\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// suggestion offer, show the 10 latest offers available\r\n+\r\n+export const suggestionOffers = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+        const result = await latestOffers(userId);\r\n+\r\n+        if (!result) return result.json({ error: \"No offer availaible\" })\r\n+\r\n+        return res.status(200).json({ suggestions: result });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all offer for an user in his account page\r\n+\r\n+export const allOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userid;\r\n+    try {\r\n+\r\n+        const allOffers = await getAllOfferById(userId);\r\n+\r\n+        return res.status(200).json(allOffers);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+\r\n+}\r\n+\r\n+// delete offer by offerId\r\n+\r\n+export const deleteOfferForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await deleteOfferById(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+//update an offer\r\n+\r\n+export const updateOfferForUser = async (req, res) => {\r\n+    try {\r\n+\r\n+        const offerId = req.params.offerId;\r\n+        // use a key table for obtaining the data in the request\r\n+\r\n+        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n+        const formData = {};\r\n+        keys.map(key => {\r\n+            let value = req.body[key];\r\n+\r\n+            // verify if the imgUrl is not empty\r\n+            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n+\r\n+            formData[key] = value;\r\n+        });\r\n+\r\n+        formData.offerId = offerId;\r\n+        // create a table with this object\r\n+        const data = Object.values(formData);\r\n+        // create a new offer\r\n+        const result = await updateOffer(data);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+\r\n+\r\n+    } catch (error) {\r\n+\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+//set unavailable the user offer\r\n+\r\n+export const setUnavailableOfferForUser = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await setunavailableOffer(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all available offers for an user in his account page (filter function)\r\n+\r\n+export const availableOfferForUser = async (req, res) => {\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allAvailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all unavailable offers (filter function in account page)\r\n+\r\n+export const unavailableOfferForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allUnavailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// filter function to get ongoings offer for the user\r\n+\r\n+export const ongoingOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await ongoingOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// expires offer for the user to show in his account page and for the filter in this page\r\n+export const expiredOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await expiredOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// function to handle offer page after click on the notification\r\n+\r\n+export const handleOfferAfterNotifClick = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+        const result = await getOfferByOfferId(offerId);\r\n+\r\n+        return res.status(200).json(result);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+// export default {\r\n+//     newPublication,\r\n+//     getHomePageOffersForUser,\r\n+//     suggestionOffers,\r\n+//     allOffersForUser,\r\n+//     deleteOfferForUser,\r\n+//     updateOfferForUser,\r\n+//     setUnavailableOfferForUser,\r\n+//     availableOfferForUser,\r\n+//     unavailableOfferForUser,\r\n+//     ongoingOffersForUser,\r\n+//     expiredOffersForUser,\r\n+\r\n+// };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722241224152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,321 @@\n+import {\r\n+    createOffer,\r\n+    getAllOfferById,\r\n+    deleteOfferById,\r\n+    updateOffer,\r\n+    setunavailableOffer,\r\n+    allAvailableOffer,\r\n+    allUnavailableOffer,\r\n+    ongoingOffer,\r\n+    expiredOffer,\r\n+    latestOffers,\r\n+    getHomepageOffers,\r\n+    getOfferByOfferId\r\n+} from '../models/offreModel.js';\r\n+\r\n+// handle the offer publication and register the offer for a user in the profile page\r\n+\r\n+export const newPublication = async (req, res) => {\r\n+    try {\r\n+\r\n+        const userId = req.user.userid\r\n+\r\n+        const {\r\n+            title,\r\n+            description,\r\n+            depart,\r\n+            destination,\r\n+            capacity,\r\n+            scheduledDate\r\n+        } = req.body;\r\n+\r\n+        // return res.json(req.file)\r\n+\r\n+        // return res.json({body: req.body });\r\n+\r\n+        var data = [];\r\n+\r\n+        if (req.file) {\r\n+            const file = req.file.filename;\r\n+\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                file,\r\n+                userId\r\n+            ]\r\n+        } else {\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                userId\r\n+            ]\r\n+        }\r\n+\r\n+        // return res.json(data);\r\n+\r\n+        // create a new offer\r\n+        const offer = await createOffer(data);\r\n+\r\n+        if (offer) {\r\n+            return res.status(200).json({ user: offer });\r\n+        } else {\r\n+            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+\r\n+// home page function to show offer\r\n+\r\n+export const getHomePageOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+\r\n+        const result = await getHomepageOffers(userId);\r\n+\r\n+        if(!result[0]) return res.status(200).json({offers: {}})\r\n+\r\n+        return res.status(200).json({offers: result});\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// suggestion offer, show the 10 latest offers available\r\n+\r\n+export const suggestionOffers = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+        const result = await latestOffers(userId);\r\n+\r\n+        if (!result) return result.json({ error: \"No offer availaible\" })\r\n+\r\n+        return res.status(200).json({ suggestions: result });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all offer for an user in his account page\r\n+\r\n+export const allOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userid;\r\n+    try {\r\n+\r\n+        const allOffers = await getAllOfferById(userId);\r\n+\r\n+        return res.status(200).json(allOffers);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+\r\n+}\r\n+\r\n+// delete offer by offerId\r\n+\r\n+export const deleteOfferForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await deleteOfferById(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+//update an offer\r\n+\r\n+export const updateOfferForUser = async (req, res) => {\r\n+    try {\r\n+\r\n+        const offerId = req.params.offerId;\r\n+        // use a key table for obtaining the data in the request\r\n+\r\n+        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n+        const formData = {};\r\n+        keys.map(key => {\r\n+            let value = req.body[key];\r\n+\r\n+            // verify if the imgUrl is not empty\r\n+            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n+\r\n+            formData[key] = value;\r\n+        });\r\n+\r\n+        formData.offerId = offerId;\r\n+        // create a table with this object\r\n+        const data = Object.values(formData);\r\n+        // create a new offer\r\n+        const result = await updateOffer(data);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+\r\n+\r\n+    } catch (error) {\r\n+\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+//set unavailable the user offer\r\n+\r\n+export const setUnavailableOfferForUser = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await setunavailableOffer(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all available offers for an user in his account page (filter function)\r\n+\r\n+export const availableOfferForUser = async (req, res) => {\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allAvailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all unavailable offers (filter function in account page)\r\n+\r\n+export const unavailableOfferForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allUnavailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// filter function to get ongoings offer for the user\r\n+\r\n+export const ongoingOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await ongoingOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// expires offer for the user to show in his account page and for the filter in this page\r\n+export const expiredOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await expiredOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// function to handle offer page after click on the notification\r\n+\r\n+export const handleOfferAfterNotifClick = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+        const result = await getOfferByOfferId(offerId);\r\n+\r\n+        return res.status(200).json(result);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+// export default {\r\n+//     newPublication,\r\n+//     getHomePageOffersForUser,\r\n+//     suggestionOffers,\r\n+//     allOffersForUser,\r\n+//     deleteOfferForUser,\r\n+//     updateOfferForUser,\r\n+//     setUnavailableOfferForUser,\r\n+//     availableOfferForUser,\r\n+//     unavailableOfferForUser,\r\n+//     ongoingOffersForUser,\r\n+//     expiredOffersForUser,\r\n+\r\n+// };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722242076693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,329 +128,10 @@\n     try {\r\n \r\n         const allOffers = await getAllOfferById(userId);\r\n \r\n-        return res.status(200).json(allOffers);\r\n+        \r\n \r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-\r\n-}\r\n-\r\n-// delete offer by offerId\r\n-\r\n-export const deleteOfferForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await deleteOfferById(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-//update an offer\r\n-\r\n-export const updateOfferForUser = async (req, res) => {\r\n-    try {\r\n-\r\n-        const offerId = req.params.offerId;\r\n-        // use a key table for obtaining the data in the request\r\n-\r\n-        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n-        const formData = {};\r\n-        keys.map(key => {\r\n-            let value = req.body[key];\r\n-\r\n-            // verify if the imgUrl is not empty\r\n-            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n-\r\n-            formData[key] = value;\r\n-        });\r\n-\r\n-        formData.offerId = offerId;\r\n-        // create a table with this object\r\n-        const data = Object.values(formData);\r\n-        // create a new offer\r\n-        const result = await updateOffer(data);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-\r\n-\r\n-    } catch (error) {\r\n-\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-//set unavailable the user offer\r\n-\r\n-export const setUnavailableOfferForUser = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await setunavailableOffer(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all available offers for an user in his account page (filter function)\r\n-\r\n-export const availableOfferForUser = async (req, res) => {\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allAvailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all unavailable offers (filter function in account page)\r\n-\r\n-export const unavailableOfferForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allUnavailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// filter function to get ongoings offer for the user\r\n-\r\n-export const ongoingOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await ongoingOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// expires offer for the user to show in his account page and for the filter in this page\r\n-export const expiredOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await expiredOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// function to handle offer page after click on the notification\r\n-\r\n-export const handleOfferAfterNotifClick = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-        const result = await getOfferByOfferId(offerId);\r\n-\r\n-        return res.status(200).json(result);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-// export default {\r\n-//     newPublication,\r\n-//     getHomePageOffersForUser,\r\n-//     suggestionOffers,\r\n-//     allOffersForUser,\r\n-//     deleteOfferForUser,\r\n-//     updateOfferForUser,\r\n-//     setUnavailableOfferForUser,\r\n-//     availableOfferForUser,\r\n-//     unavailableOfferForUser,\r\n-//     ongoingOffersForUser,\r\n-//     expiredOffersForUser,\r\n-\r\n-// };\n-import {\r\n-    createOffer,\r\n-    getAllOfferById,\r\n-    deleteOfferById,\r\n-    updateOffer,\r\n-    setunavailableOffer,\r\n-    allAvailableOffer,\r\n-    allUnavailableOffer,\r\n-    ongoingOffer,\r\n-    expiredOffer,\r\n-    latestOffers,\r\n-    getHomepageOffers,\r\n-    getOfferByOfferId\r\n-} from '../models/offreModel.js';\r\n-\r\n-// handle the offer publication and register the offer for a user in the profile page\r\n-\r\n-export const newPublication = async (req, res) => {\r\n-    try {\r\n-\r\n-        const userId = req.user.userid\r\n-\r\n-        const {\r\n-            title,\r\n-            description,\r\n-            depart,\r\n-            destination,\r\n-            capacity,\r\n-            scheduledDate\r\n-        } = req.body;\r\n-\r\n-        // return res.json(req.file)\r\n-\r\n-        // return res.json({body: req.body });\r\n-\r\n-        var data = [];\r\n-\r\n-        if (req.file) {\r\n-            const file = req.file.filename;\r\n-\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                file,\r\n-                userId\r\n-            ]\r\n-        } else {\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                userId\r\n-            ]\r\n-        }\r\n-\r\n-        // return res.json(data);\r\n-\r\n-        // create a new offer\r\n-        const offer = await createOffer(data);\r\n-\r\n-        if (offer) {\r\n-            return res.status(200).json({ user: offer });\r\n-        } else {\r\n-            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-\r\n-// home page function to show offer\r\n-\r\n-export const getHomePageOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-\r\n-        const result = await getHomepageOffers(userId);\r\n-\r\n-        if(!result[0]) return res.status(200).json({offers: {}})\r\n-\r\n-        return res.status(200).json({offers: result});\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// suggestion offer, show the 10 latest offers available\r\n-\r\n-export const suggestionOffers = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-        const result = await latestOffers(userId);\r\n-\r\n-        if (!result) return result.json({ error: \"No offer availaible\" })\r\n-\r\n-        return res.status(200).json({ suggestions: result });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all offer for an user in his account page\r\n-\r\n-export const allOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userid;\r\n-    try {\r\n-\r\n-        const allOffers = await getAllOfferById(userId);\r\n-\r\n         return res.status(200).json(allOffers);\r\n \r\n     } catch (error) {\r\n         console.error(error);\r\n@@ -638,326 +319,5 @@\n //     unavailableOfferForUser,\r\n //     ongoingOffersForUser,\r\n //     expiredOffersForUser,\r\n \r\n-// };\n-import {\r\n-    createOffer,\r\n-    getAllOfferById,\r\n-    deleteOfferById,\r\n-    updateOffer,\r\n-    setunavailableOffer,\r\n-    allAvailableOffer,\r\n-    allUnavailableOffer,\r\n-    ongoingOffer,\r\n-    expiredOffer,\r\n-    latestOffers,\r\n-    getHomepageOffers,\r\n-    getOfferByOfferId\r\n-} from '../models/offreModel.js';\r\n-\r\n-// handle the offer publication and register the offer for a user in the profile page\r\n-\r\n-export const newPublication = async (req, res) => {\r\n-    try {\r\n-\r\n-        const userId = req.user.userid\r\n-\r\n-        const {\r\n-            title,\r\n-            description,\r\n-            depart,\r\n-            destination,\r\n-            capacity,\r\n-            scheduledDate\r\n-        } = req.body;\r\n-\r\n-        // return res.json(req.file)\r\n-\r\n-        // return res.json({body: req.body });\r\n-\r\n-        var data = [];\r\n-\r\n-        if (req.file) {\r\n-            const file = req.file.filename;\r\n-\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                file,\r\n-                userId\r\n-            ]\r\n-        } else {\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                userId\r\n-            ]\r\n-        }\r\n-\r\n-        // return res.json(data);\r\n-\r\n-        // create a new offer\r\n-        const offer = await createOffer(data);\r\n-\r\n-        if (offer) {\r\n-            return res.status(200).json({ user: offer });\r\n-        } else {\r\n-            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-\r\n-// home page function to show offer\r\n-\r\n-export const getHomePageOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-\r\n-        const result = await getHomepageOffers(userId);\r\n-\r\n-        if(!result[0]) return res.status(200).json({offers: {}})\r\n-\r\n-        return res.status(200).json({offers: result});\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// suggestion offer, show the 10 latest offers available\r\n-\r\n-export const suggestionOffers = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-        const result = await latestOffers(userId);\r\n-\r\n-        if (!result) return result.json({ error: \"No offer availaible\" })\r\n-\r\n-        return res.status(200).json({ suggestions: result });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all offer for an user in his account page\r\n-\r\n-export const allOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userid;\r\n-    try {\r\n-\r\n-        const allOffers = await getAllOfferById(userId);\r\n-\r\n-        return res.status(200).json(allOffers);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-\r\n-}\r\n-\r\n-// delete offer by offerId\r\n-\r\n-export const deleteOfferForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await deleteOfferById(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-//update an offer\r\n-\r\n-export const updateOfferForUser = async (req, res) => {\r\n-    try {\r\n-\r\n-        const offerId = req.params.offerId;\r\n-        // use a key table for obtaining the data in the request\r\n-\r\n-        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n-        const formData = {};\r\n-        keys.map(key => {\r\n-            let value = req.body[key];\r\n-\r\n-            // verify if the imgUrl is not empty\r\n-            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n-\r\n-            formData[key] = value;\r\n-        });\r\n-\r\n-        formData.offerId = offerId;\r\n-        // create a table with this object\r\n-        const data = Object.values(formData);\r\n-        // create a new offer\r\n-        const result = await updateOffer(data);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-\r\n-\r\n-    } catch (error) {\r\n-\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-//set unavailable the user offer\r\n-\r\n-export const setUnavailableOfferForUser = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await setunavailableOffer(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all available offers for an user in his account page (filter function)\r\n-\r\n-export const availableOfferForUser = async (req, res) => {\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allAvailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all unavailable offers (filter function in account page)\r\n-\r\n-export const unavailableOfferForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allUnavailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// filter function to get ongoings offer for the user\r\n-\r\n-export const ongoingOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await ongoingOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// expires offer for the user to show in his account page and for the filter in this page\r\n-export const expiredOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await expiredOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// function to handle offer page after click on the notification\r\n-\r\n-export const handleOfferAfterNotifClick = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-        const result = await getOfferByOfferId(offerId);\r\n-\r\n-        return res.status(200).json(result);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-// export default {\r\n-//     newPublication,\r\n-//     getHomePageOffersForUser,\r\n-//     suggestionOffers,\r\n-//     allOffersForUser,\r\n-//     deleteOfferForUser,\r\n-//     updateOfferForUser,\r\n-//     setUnavailableOfferForUser,\r\n-//     availableOfferForUser,\r\n-//     unavailableOfferForUser,\r\n-//     ongoingOffersForUser,\r\n-//     expiredOffersForUser,\r\n-\r\n // };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722242083100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n     try {\r\n \r\n         const allOffers = await getAllOfferById(userId);\r\n \r\n-        \r\n+        if \r\n \r\n         return res.status(200).json(allOffers);\r\n \r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1722242094444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,323 @@\n+import {\r\n+    createOffer,\r\n+    getAllOfferById,\r\n+    deleteOfferById,\r\n+    updateOffer,\r\n+    setunavailableOffer,\r\n+    allAvailableOffer,\r\n+    allUnavailableOffer,\r\n+    ongoingOffer,\r\n+    expiredOffer,\r\n+    latestOffers,\r\n+    getHomepageOffers,\r\n+    getOfferByOfferId\r\n+} from '../models/offreModel.js';\r\n+\r\n+// handle the offer publication and register the offer for a user in the profile page\r\n+\r\n+export const newPublication = async (req, res) => {\r\n+    try {\r\n+\r\n+        const userId = req.user.userid\r\n+\r\n+        const {\r\n+            title,\r\n+            description,\r\n+            depart,\r\n+            destination,\r\n+            capacity,\r\n+            scheduledDate\r\n+        } = req.body;\r\n+\r\n+        // return res.json(req.file)\r\n+\r\n+        // return res.json({body: req.body });\r\n+\r\n+        var data = [];\r\n+\r\n+        if (req.file) {\r\n+            const file = req.file.filename;\r\n+\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                file,\r\n+                userId\r\n+            ]\r\n+        } else {\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                userId\r\n+            ]\r\n+        }\r\n+\r\n+        // return res.json(data);\r\n+\r\n+        // create a new offer\r\n+        const offer = await createOffer(data);\r\n+\r\n+        if (offer) {\r\n+            return res.status(200).json({ user: offer });\r\n+        } else {\r\n+            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+\r\n+// home page function to show offer\r\n+\r\n+export const getHomePageOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+\r\n+        const result = await getHomepageOffers(userId);\r\n+\r\n+        if(!result[0]) return res.status(200).json({offers: {}})\r\n+\r\n+        return res.status(200).json({offers: result});\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// suggestion offer, show the 10 latest offers available\r\n+\r\n+export const suggestionOffers = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+        const result = await latestOffers(userId);\r\n+\r\n+        if (!result) return result.json({ error: \"No offer availaible\" })\r\n+\r\n+        return res.status(200).json({ suggestions: result });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all offer for an user in his account page\r\n+\r\n+export const allOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userid;\r\n+    try {\r\n+\r\n+        const allOffers = await getAllOfferById(userId);\r\n+\r\n+        if(!allOffers.rows[0])\r\n+\r\n+        return res.status(200).json(allOffers);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+\r\n+}\r\n+\r\n+// delete offer by offerId\r\n+\r\n+export const deleteOfferForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await deleteOfferById(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+//update an offer\r\n+\r\n+export const updateOfferForUser = async (req, res) => {\r\n+    try {\r\n+\r\n+        const offerId = req.params.offerId;\r\n+        // use a key table for obtaining the data in the request\r\n+\r\n+        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n+        const formData = {};\r\n+        keys.map(key => {\r\n+            let value = req.body[key];\r\n+\r\n+            // verify if the imgUrl is not empty\r\n+            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n+\r\n+            formData[key] = value;\r\n+        });\r\n+\r\n+        formData.offerId = offerId;\r\n+        // create a table with this object\r\n+        const data = Object.values(formData);\r\n+        // create a new offer\r\n+        const result = await updateOffer(data);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+\r\n+\r\n+    } catch (error) {\r\n+\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+//set unavailable the user offer\r\n+\r\n+export const setUnavailableOfferForUser = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await setunavailableOffer(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all available offers for an user in his account page (filter function)\r\n+\r\n+export const availableOfferForUser = async (req, res) => {\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allAvailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all unavailable offers (filter function in account page)\r\n+\r\n+export const unavailableOfferForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allUnavailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// filter function to get ongoings offer for the user\r\n+\r\n+export const ongoingOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await ongoingOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// expires offer for the user to show in his account page and for the filter in this page\r\n+export const expiredOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await expiredOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// function to handle offer page after click on the notification\r\n+\r\n+export const handleOfferAfterNotifClick = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+        const result = await getOfferByOfferId(offerId);\r\n+\r\n+        return res.status(200).json(result);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+// export default {\r\n+//     newPublication,\r\n+//     getHomePageOffersForUser,\r\n+//     suggestionOffers,\r\n+//     allOffersForUser,\r\n+//     deleteOfferForUser,\r\n+//     updateOfferForUser,\r\n+//     setUnavailableOfferForUser,\r\n+//     availableOfferForUser,\r\n+//     unavailableOfferForUser,\r\n+//     ongoingOffersForUser,\r\n+//     expiredOffersForUser,\r\n+\r\n+// };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722242105184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,323 @@\n+import {\r\n+    createOffer,\r\n+    getAllOfferById,\r\n+    deleteOfferById,\r\n+    updateOffer,\r\n+    setunavailableOffer,\r\n+    allAvailableOffer,\r\n+    allUnavailableOffer,\r\n+    ongoingOffer,\r\n+    expiredOffer,\r\n+    latestOffers,\r\n+    getHomepageOffers,\r\n+    getOfferByOfferId\r\n+} from '../models/offreModel.js';\r\n+\r\n+// handle the offer publication and register the offer for a user in the profile page\r\n+\r\n+export const newPublication = async (req, res) => {\r\n+    try {\r\n+\r\n+        const userId = req.user.userid\r\n+\r\n+        const {\r\n+            title,\r\n+            description,\r\n+            depart,\r\n+            destination,\r\n+            capacity,\r\n+            scheduledDate\r\n+        } = req.body;\r\n+\r\n+        // return res.json(req.file)\r\n+\r\n+        // return res.json({body: req.body });\r\n+\r\n+        var data = [];\r\n+\r\n+        if (req.file) {\r\n+            const file = req.file.filename;\r\n+\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                file,\r\n+                userId\r\n+            ]\r\n+        } else {\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                userId\r\n+            ]\r\n+        }\r\n+\r\n+        // return res.json(data);\r\n+\r\n+        // create a new offer\r\n+        const offer = await createOffer(data);\r\n+\r\n+        if (offer) {\r\n+            return res.status(200).json({ user: offer });\r\n+        } else {\r\n+            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+\r\n+// home page function to show offer\r\n+\r\n+export const getHomePageOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+\r\n+        const result = await getHomepageOffers(userId);\r\n+\r\n+        if(!result[0]) return res.status(200).json({offers: {}})\r\n+\r\n+        return res.status(200).json({offers: result});\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// suggestion offer, show the 10 latest offers available\r\n+\r\n+export const suggestionOffers = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+        const result = await latestOffers(userId);\r\n+\r\n+        if (!result) return result.json({ error: \"No offer availaible\" })\r\n+\r\n+        return res.status(200).json({ suggestions: result });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all offer for an user in his account page\r\n+\r\n+export const allOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userid;\r\n+    try {\r\n+\r\n+        const allOffers = await getAllOfferById(userId);\r\n+\r\n+        if(!allOffers.rows[0]) return res.status(200)\r\n+\r\n+        return res.status(200).json(allOffers);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+\r\n+}\r\n+\r\n+// delete offer by offerId\r\n+\r\n+export const deleteOfferForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await deleteOfferById(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+//update an offer\r\n+\r\n+export const updateOfferForUser = async (req, res) => {\r\n+    try {\r\n+\r\n+        const offerId = req.params.offerId;\r\n+        // use a key table for obtaining the data in the request\r\n+\r\n+        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n+        const formData = {};\r\n+        keys.map(key => {\r\n+            let value = req.body[key];\r\n+\r\n+            // verify if the imgUrl is not empty\r\n+            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n+\r\n+            formData[key] = value;\r\n+        });\r\n+\r\n+        formData.offerId = offerId;\r\n+        // create a table with this object\r\n+        const data = Object.values(formData);\r\n+        // create a new offer\r\n+        const result = await updateOffer(data);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+\r\n+\r\n+    } catch (error) {\r\n+\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+//set unavailable the user offer\r\n+\r\n+export const setUnavailableOfferForUser = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await setunavailableOffer(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all available offers for an user in his account page (filter function)\r\n+\r\n+export const availableOfferForUser = async (req, res) => {\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allAvailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all unavailable offers (filter function in account page)\r\n+\r\n+export const unavailableOfferForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allUnavailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// filter function to get ongoings offer for the user\r\n+\r\n+export const ongoingOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await ongoingOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// expires offer for the user to show in his account page and for the filter in this page\r\n+export const expiredOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await expiredOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// function to handle offer page after click on the notification\r\n+\r\n+export const handleOfferAfterNotifClick = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+        const result = await getOfferByOfferId(offerId);\r\n+\r\n+        return res.status(200).json(result);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+// export default {\r\n+//     newPublication,\r\n+//     getHomePageOffersForUser,\r\n+//     suggestionOffers,\r\n+//     allOffersForUser,\r\n+//     deleteOfferForUser,\r\n+//     updateOfferForUser,\r\n+//     setUnavailableOfferForUser,\r\n+//     availableOfferForUser,\r\n+//     unavailableOfferForUser,\r\n+//     ongoingOffersForUser,\r\n+//     expiredOffersForUser,\r\n+\r\n+// };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722242111368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n     try {\r\n \r\n         const allOffers = await getAllOfferById(userId);\r\n \r\n-        if(!allOffers.rows[0]) return res.status(200)\r\n+        if(!allOffers.rows[0]) return res.status(200).json({all})\r\n \r\n         return res.status(200).json(allOffers);\r\n \r\n     } catch (error) {\r\n@@ -319,651 +319,5 @@\n //     unavailableOfferForUser,\r\n //     ongoingOffersForUser,\r\n //     expiredOffersForUser,\r\n \r\n-// };\n-import {\r\n-    createOffer,\r\n-    getAllOfferById,\r\n-    deleteOfferById,\r\n-    updateOffer,\r\n-    setunavailableOffer,\r\n-    allAvailableOffer,\r\n-    allUnavailableOffer,\r\n-    ongoingOffer,\r\n-    expiredOffer,\r\n-    latestOffers,\r\n-    getHomepageOffers,\r\n-    getOfferByOfferId\r\n-} from '../models/offreModel.js';\r\n-\r\n-// handle the offer publication and register the offer for a user in the profile page\r\n-\r\n-export const newPublication = async (req, res) => {\r\n-    try {\r\n-\r\n-        const userId = req.user.userid\r\n-\r\n-        const {\r\n-            title,\r\n-            description,\r\n-            depart,\r\n-            destination,\r\n-            capacity,\r\n-            scheduledDate\r\n-        } = req.body;\r\n-\r\n-        // return res.json(req.file)\r\n-\r\n-        // return res.json({body: req.body });\r\n-\r\n-        var data = [];\r\n-\r\n-        if (req.file) {\r\n-            const file = req.file.filename;\r\n-\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                file,\r\n-                userId\r\n-            ]\r\n-        } else {\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                userId\r\n-            ]\r\n-        }\r\n-\r\n-        // return res.json(data);\r\n-\r\n-        // create a new offer\r\n-        const offer = await createOffer(data);\r\n-\r\n-        if (offer) {\r\n-            return res.status(200).json({ user: offer });\r\n-        } else {\r\n-            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-\r\n-// home page function to show offer\r\n-\r\n-export const getHomePageOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-\r\n-        const result = await getHomepageOffers(userId);\r\n-\r\n-        if(!result[0]) return res.status(200).json({offers: {}})\r\n-\r\n-        return res.status(200).json({offers: result});\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// suggestion offer, show the 10 latest offers available\r\n-\r\n-export const suggestionOffers = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-        const result = await latestOffers(userId);\r\n-\r\n-        if (!result) return result.json({ error: \"No offer availaible\" })\r\n-\r\n-        return res.status(200).json({ suggestions: result });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all offer for an user in his account page\r\n-\r\n-export const allOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userid;\r\n-    try {\r\n-\r\n-        const allOffers = await getAllOfferById(userId);\r\n-\r\n-        if(!allOffers.rows[0])\r\n-\r\n-        return res.status(200).json(allOffers);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-\r\n-}\r\n-\r\n-// delete offer by offerId\r\n-\r\n-export const deleteOfferForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await deleteOfferById(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-//update an offer\r\n-\r\n-export const updateOfferForUser = async (req, res) => {\r\n-    try {\r\n-\r\n-        const offerId = req.params.offerId;\r\n-        // use a key table for obtaining the data in the request\r\n-\r\n-        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n-        const formData = {};\r\n-        keys.map(key => {\r\n-            let value = req.body[key];\r\n-\r\n-            // verify if the imgUrl is not empty\r\n-            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n-\r\n-            formData[key] = value;\r\n-        });\r\n-\r\n-        formData.offerId = offerId;\r\n-        // create a table with this object\r\n-        const data = Object.values(formData);\r\n-        // create a new offer\r\n-        const result = await updateOffer(data);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-\r\n-\r\n-    } catch (error) {\r\n-\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-//set unavailable the user offer\r\n-\r\n-export const setUnavailableOfferForUser = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await setunavailableOffer(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all available offers for an user in his account page (filter function)\r\n-\r\n-export const availableOfferForUser = async (req, res) => {\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allAvailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all unavailable offers (filter function in account page)\r\n-\r\n-export const unavailableOfferForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allUnavailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// filter function to get ongoings offer for the user\r\n-\r\n-export const ongoingOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await ongoingOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// expires offer for the user to show in his account page and for the filter in this page\r\n-export const expiredOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await expiredOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// function to handle offer page after click on the notification\r\n-\r\n-export const handleOfferAfterNotifClick = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-        const result = await getOfferByOfferId(offerId);\r\n-\r\n-        return res.status(200).json(result);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-// export default {\r\n-//     newPublication,\r\n-//     getHomePageOffersForUser,\r\n-//     suggestionOffers,\r\n-//     allOffersForUser,\r\n-//     deleteOfferForUser,\r\n-//     updateOfferForUser,\r\n-//     setUnavailableOfferForUser,\r\n-//     availableOfferForUser,\r\n-//     unavailableOfferForUser,\r\n-//     ongoingOffersForUser,\r\n-//     expiredOffersForUser,\r\n-\r\n-// };\n-import {\r\n-    createOffer,\r\n-    getAllOfferById,\r\n-    deleteOfferById,\r\n-    updateOffer,\r\n-    setunavailableOffer,\r\n-    allAvailableOffer,\r\n-    allUnavailableOffer,\r\n-    ongoingOffer,\r\n-    expiredOffer,\r\n-    latestOffers,\r\n-    getHomepageOffers,\r\n-    getOfferByOfferId\r\n-} from '../models/offreModel.js';\r\n-\r\n-// handle the offer publication and register the offer for a user in the profile page\r\n-\r\n-export const newPublication = async (req, res) => {\r\n-    try {\r\n-\r\n-        const userId = req.user.userid\r\n-\r\n-        const {\r\n-            title,\r\n-            description,\r\n-            depart,\r\n-            destination,\r\n-            capacity,\r\n-            scheduledDate\r\n-        } = req.body;\r\n-\r\n-        // return res.json(req.file)\r\n-\r\n-        // return res.json({body: req.body });\r\n-\r\n-        var data = [];\r\n-\r\n-        if (req.file) {\r\n-            const file = req.file.filename;\r\n-\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                file,\r\n-                userId\r\n-            ]\r\n-        } else {\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                userId\r\n-            ]\r\n-        }\r\n-\r\n-        // return res.json(data);\r\n-\r\n-        // create a new offer\r\n-        const offer = await createOffer(data);\r\n-\r\n-        if (offer) {\r\n-            return res.status(200).json({ user: offer });\r\n-        } else {\r\n-            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-\r\n-// home page function to show offer\r\n-\r\n-export const getHomePageOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-\r\n-        const result = await getHomepageOffers(userId);\r\n-\r\n-        if(!result[0]) return res.status(200).json({offers: {}})\r\n-\r\n-        return res.status(200).json({offers: result});\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// suggestion offer, show the 10 latest offers available\r\n-\r\n-export const suggestionOffers = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-        const result = await latestOffers(userId);\r\n-\r\n-        if (!result) return result.json({ error: \"No offer availaible\" })\r\n-\r\n-        return res.status(200).json({ suggestions: result });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all offer for an user in his account page\r\n-\r\n-export const allOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userid;\r\n-    try {\r\n-\r\n-        const allOffers = await getAllOfferById(userId);\r\n-\r\n-        if \r\n-\r\n-        return res.status(200).json(allOffers);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-\r\n-}\r\n-\r\n-// delete offer by offerId\r\n-\r\n-export const deleteOfferForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await deleteOfferById(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-//update an offer\r\n-\r\n-export const updateOfferForUser = async (req, res) => {\r\n-    try {\r\n-\r\n-        const offerId = req.params.offerId;\r\n-        // use a key table for obtaining the data in the request\r\n-\r\n-        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n-        const formData = {};\r\n-        keys.map(key => {\r\n-            let value = req.body[key];\r\n-\r\n-            // verify if the imgUrl is not empty\r\n-            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n-\r\n-            formData[key] = value;\r\n-        });\r\n-\r\n-        formData.offerId = offerId;\r\n-        // create a table with this object\r\n-        const data = Object.values(formData);\r\n-        // create a new offer\r\n-        const result = await updateOffer(data);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-\r\n-\r\n-    } catch (error) {\r\n-\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-//set unavailable the user offer\r\n-\r\n-export const setUnavailableOfferForUser = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await setunavailableOffer(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all available offers for an user in his account page (filter function)\r\n-\r\n-export const availableOfferForUser = async (req, res) => {\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allAvailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all unavailable offers (filter function in account page)\r\n-\r\n-export const unavailableOfferForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allUnavailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// filter function to get ongoings offer for the user\r\n-\r\n-export const ongoingOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await ongoingOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// expires offer for the user to show in his account page and for the filter in this page\r\n-export const expiredOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await expiredOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// function to handle offer page after click on the notification\r\n-\r\n-export const handleOfferAfterNotifClick = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-        const result = await getOfferByOfferId(offerId);\r\n-\r\n-        return res.status(200).json(result);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-// export default {\r\n-//     newPublication,\r\n-//     getHomePageOffersForUser,\r\n-//     suggestionOffers,\r\n-//     allOffersForUser,\r\n-//     deleteOfferForUser,\r\n-//     updateOfferForUser,\r\n-//     setUnavailableOfferForUser,\r\n-//     availableOfferForUser,\r\n-//     unavailableOfferForUser,\r\n-//     ongoingOffersForUser,\r\n-//     expiredOffersForUser,\r\n-\r\n // };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722242117502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,323 @@\n+import {\r\n+    createOffer,\r\n+    getAllOfferById,\r\n+    deleteOfferById,\r\n+    updateOffer,\r\n+    setunavailableOffer,\r\n+    allAvailableOffer,\r\n+    allUnavailableOffer,\r\n+    ongoingOffer,\r\n+    expiredOffer,\r\n+    latestOffers,\r\n+    getHomepageOffers,\r\n+    getOfferByOfferId\r\n+} from '../models/offreModel.js';\r\n+\r\n+// handle the offer publication and register the offer for a user in the profile page\r\n+\r\n+export const newPublication = async (req, res) => {\r\n+    try {\r\n+\r\n+        const userId = req.user.userid\r\n+\r\n+        const {\r\n+            title,\r\n+            description,\r\n+            depart,\r\n+            destination,\r\n+            capacity,\r\n+            scheduledDate\r\n+        } = req.body;\r\n+\r\n+        // return res.json(req.file)\r\n+\r\n+        // return res.json({body: req.body });\r\n+\r\n+        var data = [];\r\n+\r\n+        if (req.file) {\r\n+            const file = req.file.filename;\r\n+\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                file,\r\n+                userId\r\n+            ]\r\n+        } else {\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                userId\r\n+            ]\r\n+        }\r\n+\r\n+        // return res.json(data);\r\n+\r\n+        // create a new offer\r\n+        const offer = await createOffer(data);\r\n+\r\n+        if (offer) {\r\n+            return res.status(200).json({ user: offer });\r\n+        } else {\r\n+            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+\r\n+// home page function to show offer\r\n+\r\n+export const getHomePageOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+\r\n+        const result = await getHomepageOffers(userId);\r\n+\r\n+        if(!result[0]) return res.status(200).json({offers: {}})\r\n+\r\n+        return res.status(200).json({offers: result});\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// suggestion offer, show the 10 latest offers available\r\n+\r\n+export const suggestionOffers = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+        const result = await latestOffers(userId);\r\n+\r\n+        if (!result) return result.json({ error: \"No offer availaible\" })\r\n+\r\n+        return res.status(200).json({ suggestions: result });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all offer for an user in his account page\r\n+\r\n+export const allOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userid;\r\n+    try {\r\n+\r\n+        const allOffers = await getAllOfferById(userId);\r\n+\r\n+        if(!allOffers.rows[0]) return res.status(200).json({allOffers: {}})\r\n+\r\n+        return res.status(200).json(allOffers);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+\r\n+}\r\n+\r\n+// delete offer by offerId\r\n+\r\n+export const deleteOfferForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await deleteOfferById(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+//update an offer\r\n+\r\n+export const updateOfferForUser = async (req, res) => {\r\n+    try {\r\n+\r\n+        const offerId = req.params.offerId;\r\n+        // use a key table for obtaining the data in the request\r\n+\r\n+        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n+        const formData = {};\r\n+        keys.map(key => {\r\n+            let value = req.body[key];\r\n+\r\n+            // verify if the imgUrl is not empty\r\n+            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n+\r\n+            formData[key] = value;\r\n+        });\r\n+\r\n+        formData.offerId = offerId;\r\n+        // create a table with this object\r\n+        const data = Object.values(formData);\r\n+        // create a new offer\r\n+        const result = await updateOffer(data);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+\r\n+\r\n+    } catch (error) {\r\n+\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+//set unavailable the user offer\r\n+\r\n+export const setUnavailableOfferForUser = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await setunavailableOffer(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all available offers for an user in his account page (filter function)\r\n+\r\n+export const availableOfferForUser = async (req, res) => {\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allAvailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all unavailable offers (filter function in account page)\r\n+\r\n+export const unavailableOfferForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allUnavailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// filter function to get ongoings offer for the user\r\n+\r\n+export const ongoingOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await ongoingOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// expires offer for the user to show in his account page and for the filter in this page\r\n+export const expiredOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await expiredOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// function to handle offer page after click on the notification\r\n+\r\n+export const handleOfferAfterNotifClick = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+        const result = await getOfferByOfferId(offerId);\r\n+\r\n+        return res.status(200).json(result);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+// export default {\r\n+//     newPublication,\r\n+//     getHomePageOffersForUser,\r\n+//     suggestionOffers,\r\n+//     allOffersForUser,\r\n+//     deleteOfferForUser,\r\n+//     updateOfferForUser,\r\n+//     setUnavailableOfferForUser,\r\n+//     availableOfferForUser,\r\n+//     unavailableOfferForUser,\r\n+//     ongoingOffersForUser,\r\n+//     expiredOffersForUser,\r\n+\r\n+// };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722242125832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,323 @@\n+import {\r\n+    createOffer,\r\n+    getAllOfferById,\r\n+    deleteOfferById,\r\n+    updateOffer,\r\n+    setunavailableOffer,\r\n+    allAvailableOffer,\r\n+    allUnavailableOffer,\r\n+    ongoingOffer,\r\n+    expiredOffer,\r\n+    latestOffers,\r\n+    getHomepageOffers,\r\n+    getOfferByOfferId\r\n+} from '../models/offreModel.js';\r\n+\r\n+// handle the offer publication and register the offer for a user in the profile page\r\n+\r\n+export const newPublication = async (req, res) => {\r\n+    try {\r\n+\r\n+        const userId = req.user.userid\r\n+\r\n+        const {\r\n+            title,\r\n+            description,\r\n+            depart,\r\n+            destination,\r\n+            capacity,\r\n+            scheduledDate\r\n+        } = req.body;\r\n+\r\n+        // return res.json(req.file)\r\n+\r\n+        // return res.json({body: req.body });\r\n+\r\n+        var data = [];\r\n+\r\n+        if (req.file) {\r\n+            const file = req.file.filename;\r\n+\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                file,\r\n+                userId\r\n+            ]\r\n+        } else {\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                userId\r\n+            ]\r\n+        }\r\n+\r\n+        // return res.json(data);\r\n+\r\n+        // create a new offer\r\n+        const offer = await createOffer(data);\r\n+\r\n+        if (offer) {\r\n+            return res.status(200).json({ user: offer });\r\n+        } else {\r\n+            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+\r\n+// home page function to show offer\r\n+\r\n+export const getHomePageOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+\r\n+        const result = await getHomepageOffers(userId);\r\n+\r\n+        if(!result[0]) return res.status(200).json({offers: {}})\r\n+\r\n+        return res.status(200).json({offers: result});\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// suggestion offer, show the 10 latest offers available\r\n+\r\n+export const suggestionOffers = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+        const result = await latestOffers(userId);\r\n+\r\n+        if (!result) return result.json({ error: \"No offer availaible\" })\r\n+\r\n+        return res.status(200).json({ suggestions: result });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all offer for an user in his account page\r\n+\r\n+export const allOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userid;\r\n+    try {\r\n+\r\n+        const allOffers = await getAllOfferById(userId);\r\n+\r\n+        if(!allOffers.rows[0]) return res.status(200).json({allOffers: {}})\r\n+\r\n+        return res.status(200).json(allOffers);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+\r\n+}\r\n+\r\n+// delete offer by offerId\r\n+\r\n+export const deleteOfferForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await deleteOfferById(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+//update an offer\r\n+\r\n+export const updateOfferForUser = async (req, res) => {\r\n+    try {\r\n+\r\n+        const offerId = req.params.offerId;\r\n+        // use a key table for obtaining the data in the request\r\n+\r\n+        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n+        const formData = {};\r\n+        keys.map(key => {\r\n+            let value = req.body[key];\r\n+\r\n+            // verify if the imgUrl is not empty\r\n+            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n+\r\n+            formData[key] = value;\r\n+        });\r\n+\r\n+        formData.offerId = offerId;\r\n+        // create a table with this object\r\n+        const data = Object.values(formData);\r\n+        // create a new offer\r\n+        const result = await updateOffer(data);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+\r\n+\r\n+    } catch (error) {\r\n+\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+//set unavailable the user offer\r\n+\r\n+export const setUnavailableOfferForUser = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await setunavailableOffer(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all available offers for an user in his account page (filter function)\r\n+\r\n+export const availableOfferForUser = async (req, res) => {\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allAvailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all unavailable offers (filter function in account page)\r\n+\r\n+export const unavailableOfferForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allUnavailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// filter function to get ongoings offer for the user\r\n+\r\n+export const ongoingOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await ongoingOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// expires offer for the user to show in his account page and for the filter in this page\r\n+export const expiredOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await expiredOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// function to handle offer page after click on the notification\r\n+\r\n+export const handleOfferAfterNotifClick = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+        const result = await getOfferByOfferId(offerId);\r\n+\r\n+        return res.status(200).json(result);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+// export default {\r\n+//     newPublication,\r\n+//     getHomePageOffersForUser,\r\n+//     suggestionOffers,\r\n+//     allOffersForUser,\r\n+//     deleteOfferForUser,\r\n+//     updateOfferForUser,\r\n+//     setUnavailableOfferForUser,\r\n+//     availableOfferForUser,\r\n+//     unavailableOfferForUser,\r\n+//     ongoingOffersForUser,\r\n+//     expiredOffersForUser,\r\n+\r\n+// };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722242134637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,323 @@\n+import {\r\n+    createOffer,\r\n+    getAllOfferById,\r\n+    deleteOfferById,\r\n+    updateOffer,\r\n+    setunavailableOffer,\r\n+    allAvailableOffer,\r\n+    allUnavailableOffer,\r\n+    ongoingOffer,\r\n+    expiredOffer,\r\n+    latestOffers,\r\n+    getHomepageOffers,\r\n+    getOfferByOfferId\r\n+} from '../models/offreModel.js';\r\n+\r\n+// handle the offer publication and register the offer for a user in the profile page\r\n+\r\n+export const newPublication = async (req, res) => {\r\n+    try {\r\n+\r\n+        const userId = req.user.userid\r\n+\r\n+        const {\r\n+            title,\r\n+            description,\r\n+            depart,\r\n+            destination,\r\n+            capacity,\r\n+            scheduledDate\r\n+        } = req.body;\r\n+\r\n+        // return res.json(req.file)\r\n+\r\n+        // return res.json({body: req.body });\r\n+\r\n+        var data = [];\r\n+\r\n+        if (req.file) {\r\n+            const file = req.file.filename;\r\n+\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                file,\r\n+                userId\r\n+            ]\r\n+        } else {\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                userId\r\n+            ]\r\n+        }\r\n+\r\n+        // return res.json(data);\r\n+\r\n+        // create a new offer\r\n+        const offer = await createOffer(data);\r\n+\r\n+        if (offer) {\r\n+            return res.status(200).json({ user: offer });\r\n+        } else {\r\n+            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+\r\n+// home page function to show offer\r\n+\r\n+export const getHomePageOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+\r\n+        const result = await getHomepageOffers(userId);\r\n+\r\n+        if(!result[0]) return res.status(200).json({offers: {}})\r\n+\r\n+        return res.status(200).json({offers: result});\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// suggestion offer, show the 10 latest offers available\r\n+\r\n+export const suggestionOffers = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+        const result = await latestOffers(userId);\r\n+\r\n+        if (!result) return result.json({ error: \"No offer availaible\" })\r\n+\r\n+        return res.status(200).json({ suggestions: result });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all offer for an user in his account page\r\n+\r\n+export const allOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userid;\r\n+    try {\r\n+\r\n+        const allOffers = await getAllOfferById(userId);\r\n+\r\n+        if(!allOffers.rows[0]) return res.status(200).json({allOffers: {}})\r\n+\r\n+        return res.status(200).json({ allOffers);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+\r\n+}\r\n+\r\n+// delete offer by offerId\r\n+\r\n+export const deleteOfferForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await deleteOfferById(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+//update an offer\r\n+\r\n+export const updateOfferForUser = async (req, res) => {\r\n+    try {\r\n+\r\n+        const offerId = req.params.offerId;\r\n+        // use a key table for obtaining the data in the request\r\n+\r\n+        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n+        const formData = {};\r\n+        keys.map(key => {\r\n+            let value = req.body[key];\r\n+\r\n+            // verify if the imgUrl is not empty\r\n+            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n+\r\n+            formData[key] = value;\r\n+        });\r\n+\r\n+        formData.offerId = offerId;\r\n+        // create a table with this object\r\n+        const data = Object.values(formData);\r\n+        // create a new offer\r\n+        const result = await updateOffer(data);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+\r\n+\r\n+    } catch (error) {\r\n+\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+//set unavailable the user offer\r\n+\r\n+export const setUnavailableOfferForUser = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await setunavailableOffer(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all available offers for an user in his account page (filter function)\r\n+\r\n+export const availableOfferForUser = async (req, res) => {\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allAvailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all unavailable offers (filter function in account page)\r\n+\r\n+export const unavailableOfferForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allUnavailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// filter function to get ongoings offer for the user\r\n+\r\n+export const ongoingOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await ongoingOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// expires offer for the user to show in his account page and for the filter in this page\r\n+export const expiredOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await expiredOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// function to handle offer page after click on the notification\r\n+\r\n+export const handleOfferAfterNotifClick = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+        const result = await getOfferByOfferId(offerId);\r\n+\r\n+        return res.status(200).json(result);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+// export default {\r\n+//     newPublication,\r\n+//     getHomePageOffersForUser,\r\n+//     suggestionOffers,\r\n+//     allOffersForUser,\r\n+//     deleteOfferForUser,\r\n+//     updateOfferForUser,\r\n+//     setUnavailableOfferForUser,\r\n+//     availableOfferForUser,\r\n+//     unavailableOfferForUser,\r\n+//     ongoingOffersForUser,\r\n+//     expiredOffersForUser,\r\n+\r\n+// };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722242145262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,323 @@\n+import {\r\n+    createOffer,\r\n+    getAllOfferById,\r\n+    deleteOfferById,\r\n+    updateOffer,\r\n+    setunavailableOffer,\r\n+    allAvailableOffer,\r\n+    allUnavailableOffer,\r\n+    ongoingOffer,\r\n+    expiredOffer,\r\n+    latestOffers,\r\n+    getHomepageOffers,\r\n+    getOfferByOfferId\r\n+} from '../models/offreModel.js';\r\n+\r\n+// handle the offer publication and register the offer for a user in the profile page\r\n+\r\n+export const newPublication = async (req, res) => {\r\n+    try {\r\n+\r\n+        const userId = req.user.userid\r\n+\r\n+        const {\r\n+            title,\r\n+            description,\r\n+            depart,\r\n+            destination,\r\n+            capacity,\r\n+            scheduledDate\r\n+        } = req.body;\r\n+\r\n+        // return res.json(req.file)\r\n+\r\n+        // return res.json({body: req.body });\r\n+\r\n+        var data = [];\r\n+\r\n+        if (req.file) {\r\n+            const file = req.file.filename;\r\n+\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                file,\r\n+                userId\r\n+            ]\r\n+        } else {\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                userId\r\n+            ]\r\n+        }\r\n+\r\n+        // return res.json(data);\r\n+\r\n+        // create a new offer\r\n+        const offer = await createOffer(data);\r\n+\r\n+        if (offer) {\r\n+            return res.status(200).json({ user: offer });\r\n+        } else {\r\n+            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+\r\n+// home page function to show offer\r\n+\r\n+export const getHomePageOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+\r\n+        const result = await getHomepageOffers(userId);\r\n+\r\n+        if(!result[0]) return res.status(200).json({offers: {}})\r\n+\r\n+        return res.status(200).json({offers: result});\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// suggestion offer, show the 10 latest offers available\r\n+\r\n+export const suggestionOffers = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+        const result = await latestOffers(userId);\r\n+\r\n+        if (!result) return result.json({ error: \"No offer availaible\" })\r\n+\r\n+        return res.status(200).json({ suggestions: result });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all offer for an user in his account page\r\n+\r\n+export const allOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userid;\r\n+    try {\r\n+\r\n+        const allOffers = await getAllOfferById(userId);\r\n+\r\n+        if(!allOffers.rows[0]) return res.status(200).json({allOffers: {}})\r\n+\r\n+        return res.status(200).json({ allOffers });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+\r\n+}\r\n+\r\n+// delete offer by offerId\r\n+\r\n+export const deleteOfferForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await deleteOfferById(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+//update an offer\r\n+\r\n+export const updateOfferForUser = async (req, res) => {\r\n+    try {\r\n+\r\n+        const offerId = req.params.offerId;\r\n+        // use a key table for obtaining the data in the request\r\n+\r\n+        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n+        const formData = {};\r\n+        keys.map(key => {\r\n+            let value = req.body[key];\r\n+\r\n+            // verify if the imgUrl is not empty\r\n+            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n+\r\n+            formData[key] = value;\r\n+        });\r\n+\r\n+        formData.offerId = offerId;\r\n+        // create a table with this object\r\n+        const data = Object.values(formData);\r\n+        // create a new offer\r\n+        const result = await updateOffer(data);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+\r\n+\r\n+    } catch (error) {\r\n+\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+//set unavailable the user offer\r\n+\r\n+export const setUnavailableOfferForUser = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await setunavailableOffer(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all available offers for an user in his account page (filter function)\r\n+\r\n+export const availableOfferForUser = async (req, res) => {\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allAvailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all unavailable offers (filter function in account page)\r\n+\r\n+export const unavailableOfferForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allUnavailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// filter function to get ongoings offer for the user\r\n+\r\n+export const ongoingOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await ongoingOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// expires offer for the user to show in his account page and for the filter in this page\r\n+export const expiredOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await expiredOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// function to handle offer page after click on the notification\r\n+\r\n+export const handleOfferAfterNotifClick = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+        const result = await getOfferByOfferId(offerId);\r\n+\r\n+        return res.status(200).json(result);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+// export default {\r\n+//     newPublication,\r\n+//     getHomePageOffersForUser,\r\n+//     suggestionOffers,\r\n+//     allOffersForUser,\r\n+//     deleteOfferForUser,\r\n+//     updateOfferForUser,\r\n+//     setUnavailableOfferForUser,\r\n+//     availableOfferForUser,\r\n+//     unavailableOfferForUser,\r\n+//     ongoingOffersForUser,\r\n+//     expiredOffersForUser,\r\n+\r\n+// };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722242409967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,8 +128,10 @@\n     try {\r\n \r\n         const allOffers = await getAllOfferById(userId);\r\n \r\n+        console.log(allOffers)\r\n+\r\n         if(!allOffers.rows[0]) return res.status(200).json({allOffers: {}})\r\n \r\n         return res.status(200).json({ allOffers });\r\n \r\n@@ -319,1297 +321,5 @@\n //     unavailableOfferForUser,\r\n //     ongoingOffersForUser,\r\n //     expiredOffersForUser,\r\n \r\n-// };\n-import {\r\n-    createOffer,\r\n-    getAllOfferById,\r\n-    deleteOfferById,\r\n-    updateOffer,\r\n-    setunavailableOffer,\r\n-    allAvailableOffer,\r\n-    allUnavailableOffer,\r\n-    ongoingOffer,\r\n-    expiredOffer,\r\n-    latestOffers,\r\n-    getHomepageOffers,\r\n-    getOfferByOfferId\r\n-} from '../models/offreModel.js';\r\n-\r\n-// handle the offer publication and register the offer for a user in the profile page\r\n-\r\n-export const newPublication = async (req, res) => {\r\n-    try {\r\n-\r\n-        const userId = req.user.userid\r\n-\r\n-        const {\r\n-            title,\r\n-            description,\r\n-            depart,\r\n-            destination,\r\n-            capacity,\r\n-            scheduledDate\r\n-        } = req.body;\r\n-\r\n-        // return res.json(req.file)\r\n-\r\n-        // return res.json({body: req.body });\r\n-\r\n-        var data = [];\r\n-\r\n-        if (req.file) {\r\n-            const file = req.file.filename;\r\n-\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                file,\r\n-                userId\r\n-            ]\r\n-        } else {\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                userId\r\n-            ]\r\n-        }\r\n-\r\n-        // return res.json(data);\r\n-\r\n-        // create a new offer\r\n-        const offer = await createOffer(data);\r\n-\r\n-        if (offer) {\r\n-            return res.status(200).json({ user: offer });\r\n-        } else {\r\n-            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-\r\n-// home page function to show offer\r\n-\r\n-export const getHomePageOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-\r\n-        const result = await getHomepageOffers(userId);\r\n-\r\n-        if(!result[0]) return res.status(200).json({offers: {}})\r\n-\r\n-        return res.status(200).json({offers: result});\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// suggestion offer, show the 10 latest offers available\r\n-\r\n-export const suggestionOffers = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-        const result = await latestOffers(userId);\r\n-\r\n-        if (!result) return result.json({ error: \"No offer availaible\" })\r\n-\r\n-        return res.status(200).json({ suggestions: result });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all offer for an user in his account page\r\n-\r\n-export const allOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userid;\r\n-    try {\r\n-\r\n-        const allOffers = await getAllOfferById(userId);\r\n-\r\n-        if(!allOffers.rows[0]) return res.status(200).json({allOffers: {}})\r\n-\r\n-        return res.status(200).json({ allOffers);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-\r\n-}\r\n-\r\n-// delete offer by offerId\r\n-\r\n-export const deleteOfferForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await deleteOfferById(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-//update an offer\r\n-\r\n-export const updateOfferForUser = async (req, res) => {\r\n-    try {\r\n-\r\n-        const offerId = req.params.offerId;\r\n-        // use a key table for obtaining the data in the request\r\n-\r\n-        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n-        const formData = {};\r\n-        keys.map(key => {\r\n-            let value = req.body[key];\r\n-\r\n-            // verify if the imgUrl is not empty\r\n-            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n-\r\n-            formData[key] = value;\r\n-        });\r\n-\r\n-        formData.offerId = offerId;\r\n-        // create a table with this object\r\n-        const data = Object.values(formData);\r\n-        // create a new offer\r\n-        const result = await updateOffer(data);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-\r\n-\r\n-    } catch (error) {\r\n-\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-//set unavailable the user offer\r\n-\r\n-export const setUnavailableOfferForUser = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await setunavailableOffer(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all available offers for an user in his account page (filter function)\r\n-\r\n-export const availableOfferForUser = async (req, res) => {\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allAvailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all unavailable offers (filter function in account page)\r\n-\r\n-export const unavailableOfferForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allUnavailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// filter function to get ongoings offer for the user\r\n-\r\n-export const ongoingOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await ongoingOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// expires offer for the user to show in his account page and for the filter in this page\r\n-export const expiredOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await expiredOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// function to handle offer page after click on the notification\r\n-\r\n-export const handleOfferAfterNotifClick = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-        const result = await getOfferByOfferId(offerId);\r\n-\r\n-        return res.status(200).json(result);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-// export default {\r\n-//     newPublication,\r\n-//     getHomePageOffersForUser,\r\n-//     suggestionOffers,\r\n-//     allOffersForUser,\r\n-//     deleteOfferForUser,\r\n-//     updateOfferForUser,\r\n-//     setUnavailableOfferForUser,\r\n-//     availableOfferForUser,\r\n-//     unavailableOfferForUser,\r\n-//     ongoingOffersForUser,\r\n-//     expiredOffersForUser,\r\n-\r\n-// };\n-import {\r\n-    createOffer,\r\n-    getAllOfferById,\r\n-    deleteOfferById,\r\n-    updateOffer,\r\n-    setunavailableOffer,\r\n-    allAvailableOffer,\r\n-    allUnavailableOffer,\r\n-    ongoingOffer,\r\n-    expiredOffer,\r\n-    latestOffers,\r\n-    getHomepageOffers,\r\n-    getOfferByOfferId\r\n-} from '../models/offreModel.js';\r\n-\r\n-// handle the offer publication and register the offer for a user in the profile page\r\n-\r\n-export const newPublication = async (req, res) => {\r\n-    try {\r\n-\r\n-        const userId = req.user.userid\r\n-\r\n-        const {\r\n-            title,\r\n-            description,\r\n-            depart,\r\n-            destination,\r\n-            capacity,\r\n-            scheduledDate\r\n-        } = req.body;\r\n-\r\n-        // return res.json(req.file)\r\n-\r\n-        // return res.json({body: req.body });\r\n-\r\n-        var data = [];\r\n-\r\n-        if (req.file) {\r\n-            const file = req.file.filename;\r\n-\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                file,\r\n-                userId\r\n-            ]\r\n-        } else {\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                userId\r\n-            ]\r\n-        }\r\n-\r\n-        // return res.json(data);\r\n-\r\n-        // create a new offer\r\n-        const offer = await createOffer(data);\r\n-\r\n-        if (offer) {\r\n-            return res.status(200).json({ user: offer });\r\n-        } else {\r\n-            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-\r\n-// home page function to show offer\r\n-\r\n-export const getHomePageOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-\r\n-        const result = await getHomepageOffers(userId);\r\n-\r\n-        if(!result[0]) return res.status(200).json({offers: {}})\r\n-\r\n-        return res.status(200).json({offers: result});\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// suggestion offer, show the 10 latest offers available\r\n-\r\n-export const suggestionOffers = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-        const result = await latestOffers(userId);\r\n-\r\n-        if (!result) return result.json({ error: \"No offer availaible\" })\r\n-\r\n-        return res.status(200).json({ suggestions: result });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all offer for an user in his account page\r\n-\r\n-export const allOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userid;\r\n-    try {\r\n-\r\n-        const allOffers = await getAllOfferById(userId);\r\n-\r\n-        if(!allOffers.rows[0]) return res.status(200).json({allOffers: {}})\r\n-\r\n-        return res.status(200).json(allOffers);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-\r\n-}\r\n-\r\n-// delete offer by offerId\r\n-\r\n-export const deleteOfferForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await deleteOfferById(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-//update an offer\r\n-\r\n-export const updateOfferForUser = async (req, res) => {\r\n-    try {\r\n-\r\n-        const offerId = req.params.offerId;\r\n-        // use a key table for obtaining the data in the request\r\n-\r\n-        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n-        const formData = {};\r\n-        keys.map(key => {\r\n-            let value = req.body[key];\r\n-\r\n-            // verify if the imgUrl is not empty\r\n-            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n-\r\n-            formData[key] = value;\r\n-        });\r\n-\r\n-        formData.offerId = offerId;\r\n-        // create a table with this object\r\n-        const data = Object.values(formData);\r\n-        // create a new offer\r\n-        const result = await updateOffer(data);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-\r\n-\r\n-    } catch (error) {\r\n-\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-//set unavailable the user offer\r\n-\r\n-export const setUnavailableOfferForUser = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await setunavailableOffer(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all available offers for an user in his account page (filter function)\r\n-\r\n-export const availableOfferForUser = async (req, res) => {\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allAvailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all unavailable offers (filter function in account page)\r\n-\r\n-export const unavailableOfferForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allUnavailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// filter function to get ongoings offer for the user\r\n-\r\n-export const ongoingOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await ongoingOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// expires offer for the user to show in his account page and for the filter in this page\r\n-export const expiredOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await expiredOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// function to handle offer page after click on the notification\r\n-\r\n-export const handleOfferAfterNotifClick = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-        const result = await getOfferByOfferId(offerId);\r\n-\r\n-        return res.status(200).json(result);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-// export default {\r\n-//     newPublication,\r\n-//     getHomePageOffersForUser,\r\n-//     suggestionOffers,\r\n-//     allOffersForUser,\r\n-//     deleteOfferForUser,\r\n-//     updateOfferForUser,\r\n-//     setUnavailableOfferForUser,\r\n-//     availableOfferForUser,\r\n-//     unavailableOfferForUser,\r\n-//     ongoingOffersForUser,\r\n-//     expiredOffersForUser,\r\n-\r\n-// };\n-import {\r\n-    createOffer,\r\n-    getAllOfferById,\r\n-    deleteOfferById,\r\n-    updateOffer,\r\n-    setunavailableOffer,\r\n-    allAvailableOffer,\r\n-    allUnavailableOffer,\r\n-    ongoingOffer,\r\n-    expiredOffer,\r\n-    latestOffers,\r\n-    getHomepageOffers,\r\n-    getOfferByOfferId\r\n-} from '../models/offreModel.js';\r\n-\r\n-// handle the offer publication and register the offer for a user in the profile page\r\n-\r\n-export const newPublication = async (req, res) => {\r\n-    try {\r\n-\r\n-        const userId = req.user.userid\r\n-\r\n-        const {\r\n-            title,\r\n-            description,\r\n-            depart,\r\n-            destination,\r\n-            capacity,\r\n-            scheduledDate\r\n-        } = req.body;\r\n-\r\n-        // return res.json(req.file)\r\n-\r\n-        // return res.json({body: req.body });\r\n-\r\n-        var data = [];\r\n-\r\n-        if (req.file) {\r\n-            const file = req.file.filename;\r\n-\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                file,\r\n-                userId\r\n-            ]\r\n-        } else {\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                userId\r\n-            ]\r\n-        }\r\n-\r\n-        // return res.json(data);\r\n-\r\n-        // create a new offer\r\n-        const offer = await createOffer(data);\r\n-\r\n-        if (offer) {\r\n-            return res.status(200).json({ user: offer });\r\n-        } else {\r\n-            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-\r\n-// home page function to show offer\r\n-\r\n-export const getHomePageOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-\r\n-        const result = await getHomepageOffers(userId);\r\n-\r\n-        if(!result[0]) return res.status(200).json({offers: {}})\r\n-\r\n-        return res.status(200).json({offers: result});\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// suggestion offer, show the 10 latest offers available\r\n-\r\n-export const suggestionOffers = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-        const result = await latestOffers(userId);\r\n-\r\n-        if (!result) return result.json({ error: \"No offer availaible\" })\r\n-\r\n-        return res.status(200).json({ suggestions: result });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all offer for an user in his account page\r\n-\r\n-export const allOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userid;\r\n-    try {\r\n-\r\n-        const allOffers = await getAllOfferById(userId);\r\n-\r\n-        if(!allOffers.rows[0]) return res.status(200).json({allOffers: {}})\r\n-\r\n-        return res.status(200).json(allOffers);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-\r\n-}\r\n-\r\n-// delete offer by offerId\r\n-\r\n-export const deleteOfferForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await deleteOfferById(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-//update an offer\r\n-\r\n-export const updateOfferForUser = async (req, res) => {\r\n-    try {\r\n-\r\n-        const offerId = req.params.offerId;\r\n-        // use a key table for obtaining the data in the request\r\n-\r\n-        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n-        const formData = {};\r\n-        keys.map(key => {\r\n-            let value = req.body[key];\r\n-\r\n-            // verify if the imgUrl is not empty\r\n-            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n-\r\n-            formData[key] = value;\r\n-        });\r\n-\r\n-        formData.offerId = offerId;\r\n-        // create a table with this object\r\n-        const data = Object.values(formData);\r\n-        // create a new offer\r\n-        const result = await updateOffer(data);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-\r\n-\r\n-    } catch (error) {\r\n-\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-//set unavailable the user offer\r\n-\r\n-export const setUnavailableOfferForUser = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await setunavailableOffer(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all available offers for an user in his account page (filter function)\r\n-\r\n-export const availableOfferForUser = async (req, res) => {\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allAvailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all unavailable offers (filter function in account page)\r\n-\r\n-export const unavailableOfferForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allUnavailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// filter function to get ongoings offer for the user\r\n-\r\n-export const ongoingOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await ongoingOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// expires offer for the user to show in his account page and for the filter in this page\r\n-export const expiredOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await expiredOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// function to handle offer page after click on the notification\r\n-\r\n-export const handleOfferAfterNotifClick = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-        const result = await getOfferByOfferId(offerId);\r\n-\r\n-        return res.status(200).json(result);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-// export default {\r\n-//     newPublication,\r\n-//     getHomePageOffersForUser,\r\n-//     suggestionOffers,\r\n-//     allOffersForUser,\r\n-//     deleteOfferForUser,\r\n-//     updateOfferForUser,\r\n-//     setUnavailableOfferForUser,\r\n-//     availableOfferForUser,\r\n-//     unavailableOfferForUser,\r\n-//     ongoingOffersForUser,\r\n-//     expiredOffersForUser,\r\n-\r\n-// };\n-import {\r\n-    createOffer,\r\n-    getAllOfferById,\r\n-    deleteOfferById,\r\n-    updateOffer,\r\n-    setunavailableOffer,\r\n-    allAvailableOffer,\r\n-    allUnavailableOffer,\r\n-    ongoingOffer,\r\n-    expiredOffer,\r\n-    latestOffers,\r\n-    getHomepageOffers,\r\n-    getOfferByOfferId\r\n-} from '../models/offreModel.js';\r\n-\r\n-// handle the offer publication and register the offer for a user in the profile page\r\n-\r\n-export const newPublication = async (req, res) => {\r\n-    try {\r\n-\r\n-        const userId = req.user.userid\r\n-\r\n-        const {\r\n-            title,\r\n-            description,\r\n-            depart,\r\n-            destination,\r\n-            capacity,\r\n-            scheduledDate\r\n-        } = req.body;\r\n-\r\n-        // return res.json(req.file)\r\n-\r\n-        // return res.json({body: req.body });\r\n-\r\n-        var data = [];\r\n-\r\n-        if (req.file) {\r\n-            const file = req.file.filename;\r\n-\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                file,\r\n-                userId\r\n-            ]\r\n-        } else {\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                userId\r\n-            ]\r\n-        }\r\n-\r\n-        // return res.json(data);\r\n-\r\n-        // create a new offer\r\n-        const offer = await createOffer(data);\r\n-\r\n-        if (offer) {\r\n-            return res.status(200).json({ user: offer });\r\n-        } else {\r\n-            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-\r\n-// home page function to show offer\r\n-\r\n-export const getHomePageOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-\r\n-        const result = await getHomepageOffers(userId);\r\n-\r\n-        if(!result[0]) return res.status(200).json({offers: {}})\r\n-\r\n-        return res.status(200).json({offers: result});\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// suggestion offer, show the 10 latest offers available\r\n-\r\n-export const suggestionOffers = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-        const result = await latestOffers(userId);\r\n-\r\n-        if (!result) return result.json({ error: \"No offer availaible\" })\r\n-\r\n-        return res.status(200).json({ suggestions: result });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all offer for an user in his account page\r\n-\r\n-export const allOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userid;\r\n-    try {\r\n-\r\n-        const allOffers = await getAllOfferById(userId);\r\n-\r\n-        if(!allOffers.rows[0]) return res.status(200).json({all})\r\n-\r\n-        return res.status(200).json(allOffers);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-\r\n-}\r\n-\r\n-// delete offer by offerId\r\n-\r\n-export const deleteOfferForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await deleteOfferById(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-//update an offer\r\n-\r\n-export const updateOfferForUser = async (req, res) => {\r\n-    try {\r\n-\r\n-        const offerId = req.params.offerId;\r\n-        // use a key table for obtaining the data in the request\r\n-\r\n-        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n-        const formData = {};\r\n-        keys.map(key => {\r\n-            let value = req.body[key];\r\n-\r\n-            // verify if the imgUrl is not empty\r\n-            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n-\r\n-            formData[key] = value;\r\n-        });\r\n-\r\n-        formData.offerId = offerId;\r\n-        // create a table with this object\r\n-        const data = Object.values(formData);\r\n-        // create a new offer\r\n-        const result = await updateOffer(data);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-\r\n-\r\n-    } catch (error) {\r\n-\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-//set unavailable the user offer\r\n-\r\n-export const setUnavailableOfferForUser = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await setunavailableOffer(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all available offers for an user in his account page (filter function)\r\n-\r\n-export const availableOfferForUser = async (req, res) => {\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allAvailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all unavailable offers (filter function in account page)\r\n-\r\n-export const unavailableOfferForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allUnavailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// filter function to get ongoings offer for the user\r\n-\r\n-export const ongoingOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await ongoingOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// expires offer for the user to show in his account page and for the filter in this page\r\n-export const expiredOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await expiredOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// function to handle offer page after click on the notification\r\n-\r\n-export const handleOfferAfterNotifClick = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-        const result = await getOfferByOfferId(offerId);\r\n-\r\n-        return res.status(200).json(result);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-// export default {\r\n-//     newPublication,\r\n-//     getHomePageOffersForUser,\r\n-//     suggestionOffers,\r\n-//     allOffersForUser,\r\n-//     deleteOfferForUser,\r\n-//     updateOfferForUser,\r\n-//     setUnavailableOfferForUser,\r\n-//     availableOfferForUser,\r\n-//     unavailableOfferForUser,\r\n-//     ongoingOffersForUser,\r\n-//     expiredOffersForUser,\r\n-\r\n // };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722242418021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,325 @@\n+import {\r\n+    createOffer,\r\n+    getAllOfferById,\r\n+    deleteOfferById,\r\n+    updateOffer,\r\n+    setunavailableOffer,\r\n+    allAvailableOffer,\r\n+    allUnavailableOffer,\r\n+    ongoingOffer,\r\n+    expiredOffer,\r\n+    latestOffers,\r\n+    getHomepageOffers,\r\n+    getOfferByOfferId\r\n+} from '../models/offreModel.js';\r\n+\r\n+// handle the offer publication and register the offer for a user in the profile page\r\n+\r\n+export const newPublication = async (req, res) => {\r\n+    try {\r\n+\r\n+        const userId = req.user.userid\r\n+\r\n+        const {\r\n+            title,\r\n+            description,\r\n+            depart,\r\n+            destination,\r\n+            capacity,\r\n+            scheduledDate\r\n+        } = req.body;\r\n+\r\n+        // return res.json(req.file)\r\n+\r\n+        // return res.json({body: req.body });\r\n+\r\n+        var data = [];\r\n+\r\n+        if (req.file) {\r\n+            const file = req.file.filename;\r\n+\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                file,\r\n+                userId\r\n+            ]\r\n+        } else {\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                userId\r\n+            ]\r\n+        }\r\n+\r\n+        // return res.json(data);\r\n+\r\n+        // create a new offer\r\n+        const offer = await createOffer(data);\r\n+\r\n+        if (offer) {\r\n+            return res.status(200).json({ user: offer });\r\n+        } else {\r\n+            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+\r\n+// home page function to show offer\r\n+\r\n+export const getHomePageOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+\r\n+        const result = await getHomepageOffers(userId);\r\n+\r\n+        if(!result[0]) return res.status(200).json({offers: {}})\r\n+\r\n+        return res.status(200).json({offers: result});\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// suggestion offer, show the 10 latest offers available\r\n+\r\n+export const suggestionOffers = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+        const result = await latestOffers(userId);\r\n+\r\n+        if (!result) return result.json({ error: \"No offer availaible\" })\r\n+\r\n+        return res.status(200).json({ suggestions: result });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all offer for an user in his account page\r\n+\r\n+export const allOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userid;\r\n+    try {\r\n+\r\n+        const allOffers = await getAllOfferById(userId);\r\n+\r\n+        console.log(\"AllOffersBack\"allOffers)\r\n+\r\n+        if(!allOffers.rows[0]) return res.status(200).json({allOffers: {}})\r\n+\r\n+        return res.status(200).json({ allOffers });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+\r\n+}\r\n+\r\n+// delete offer by offerId\r\n+\r\n+export const deleteOfferForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await deleteOfferById(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+//update an offer\r\n+\r\n+export const updateOfferForUser = async (req, res) => {\r\n+    try {\r\n+\r\n+        const offerId = req.params.offerId;\r\n+        // use a key table for obtaining the data in the request\r\n+\r\n+        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n+        const formData = {};\r\n+        keys.map(key => {\r\n+            let value = req.body[key];\r\n+\r\n+            // verify if the imgUrl is not empty\r\n+            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n+\r\n+            formData[key] = value;\r\n+        });\r\n+\r\n+        formData.offerId = offerId;\r\n+        // create a table with this object\r\n+        const data = Object.values(formData);\r\n+        // create a new offer\r\n+        const result = await updateOffer(data);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+\r\n+\r\n+    } catch (error) {\r\n+\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+//set unavailable the user offer\r\n+\r\n+export const setUnavailableOfferForUser = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await setunavailableOffer(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all available offers for an user in his account page (filter function)\r\n+\r\n+export const availableOfferForUser = async (req, res) => {\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allAvailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all unavailable offers (filter function in account page)\r\n+\r\n+export const unavailableOfferForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allUnavailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// filter function to get ongoings offer for the user\r\n+\r\n+export const ongoingOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await ongoingOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// expires offer for the user to show in his account page and for the filter in this page\r\n+export const expiredOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await expiredOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// function to handle offer page after click on the notification\r\n+\r\n+export const handleOfferAfterNotifClick = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+        const result = await getOfferByOfferId(offerId);\r\n+\r\n+        return res.status(200).json(result);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+// export default {\r\n+//     newPublication,\r\n+//     getHomePageOffersForUser,\r\n+//     suggestionOffers,\r\n+//     allOffersForUser,\r\n+//     deleteOfferForUser,\r\n+//     updateOfferForUser,\r\n+//     setUnavailableOfferForUser,\r\n+//     availableOfferForUser,\r\n+//     unavailableOfferForUser,\r\n+//     ongoingOffersForUser,\r\n+//     expiredOffersForUser,\r\n+\r\n+// };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722242477367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,325 @@\n+import {\r\n+    createOffer,\r\n+    getAllOfferById,\r\n+    deleteOfferById,\r\n+    updateOffer,\r\n+    setunavailableOffer,\r\n+    allAvailableOffer,\r\n+    allUnavailableOffer,\r\n+    ongoingOffer,\r\n+    expiredOffer,\r\n+    latestOffers,\r\n+    getHomepageOffers,\r\n+    getOfferByOfferId\r\n+} from '../models/offreModel.js';\r\n+\r\n+// handle the offer publication and register the offer for a user in the profile page\r\n+\r\n+export const newPublication = async (req, res) => {\r\n+    try {\r\n+\r\n+        const userId = req.user.userid\r\n+\r\n+        const {\r\n+            title,\r\n+            description,\r\n+            depart,\r\n+            destination,\r\n+            capacity,\r\n+            scheduledDate\r\n+        } = req.body;\r\n+\r\n+        // return res.json(req.file)\r\n+\r\n+        // return res.json({body: req.body });\r\n+\r\n+        var data = [];\r\n+\r\n+        if (req.file) {\r\n+            const file = req.file.filename;\r\n+\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                file,\r\n+                userId\r\n+            ]\r\n+        } else {\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                userId\r\n+            ]\r\n+        }\r\n+\r\n+        // return res.json(data);\r\n+\r\n+        // create a new offer\r\n+        const offer = await createOffer(data);\r\n+\r\n+        if (offer) {\r\n+            return res.status(200).json({ user: offer });\r\n+        } else {\r\n+            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+\r\n+// home page function to show offer\r\n+\r\n+export const getHomePageOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+\r\n+        const result = await getHomepageOffers(userId);\r\n+\r\n+        if(!result[0]) return res.status(200).json({offers: {}})\r\n+\r\n+        return res.status(200).json({offers: result});\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// suggestion offer, show the 10 latest offers available\r\n+\r\n+export const suggestionOffers = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+        const result = await latestOffers(userId);\r\n+\r\n+        if (!result) return result.json({ error: \"No offer availaible\" })\r\n+\r\n+        return res.status(200).json({ suggestions: result });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all offer for an user in his account page\r\n+\r\n+export const allOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userid;\r\n+    try {\r\n+\r\n+        const allOffers = await getAllOfferById(userId);\r\n+\r\n+        console.log(\"AllOffersBack: \" + allOffers)\r\n+\r\n+        if(!allOffers.rows[0]) return res.status(200).json({allOffers: {}})\r\n+\r\n+        return res.status(200).json({ all: allOffers });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+\r\n+}\r\n+\r\n+// delete offer by offerId\r\n+\r\n+export const deleteOfferForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await deleteOfferById(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+//update an offer\r\n+\r\n+export const updateOfferForUser = async (req, res) => {\r\n+    try {\r\n+\r\n+        const offerId = req.params.offerId;\r\n+        // use a key table for obtaining the data in the request\r\n+\r\n+        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n+        const formData = {};\r\n+        keys.map(key => {\r\n+            let value = req.body[key];\r\n+\r\n+            // verify if the imgUrl is not empty\r\n+            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n+\r\n+            formData[key] = value;\r\n+        });\r\n+\r\n+        formData.offerId = offerId;\r\n+        // create a table with this object\r\n+        const data = Object.values(formData);\r\n+        // create a new offer\r\n+        const result = await updateOffer(data);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+\r\n+\r\n+    } catch (error) {\r\n+\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+//set unavailable the user offer\r\n+\r\n+export const setUnavailableOfferForUser = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await setunavailableOffer(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all available offers for an user in his account page (filter function)\r\n+\r\n+export const availableOfferForUser = async (req, res) => {\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allAvailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all unavailable offers (filter function in account page)\r\n+\r\n+export const unavailableOfferForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allUnavailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// filter function to get ongoings offer for the user\r\n+\r\n+export const ongoingOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await ongoingOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// expires offer for the user to show in his account page and for the filter in this page\r\n+export const expiredOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await expiredOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// function to handle offer page after click on the notification\r\n+\r\n+export const handleOfferAfterNotifClick = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+        const result = await getOfferByOfferId(offerId);\r\n+\r\n+        return res.status(200).json(result);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+// export default {\r\n+//     newPublication,\r\n+//     getHomePageOffersForUser,\r\n+//     suggestionOffers,\r\n+//     allOffersForUser,\r\n+//     deleteOfferForUser,\r\n+//     updateOfferForUser,\r\n+//     setUnavailableOfferForUser,\r\n+//     availableOfferForUser,\r\n+//     unavailableOfferForUser,\r\n+//     ongoingOffersForUser,\r\n+//     expiredOffersForUser,\r\n+\r\n+// };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722242482877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,325 @@\n+import {\r\n+    createOffer,\r\n+    getAllOfferById,\r\n+    deleteOfferById,\r\n+    updateOffer,\r\n+    setunavailableOffer,\r\n+    allAvailableOffer,\r\n+    allUnavailableOffer,\r\n+    ongoingOffer,\r\n+    expiredOffer,\r\n+    latestOffers,\r\n+    getHomepageOffers,\r\n+    getOfferByOfferId\r\n+} from '../models/offreModel.js';\r\n+\r\n+// handle the offer publication and register the offer for a user in the profile page\r\n+\r\n+export const newPublication = async (req, res) => {\r\n+    try {\r\n+\r\n+        const userId = req.user.userid\r\n+\r\n+        const {\r\n+            title,\r\n+            description,\r\n+            depart,\r\n+            destination,\r\n+            capacity,\r\n+            scheduledDate\r\n+        } = req.body;\r\n+\r\n+        // return res.json(req.file)\r\n+\r\n+        // return res.json({body: req.body });\r\n+\r\n+        var data = [];\r\n+\r\n+        if (req.file) {\r\n+            const file = req.file.filename;\r\n+\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                file,\r\n+                userId\r\n+            ]\r\n+        } else {\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                userId\r\n+            ]\r\n+        }\r\n+\r\n+        // return res.json(data);\r\n+\r\n+        // create a new offer\r\n+        const offer = await createOffer(data);\r\n+\r\n+        if (offer) {\r\n+            return res.status(200).json({ user: offer });\r\n+        } else {\r\n+            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+\r\n+// home page function to show offer\r\n+\r\n+export const getHomePageOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+\r\n+        const result = await getHomepageOffers(userId);\r\n+\r\n+        if(!result[0]) return res.status(200).json({offers: {}})\r\n+\r\n+        return res.status(200).json({offers: result});\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// suggestion offer, show the 10 latest offers available\r\n+\r\n+export const suggestionOffers = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+        const result = await latestOffers(userId);\r\n+\r\n+        if (!result) return result.json({ error: \"No offer availaible\" })\r\n+\r\n+        return res.status(200).json({ suggestions: result });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all offer for an user in his account page\r\n+\r\n+export const allOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userid;\r\n+    try {\r\n+\r\n+        const allOffers = await getAllOfferById(userId);\r\n+\r\n+        console.log(\"AllOffersBack: \" + allOffers)\r\n+\r\n+        if(!allOffers.rows[0]) return res.status(200).json({all: {}})\r\n+\r\n+        return res.status(200).json({ all: allOffers });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+\r\n+}\r\n+\r\n+// delete offer by offerId\r\n+\r\n+export const deleteOfferForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await deleteOfferById(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+//update an offer\r\n+\r\n+export const updateOfferForUser = async (req, res) => {\r\n+    try {\r\n+\r\n+        const offerId = req.params.offerId;\r\n+        // use a key table for obtaining the data in the request\r\n+\r\n+        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n+        const formData = {};\r\n+        keys.map(key => {\r\n+            let value = req.body[key];\r\n+\r\n+            // verify if the imgUrl is not empty\r\n+            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n+\r\n+            formData[key] = value;\r\n+        });\r\n+\r\n+        formData.offerId = offerId;\r\n+        // create a table with this object\r\n+        const data = Object.values(formData);\r\n+        // create a new offer\r\n+        const result = await updateOffer(data);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+\r\n+\r\n+    } catch (error) {\r\n+\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+//set unavailable the user offer\r\n+\r\n+export const setUnavailableOfferForUser = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await setunavailableOffer(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all available offers for an user in his account page (filter function)\r\n+\r\n+export const availableOfferForUser = async (req, res) => {\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allAvailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all unavailable offers (filter function in account page)\r\n+\r\n+export const unavailableOfferForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allUnavailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// filter function to get ongoings offer for the user\r\n+\r\n+export const ongoingOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await ongoingOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// expires offer for the user to show in his account page and for the filter in this page\r\n+export const expiredOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await expiredOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// function to handle offer page after click on the notification\r\n+\r\n+export const handleOfferAfterNotifClick = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+        const result = await getOfferByOfferId(offerId);\r\n+\r\n+        return res.status(200).json(result);\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+// export default {\r\n+//     newPublication,\r\n+//     getHomePageOffersForUser,\r\n+//     suggestionOffers,\r\n+//     allOffersForUser,\r\n+//     deleteOfferForUser,\r\n+//     updateOfferForUser,\r\n+//     setUnavailableOfferForUser,\r\n+//     availableOfferForUser,\r\n+//     unavailableOfferForUser,\r\n+//     ongoingOffersForUser,\r\n+//     expiredOffersForUser,\r\n+\r\n+// };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722246839103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n     try {\r\n \r\n         const allOffers = await getAllOfferById(userId);\r\n \r\n-        console.log(\"AllOffersBack: \" + allOffers)\r\n+        // console.log(\"AllOffersBack: \" + allOffers)\r\n \r\n         if(!allOffers.rows[0]) return res.status(200).json({all: {}})\r\n \r\n         return res.status(200).json({ all: allOffers });\r\n@@ -321,980 +321,5 @@\n //     unavailableOfferForUser,\r\n //     ongoingOffersForUser,\r\n //     expiredOffersForUser,\r\n \r\n-// };\n-import {\r\n-    createOffer,\r\n-    getAllOfferById,\r\n-    deleteOfferById,\r\n-    updateOffer,\r\n-    setunavailableOffer,\r\n-    allAvailableOffer,\r\n-    allUnavailableOffer,\r\n-    ongoingOffer,\r\n-    expiredOffer,\r\n-    latestOffers,\r\n-    getHomepageOffers,\r\n-    getOfferByOfferId\r\n-} from '../models/offreModel.js';\r\n-\r\n-// handle the offer publication and register the offer for a user in the profile page\r\n-\r\n-export const newPublication = async (req, res) => {\r\n-    try {\r\n-\r\n-        const userId = req.user.userid\r\n-\r\n-        const {\r\n-            title,\r\n-            description,\r\n-            depart,\r\n-            destination,\r\n-            capacity,\r\n-            scheduledDate\r\n-        } = req.body;\r\n-\r\n-        // return res.json(req.file)\r\n-\r\n-        // return res.json({body: req.body });\r\n-\r\n-        var data = [];\r\n-\r\n-        if (req.file) {\r\n-            const file = req.file.filename;\r\n-\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                file,\r\n-                userId\r\n-            ]\r\n-        } else {\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                userId\r\n-            ]\r\n-        }\r\n-\r\n-        // return res.json(data);\r\n-\r\n-        // create a new offer\r\n-        const offer = await createOffer(data);\r\n-\r\n-        if (offer) {\r\n-            return res.status(200).json({ user: offer });\r\n-        } else {\r\n-            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-\r\n-// home page function to show offer\r\n-\r\n-export const getHomePageOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-\r\n-        const result = await getHomepageOffers(userId);\r\n-\r\n-        if(!result[0]) return res.status(200).json({offers: {}})\r\n-\r\n-        return res.status(200).json({offers: result});\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// suggestion offer, show the 10 latest offers available\r\n-\r\n-export const suggestionOffers = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-        const result = await latestOffers(userId);\r\n-\r\n-        if (!result) return result.json({ error: \"No offer availaible\" })\r\n-\r\n-        return res.status(200).json({ suggestions: result });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all offer for an user in his account page\r\n-\r\n-export const allOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userid;\r\n-    try {\r\n-\r\n-        const allOffers = await getAllOfferById(userId);\r\n-\r\n-        console.log(\"AllOffersBack: \" + allOffers)\r\n-\r\n-        if(!allOffers.rows[0]) return res.status(200).json({allOffers: {}})\r\n-\r\n-        return res.status(200).json({ all: allOffers });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-\r\n-}\r\n-\r\n-// delete offer by offerId\r\n-\r\n-export const deleteOfferForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await deleteOfferById(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-//update an offer\r\n-\r\n-export const updateOfferForUser = async (req, res) => {\r\n-    try {\r\n-\r\n-        const offerId = req.params.offerId;\r\n-        // use a key table for obtaining the data in the request\r\n-\r\n-        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n-        const formData = {};\r\n-        keys.map(key => {\r\n-            let value = req.body[key];\r\n-\r\n-            // verify if the imgUrl is not empty\r\n-            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n-\r\n-            formData[key] = value;\r\n-        });\r\n-\r\n-        formData.offerId = offerId;\r\n-        // create a table with this object\r\n-        const data = Object.values(formData);\r\n-        // create a new offer\r\n-        const result = await updateOffer(data);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-\r\n-\r\n-    } catch (error) {\r\n-\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-//set unavailable the user offer\r\n-\r\n-export const setUnavailableOfferForUser = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await setunavailableOffer(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all available offers for an user in his account page (filter function)\r\n-\r\n-export const availableOfferForUser = async (req, res) => {\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allAvailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all unavailable offers (filter function in account page)\r\n-\r\n-export const unavailableOfferForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allUnavailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// filter function to get ongoings offer for the user\r\n-\r\n-export const ongoingOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await ongoingOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// expires offer for the user to show in his account page and for the filter in this page\r\n-export const expiredOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await expiredOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// function to handle offer page after click on the notification\r\n-\r\n-export const handleOfferAfterNotifClick = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-        const result = await getOfferByOfferId(offerId);\r\n-\r\n-        return res.status(200).json(result);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-// export default {\r\n-//     newPublication,\r\n-//     getHomePageOffersForUser,\r\n-//     suggestionOffers,\r\n-//     allOffersForUser,\r\n-//     deleteOfferForUser,\r\n-//     updateOfferForUser,\r\n-//     setUnavailableOfferForUser,\r\n-//     availableOfferForUser,\r\n-//     unavailableOfferForUser,\r\n-//     ongoingOffersForUser,\r\n-//     expiredOffersForUser,\r\n-\r\n-// };\n-import {\r\n-    createOffer,\r\n-    getAllOfferById,\r\n-    deleteOfferById,\r\n-    updateOffer,\r\n-    setunavailableOffer,\r\n-    allAvailableOffer,\r\n-    allUnavailableOffer,\r\n-    ongoingOffer,\r\n-    expiredOffer,\r\n-    latestOffers,\r\n-    getHomepageOffers,\r\n-    getOfferByOfferId\r\n-} from '../models/offreModel.js';\r\n-\r\n-// handle the offer publication and register the offer for a user in the profile page\r\n-\r\n-export const newPublication = async (req, res) => {\r\n-    try {\r\n-\r\n-        const userId = req.user.userid\r\n-\r\n-        const {\r\n-            title,\r\n-            description,\r\n-            depart,\r\n-            destination,\r\n-            capacity,\r\n-            scheduledDate\r\n-        } = req.body;\r\n-\r\n-        // return res.json(req.file)\r\n-\r\n-        // return res.json({body: req.body });\r\n-\r\n-        var data = [];\r\n-\r\n-        if (req.file) {\r\n-            const file = req.file.filename;\r\n-\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                file,\r\n-                userId\r\n-            ]\r\n-        } else {\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                userId\r\n-            ]\r\n-        }\r\n-\r\n-        // return res.json(data);\r\n-\r\n-        // create a new offer\r\n-        const offer = await createOffer(data);\r\n-\r\n-        if (offer) {\r\n-            return res.status(200).json({ user: offer });\r\n-        } else {\r\n-            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-\r\n-// home page function to show offer\r\n-\r\n-export const getHomePageOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-\r\n-        const result = await getHomepageOffers(userId);\r\n-\r\n-        if(!result[0]) return res.status(200).json({offers: {}})\r\n-\r\n-        return res.status(200).json({offers: result});\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// suggestion offer, show the 10 latest offers available\r\n-\r\n-export const suggestionOffers = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-        const result = await latestOffers(userId);\r\n-\r\n-        if (!result) return result.json({ error: \"No offer availaible\" })\r\n-\r\n-        return res.status(200).json({ suggestions: result });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all offer for an user in his account page\r\n-\r\n-export const allOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userid;\r\n-    try {\r\n-\r\n-        const allOffers = await getAllOfferById(userId);\r\n-\r\n-        console.log(\"AllOffersBack\"allOffers)\r\n-\r\n-        if(!allOffers.rows[0]) return res.status(200).json({allOffers: {}})\r\n-\r\n-        return res.status(200).json({ allOffers });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-\r\n-}\r\n-\r\n-// delete offer by offerId\r\n-\r\n-export const deleteOfferForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await deleteOfferById(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-//update an offer\r\n-\r\n-export const updateOfferForUser = async (req, res) => {\r\n-    try {\r\n-\r\n-        const offerId = req.params.offerId;\r\n-        // use a key table for obtaining the data in the request\r\n-\r\n-        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n-        const formData = {};\r\n-        keys.map(key => {\r\n-            let value = req.body[key];\r\n-\r\n-            // verify if the imgUrl is not empty\r\n-            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n-\r\n-            formData[key] = value;\r\n-        });\r\n-\r\n-        formData.offerId = offerId;\r\n-        // create a table with this object\r\n-        const data = Object.values(formData);\r\n-        // create a new offer\r\n-        const result = await updateOffer(data);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-\r\n-\r\n-    } catch (error) {\r\n-\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-//set unavailable the user offer\r\n-\r\n-export const setUnavailableOfferForUser = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await setunavailableOffer(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all available offers for an user in his account page (filter function)\r\n-\r\n-export const availableOfferForUser = async (req, res) => {\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allAvailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all unavailable offers (filter function in account page)\r\n-\r\n-export const unavailableOfferForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allUnavailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// filter function to get ongoings offer for the user\r\n-\r\n-export const ongoingOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await ongoingOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// expires offer for the user to show in his account page and for the filter in this page\r\n-export const expiredOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await expiredOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// function to handle offer page after click on the notification\r\n-\r\n-export const handleOfferAfterNotifClick = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-        const result = await getOfferByOfferId(offerId);\r\n-\r\n-        return res.status(200).json(result);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-// export default {\r\n-//     newPublication,\r\n-//     getHomePageOffersForUser,\r\n-//     suggestionOffers,\r\n-//     allOffersForUser,\r\n-//     deleteOfferForUser,\r\n-//     updateOfferForUser,\r\n-//     setUnavailableOfferForUser,\r\n-//     availableOfferForUser,\r\n-//     unavailableOfferForUser,\r\n-//     ongoingOffersForUser,\r\n-//     expiredOffersForUser,\r\n-\r\n-// };\n-import {\r\n-    createOffer,\r\n-    getAllOfferById,\r\n-    deleteOfferById,\r\n-    updateOffer,\r\n-    setunavailableOffer,\r\n-    allAvailableOffer,\r\n-    allUnavailableOffer,\r\n-    ongoingOffer,\r\n-    expiredOffer,\r\n-    latestOffers,\r\n-    getHomepageOffers,\r\n-    getOfferByOfferId\r\n-} from '../models/offreModel.js';\r\n-\r\n-// handle the offer publication and register the offer for a user in the profile page\r\n-\r\n-export const newPublication = async (req, res) => {\r\n-    try {\r\n-\r\n-        const userId = req.user.userid\r\n-\r\n-        const {\r\n-            title,\r\n-            description,\r\n-            depart,\r\n-            destination,\r\n-            capacity,\r\n-            scheduledDate\r\n-        } = req.body;\r\n-\r\n-        // return res.json(req.file)\r\n-\r\n-        // return res.json({body: req.body });\r\n-\r\n-        var data = [];\r\n-\r\n-        if (req.file) {\r\n-            const file = req.file.filename;\r\n-\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                file,\r\n-                userId\r\n-            ]\r\n-        } else {\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                userId\r\n-            ]\r\n-        }\r\n-\r\n-        // return res.json(data);\r\n-\r\n-        // create a new offer\r\n-        const offer = await createOffer(data);\r\n-\r\n-        if (offer) {\r\n-            return res.status(200).json({ user: offer });\r\n-        } else {\r\n-            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-\r\n-// home page function to show offer\r\n-\r\n-export const getHomePageOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-\r\n-        const result = await getHomepageOffers(userId);\r\n-\r\n-        if(!result[0]) return res.status(200).json({offers: {}})\r\n-\r\n-        return res.status(200).json({offers: result});\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// suggestion offer, show the 10 latest offers available\r\n-\r\n-export const suggestionOffers = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-        const result = await latestOffers(userId);\r\n-\r\n-        if (!result) return result.json({ error: \"No offer availaible\" })\r\n-\r\n-        return res.status(200).json({ suggestions: result });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all offer for an user in his account page\r\n-\r\n-export const allOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userid;\r\n-    try {\r\n-\r\n-        const allOffers = await getAllOfferById(userId);\r\n-\r\n-        console.log(allOffers)\r\n-\r\n-        if(!allOffers.rows[0]) return res.status(200).json({allOffers: {}})\r\n-\r\n-        return res.status(200).json({ allOffers });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-\r\n-}\r\n-\r\n-// delete offer by offerId\r\n-\r\n-export const deleteOfferForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await deleteOfferById(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-//update an offer\r\n-\r\n-export const updateOfferForUser = async (req, res) => {\r\n-    try {\r\n-\r\n-        const offerId = req.params.offerId;\r\n-        // use a key table for obtaining the data in the request\r\n-\r\n-        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n-        const formData = {};\r\n-        keys.map(key => {\r\n-            let value = req.body[key];\r\n-\r\n-            // verify if the imgUrl is not empty\r\n-            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n-\r\n-            formData[key] = value;\r\n-        });\r\n-\r\n-        formData.offerId = offerId;\r\n-        // create a table with this object\r\n-        const data = Object.values(formData);\r\n-        // create a new offer\r\n-        const result = await updateOffer(data);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-\r\n-\r\n-    } catch (error) {\r\n-\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-//set unavailable the user offer\r\n-\r\n-export const setUnavailableOfferForUser = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await setunavailableOffer(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all available offers for an user in his account page (filter function)\r\n-\r\n-export const availableOfferForUser = async (req, res) => {\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allAvailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all unavailable offers (filter function in account page)\r\n-\r\n-export const unavailableOfferForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allUnavailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// filter function to get ongoings offer for the user\r\n-\r\n-export const ongoingOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await ongoingOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// expires offer for the user to show in his account page and for the filter in this page\r\n-export const expiredOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await expiredOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// function to handle offer page after click on the notification\r\n-\r\n-export const handleOfferAfterNotifClick = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-        const result = await getOfferByOfferId(offerId);\r\n-\r\n-        return res.status(200).json(result);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-// export default {\r\n-//     newPublication,\r\n-//     getHomePageOffersForUser,\r\n-//     suggestionOffers,\r\n-//     allOffersForUser,\r\n-//     deleteOfferForUser,\r\n-//     updateOfferForUser,\r\n-//     setUnavailableOfferForUser,\r\n-//     availableOfferForUser,\r\n-//     unavailableOfferForUser,\r\n-//     ongoingOffersForUser,\r\n-//     expiredOffersForUser,\r\n-\r\n // };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722246882180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -285,9 +285,9 @@\n \r\n         return res.status(200).json(result);\r\n \r\n     } catch (error) {\r\n-        console.error(error);\r\n+        // console.error(error);\r\n         res.status(500).json({ error: error.message });\r\n \r\n     }\r\n }\r\n"
                },
                {
                    "date": 1722246890479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,325 @@\n+import {\r\n+    createOffer,\r\n+    getAllOfferById,\r\n+    deleteOfferById,\r\n+    updateOffer,\r\n+    setunavailableOffer,\r\n+    allAvailableOffer,\r\n+    allUnavailableOffer,\r\n+    ongoingOffer,\r\n+    expiredOffer,\r\n+    latestOffers,\r\n+    getHomepageOffers,\r\n+    getOfferByOfferId\r\n+} from '../models/offreModel.js';\r\n+\r\n+// handle the offer publication and register the offer for a user in the profile page\r\n+\r\n+export const newPublication = async (req, res) => {\r\n+    try {\r\n+\r\n+        const userId = req.user.userid\r\n+\r\n+        const {\r\n+            title,\r\n+            description,\r\n+            depart,\r\n+            destination,\r\n+            capacity,\r\n+            scheduledDate\r\n+        } = req.body;\r\n+\r\n+        // return res.json(req.file)\r\n+\r\n+        // return res.json({body: req.body });\r\n+\r\n+        var data = [];\r\n+\r\n+        if (req.file) {\r\n+            const file = req.file.filename;\r\n+\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                file,\r\n+                userId\r\n+            ]\r\n+        } else {\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                userId\r\n+            ]\r\n+        }\r\n+\r\n+        // return res.json(data);\r\n+\r\n+        // create a new offer\r\n+        const offer = await createOffer(data);\r\n+\r\n+        if (offer) {\r\n+            return res.status(200).json({ user: offer });\r\n+        } else {\r\n+            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+\r\n+// home page function to show offer\r\n+\r\n+export const getHomePageOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+\r\n+        const result = await getHomepageOffers(userId);\r\n+\r\n+        if(!result[0]) return res.status(200).json({offers: {}})\r\n+\r\n+        return res.status(200).json({offers: result});\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// suggestion offer, show the 10 latest offers available\r\n+\r\n+export const suggestionOffers = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+        const result = await latestOffers(userId);\r\n+\r\n+        if (!result) return result.json({ error: \"No offer availaible\" })\r\n+\r\n+        return res.status(200).json({ suggestions: result });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all offer for an user in his account page\r\n+\r\n+export const allOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userid;\r\n+    try {\r\n+\r\n+        const allOffers = await getAllOfferById(userId);\r\n+\r\n+        // console.log(\"AllOffersBack: \" + allOffers)\r\n+\r\n+        if(!allOffers.rows[0]) return res.status(200).json({all: {}})\r\n+\r\n+        return res.status(200).json({ all: allOffers });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+\r\n+}\r\n+\r\n+// delete offer by offerId\r\n+\r\n+export const deleteOfferForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await deleteOfferById(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+//update an offer\r\n+\r\n+export const updateOfferForUser = async (req, res) => {\r\n+    try {\r\n+\r\n+        const offerId = req.params.offerId;\r\n+        // use a key table for obtaining the data in the request\r\n+\r\n+        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n+        const formData = {};\r\n+        keys.map(key => {\r\n+            let value = req.body[key];\r\n+\r\n+            // verify if the imgUrl is not empty\r\n+            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n+\r\n+            formData[key] = value;\r\n+        });\r\n+\r\n+        formData.offerId = offerId;\r\n+        // create a table with this object\r\n+        const data = Object.values(formData);\r\n+        // create a new offer\r\n+        const result = await updateOffer(data);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+\r\n+\r\n+    } catch (error) {\r\n+\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+//set unavailable the user offer\r\n+\r\n+export const setUnavailableOfferForUser = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await setunavailableOffer(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all available offers for an user in his account page (filter function)\r\n+\r\n+export const availableOfferForUser = async (req, res) => {\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allAvailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all unavailable offers (filter function in account page)\r\n+\r\n+export const unavailableOfferForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allUnavailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// filter function to get ongoings offer for the user\r\n+\r\n+export const ongoingOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await ongoingOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// expires offer for the user to show in his account page and for the filter in this page\r\n+export const expiredOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await expiredOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// function to handle offer page after click on the notification\r\n+\r\n+export const handleOfferAfterNotifClick = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+        const result = await getOfferByOfferId(offerId);\r\n+\r\n+        return res.status(200).json(result);\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+// export default {\r\n+//     newPublication,\r\n+//     getHomePageOffersForUser,\r\n+//     suggestionOffers,\r\n+//     allOffersForUser,\r\n+//     deleteOfferForUser,\r\n+//     updateOfferForUser,\r\n+//     setUnavailableOfferForUser,\r\n+//     availableOfferForUser,\r\n+//     unavailableOfferForUser,\r\n+//     ongoingOffersForUser,\r\n+//     expiredOffersForUser,\r\n+\r\n+// };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722246898486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,325 @@\n+import {\r\n+    createOffer,\r\n+    getAllOfferById,\r\n+    deleteOfferById,\r\n+    updateOffer,\r\n+    setunavailableOffer,\r\n+    allAvailableOffer,\r\n+    allUnavailableOffer,\r\n+    ongoingOffer,\r\n+    expiredOffer,\r\n+    latestOffers,\r\n+    getHomepageOffers,\r\n+    getOfferByOfferId\r\n+} from '../models/offreModel.js';\r\n+\r\n+// handle the offer publication and register the offer for a user in the profile page\r\n+\r\n+export const newPublication = async (req, res) => {\r\n+    try {\r\n+\r\n+        const userId = req.user.userid\r\n+\r\n+        const {\r\n+            title,\r\n+            description,\r\n+            depart,\r\n+            destination,\r\n+            capacity,\r\n+            scheduledDate\r\n+        } = req.body;\r\n+\r\n+        // return res.json(req.file)\r\n+\r\n+        // return res.json({body: req.body });\r\n+\r\n+        var data = [];\r\n+\r\n+        if (req.file) {\r\n+            const file = req.file.filename;\r\n+\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                file,\r\n+                userId\r\n+            ]\r\n+        } else {\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                userId\r\n+            ]\r\n+        }\r\n+\r\n+        // return res.json(data);\r\n+\r\n+        // create a new offer\r\n+        const offer = await createOffer(data);\r\n+\r\n+        if (offer) {\r\n+            return res.status(200).json({ user: offer });\r\n+        } else {\r\n+            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+\r\n+// home page function to show offer\r\n+\r\n+export const getHomePageOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+\r\n+        const result = await getHomepageOffers(userId);\r\n+\r\n+        if(!result[0]) return res.status(200).json({offers: {}})\r\n+\r\n+        return res.status(200).json({offers: result});\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// suggestion offer, show the 10 latest offers available\r\n+\r\n+export const suggestionOffers = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+        const result = await latestOffers(userId);\r\n+\r\n+        if (!result) return result.json({ error: \"No offer availaible\" })\r\n+\r\n+        return res.status(200).json({ suggestions: result });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all offer for an user in his account page\r\n+\r\n+export const allOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userid;\r\n+    try {\r\n+\r\n+        const allOffers = await getAllOfferById(userId);\r\n+\r\n+        // console.log(\"AllOffersBack: \" + allOffers)\r\n+\r\n+        if(!allOffers.rows[0]) return res.status(200).json({all: {}})\r\n+\r\n+        return res.status(200).json({ all: allOffers });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+\r\n+}\r\n+\r\n+// delete offer by offerId\r\n+\r\n+export const deleteOfferForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await deleteOfferById(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+//update an offer\r\n+\r\n+export const updateOfferForUser = async (req, res) => {\r\n+    try {\r\n+\r\n+        const offerId = req.params.offerId;\r\n+        // use a key table for obtaining the data in the request\r\n+\r\n+        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n+        const formData = {};\r\n+        keys.map(key => {\r\n+            let value = req.body[key];\r\n+\r\n+            // verify if the imgUrl is not empty\r\n+            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n+\r\n+            formData[key] = value;\r\n+        });\r\n+\r\n+        formData.offerId = offerId;\r\n+        // create a table with this object\r\n+        const data = Object.values(formData);\r\n+        // create a new offer\r\n+        const result = await updateOffer(data);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+\r\n+\r\n+    } catch (error) {\r\n+\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+//set unavailable the user offer\r\n+\r\n+export const setUnavailableOfferForUser = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await setunavailableOffer(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all available offers for an user in his account page (filter function)\r\n+\r\n+export const availableOfferForUser = async (req, res) => {\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allAvailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all unavailable offers (filter function in account page)\r\n+\r\n+export const unavailableOfferForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allUnavailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// filter function to get ongoings offer for the user\r\n+\r\n+export const ongoingOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await ongoingOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// expires offer for the user to show in his account page and for the filter in this page\r\n+export const expiredOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await expiredOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// function to handle offer page after click on the notification\r\n+\r\n+export const handleOfferAfterNotifClick = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+        const result = await getOfferByOfferId(offerId);\r\n+\r\n+        return res.status(200).json(result);\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+// export default {\r\n+//     newPublication,\r\n+//     getHomePageOffersForUser,\r\n+//     suggestionOffers,\r\n+//     allOffersForUser,\r\n+//     deleteOfferForUser,\r\n+//     updateOfferForUser,\r\n+//     setUnavailableOfferForUser,\r\n+//     availableOfferForUser,\r\n+//     unavailableOfferForUser,\r\n+//     ongoingOffersForUser,\r\n+//     expiredOffersForUser,\r\n+\r\n+// };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722246905925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,325 @@\n+import {\r\n+    createOffer,\r\n+    getAllOfferById,\r\n+    deleteOfferById,\r\n+    updateOffer,\r\n+    setunavailableOffer,\r\n+    allAvailableOffer,\r\n+    allUnavailableOffer,\r\n+    ongoingOffer,\r\n+    expiredOffer,\r\n+    latestOffers,\r\n+    getHomepageOffers,\r\n+    getOfferByOfferId\r\n+} from '../models/offreModel.js';\r\n+\r\n+// handle the offer publication and register the offer for a user in the profile page\r\n+\r\n+export const newPublication = async (req, res) => {\r\n+    try {\r\n+\r\n+        const userId = req.user.userid\r\n+\r\n+        const {\r\n+            title,\r\n+            description,\r\n+            depart,\r\n+            destination,\r\n+            capacity,\r\n+            scheduledDate\r\n+        } = req.body;\r\n+\r\n+        // return res.json(req.file)\r\n+\r\n+        // return res.json({body: req.body });\r\n+\r\n+        var data = [];\r\n+\r\n+        if (req.file) {\r\n+            const file = req.file.filename;\r\n+\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                file,\r\n+                userId\r\n+            ]\r\n+        } else {\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                userId\r\n+            ]\r\n+        }\r\n+\r\n+        // return res.json(data);\r\n+\r\n+        // create a new offer\r\n+        const offer = await createOffer(data);\r\n+\r\n+        if (offer) {\r\n+            return res.status(200).json({ user: offer });\r\n+        } else {\r\n+            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+\r\n+// home page function to show offer\r\n+\r\n+export const getHomePageOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+\r\n+        const result = await getHomepageOffers(userId);\r\n+\r\n+        if(!result[0]) return res.status(200).json({offers: {}})\r\n+\r\n+        return res.status(200).json({offers: result});\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// suggestion offer, show the 10 latest offers available\r\n+\r\n+export const suggestionOffers = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+        const result = await latestOffers(userId);\r\n+\r\n+        if (!result) return result.json({ error: \"No offer availaible\" })\r\n+\r\n+        return res.status(200).json({ suggestions: result });\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all offer for an user in his account page\r\n+\r\n+export const allOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userid;\r\n+    try {\r\n+\r\n+        const allOffers = await getAllOfferById(userId);\r\n+\r\n+        // console.log(\"AllOffersBack: \" + allOffers)\r\n+\r\n+        if(!allOffers.rows[0]) return res.status(200).json({all: {}})\r\n+\r\n+        return res.status(200).json({ all: allOffers });\r\n+\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+\r\n+}\r\n+\r\n+// delete offer by offerId\r\n+\r\n+export const deleteOfferForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await deleteOfferById(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+//update an offer\r\n+\r\n+export const updateOfferForUser = async (req, res) => {\r\n+    try {\r\n+\r\n+        const offerId = req.params.offerId;\r\n+        // use a key table for obtaining the data in the request\r\n+\r\n+        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n+        const formData = {};\r\n+        keys.map(key => {\r\n+            let value = req.body[key];\r\n+\r\n+            // verify if the imgUrl is not empty\r\n+            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n+\r\n+            formData[key] = value;\r\n+        });\r\n+\r\n+        formData.offerId = offerId;\r\n+        // create a table with this object\r\n+        const data = Object.values(formData);\r\n+        // create a new offer\r\n+        const result = await updateOffer(data);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+\r\n+\r\n+    } catch (error) {\r\n+\r\n+        console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+//set unavailable the user offer\r\n+\r\n+export const setUnavailableOfferForUser = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await setunavailableOffer(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all available offers for an user in his account page (filter function)\r\n+\r\n+export const availableOfferForUser = async (req, res) => {\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allAvailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all unavailable offers (filter function in account page)\r\n+\r\n+export const unavailableOfferForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allUnavailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// filter function to get ongoings offer for the user\r\n+\r\n+export const ongoingOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await ongoingOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// expires offer for the user to show in his account page and for the filter in this page\r\n+export const expiredOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await expiredOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// function to handle offer page after click on the notification\r\n+\r\n+export const handleOfferAfterNotifClick = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+        const result = await getOfferByOfferId(offerId);\r\n+\r\n+        return res.status(200).json(result);\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+// export default {\r\n+//     newPublication,\r\n+//     getHomePageOffersForUser,\r\n+//     suggestionOffers,\r\n+//     allOffersForUser,\r\n+//     deleteOfferForUser,\r\n+//     updateOfferForUser,\r\n+//     setUnavailableOfferForUser,\r\n+//     availableOfferForUser,\r\n+//     unavailableOfferForUser,\r\n+//     ongoingOffersForUser,\r\n+//     expiredOffersForUser,\r\n+\r\n+// };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722246914657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -156,9 +156,9 @@\n         } else {\r\n             res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n         }\r\n     } catch (error) {\r\n-        console.error(error);\r\n+        // console.error(error);\r\n         res.status(500).json({ error: error.message });\r\n     }\r\n }\r\n \r\n@@ -195,9 +195,9 @@\n \r\n \r\n     } catch (error) {\r\n \r\n-        console.error(error);\r\n+        // console.error(error);\r\n         res.status(500).json({ error: error.message });\r\n \r\n     }\r\n \r\n@@ -321,980 +321,5 @@\n //     unavailableOfferForUser,\r\n //     ongoingOffersForUser,\r\n //     expiredOffersForUser,\r\n \r\n-// };\n-import {\r\n-    createOffer,\r\n-    getAllOfferById,\r\n-    deleteOfferById,\r\n-    updateOffer,\r\n-    setunavailableOffer,\r\n-    allAvailableOffer,\r\n-    allUnavailableOffer,\r\n-    ongoingOffer,\r\n-    expiredOffer,\r\n-    latestOffers,\r\n-    getHomepageOffers,\r\n-    getOfferByOfferId\r\n-} from '../models/offreModel.js';\r\n-\r\n-// handle the offer publication and register the offer for a user in the profile page\r\n-\r\n-export const newPublication = async (req, res) => {\r\n-    try {\r\n-\r\n-        const userId = req.user.userid\r\n-\r\n-        const {\r\n-            title,\r\n-            description,\r\n-            depart,\r\n-            destination,\r\n-            capacity,\r\n-            scheduledDate\r\n-        } = req.body;\r\n-\r\n-        // return res.json(req.file)\r\n-\r\n-        // return res.json({body: req.body });\r\n-\r\n-        var data = [];\r\n-\r\n-        if (req.file) {\r\n-            const file = req.file.filename;\r\n-\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                file,\r\n-                userId\r\n-            ]\r\n-        } else {\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                userId\r\n-            ]\r\n-        }\r\n-\r\n-        // return res.json(data);\r\n-\r\n-        // create a new offer\r\n-        const offer = await createOffer(data);\r\n-\r\n-        if (offer) {\r\n-            return res.status(200).json({ user: offer });\r\n-        } else {\r\n-            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-\r\n-// home page function to show offer\r\n-\r\n-export const getHomePageOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-\r\n-        const result = await getHomepageOffers(userId);\r\n-\r\n-        if(!result[0]) return res.status(200).json({offers: {}})\r\n-\r\n-        return res.status(200).json({offers: result});\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// suggestion offer, show the 10 latest offers available\r\n-\r\n-export const suggestionOffers = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-        const result = await latestOffers(userId);\r\n-\r\n-        if (!result) return result.json({ error: \"No offer availaible\" })\r\n-\r\n-        return res.status(200).json({ suggestions: result });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all offer for an user in his account page\r\n-\r\n-export const allOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userid;\r\n-    try {\r\n-\r\n-        const allOffers = await getAllOfferById(userId);\r\n-\r\n-        // console.log(\"AllOffersBack: \" + allOffers)\r\n-\r\n-        if(!allOffers.rows[0]) return res.status(200).json({all: {}})\r\n-\r\n-        return res.status(200).json({ all: allOffers });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-\r\n-}\r\n-\r\n-// delete offer by offerId\r\n-\r\n-export const deleteOfferForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await deleteOfferById(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-//update an offer\r\n-\r\n-export const updateOfferForUser = async (req, res) => {\r\n-    try {\r\n-\r\n-        const offerId = req.params.offerId;\r\n-        // use a key table for obtaining the data in the request\r\n-\r\n-        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n-        const formData = {};\r\n-        keys.map(key => {\r\n-            let value = req.body[key];\r\n-\r\n-            // verify if the imgUrl is not empty\r\n-            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n-\r\n-            formData[key] = value;\r\n-        });\r\n-\r\n-        formData.offerId = offerId;\r\n-        // create a table with this object\r\n-        const data = Object.values(formData);\r\n-        // create a new offer\r\n-        const result = await updateOffer(data);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-\r\n-\r\n-    } catch (error) {\r\n-\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-//set unavailable the user offer\r\n-\r\n-export const setUnavailableOfferForUser = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await setunavailableOffer(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all available offers for an user in his account page (filter function)\r\n-\r\n-export const availableOfferForUser = async (req, res) => {\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allAvailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all unavailable offers (filter function in account page)\r\n-\r\n-export const unavailableOfferForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allUnavailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// filter function to get ongoings offer for the user\r\n-\r\n-export const ongoingOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await ongoingOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// expires offer for the user to show in his account page and for the filter in this page\r\n-export const expiredOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await expiredOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// function to handle offer page after click on the notification\r\n-\r\n-export const handleOfferAfterNotifClick = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-        const result = await getOfferByOfferId(offerId);\r\n-\r\n-        return res.status(200).json(result);\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-// export default {\r\n-//     newPublication,\r\n-//     getHomePageOffersForUser,\r\n-//     suggestionOffers,\r\n-//     allOffersForUser,\r\n-//     deleteOfferForUser,\r\n-//     updateOfferForUser,\r\n-//     setUnavailableOfferForUser,\r\n-//     availableOfferForUser,\r\n-//     unavailableOfferForUser,\r\n-//     ongoingOffersForUser,\r\n-//     expiredOffersForUser,\r\n-\r\n-// };\n-import {\r\n-    createOffer,\r\n-    getAllOfferById,\r\n-    deleteOfferById,\r\n-    updateOffer,\r\n-    setunavailableOffer,\r\n-    allAvailableOffer,\r\n-    allUnavailableOffer,\r\n-    ongoingOffer,\r\n-    expiredOffer,\r\n-    latestOffers,\r\n-    getHomepageOffers,\r\n-    getOfferByOfferId\r\n-} from '../models/offreModel.js';\r\n-\r\n-// handle the offer publication and register the offer for a user in the profile page\r\n-\r\n-export const newPublication = async (req, res) => {\r\n-    try {\r\n-\r\n-        const userId = req.user.userid\r\n-\r\n-        const {\r\n-            title,\r\n-            description,\r\n-            depart,\r\n-            destination,\r\n-            capacity,\r\n-            scheduledDate\r\n-        } = req.body;\r\n-\r\n-        // return res.json(req.file)\r\n-\r\n-        // return res.json({body: req.body });\r\n-\r\n-        var data = [];\r\n-\r\n-        if (req.file) {\r\n-            const file = req.file.filename;\r\n-\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                file,\r\n-                userId\r\n-            ]\r\n-        } else {\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                userId\r\n-            ]\r\n-        }\r\n-\r\n-        // return res.json(data);\r\n-\r\n-        // create a new offer\r\n-        const offer = await createOffer(data);\r\n-\r\n-        if (offer) {\r\n-            return res.status(200).json({ user: offer });\r\n-        } else {\r\n-            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-\r\n-// home page function to show offer\r\n-\r\n-export const getHomePageOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-\r\n-        const result = await getHomepageOffers(userId);\r\n-\r\n-        if(!result[0]) return res.status(200).json({offers: {}})\r\n-\r\n-        return res.status(200).json({offers: result});\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// suggestion offer, show the 10 latest offers available\r\n-\r\n-export const suggestionOffers = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-        const result = await latestOffers(userId);\r\n-\r\n-        if (!result) return result.json({ error: \"No offer availaible\" })\r\n-\r\n-        return res.status(200).json({ suggestions: result });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all offer for an user in his account page\r\n-\r\n-export const allOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userid;\r\n-    try {\r\n-\r\n-        const allOffers = await getAllOfferById(userId);\r\n-\r\n-        // console.log(\"AllOffersBack: \" + allOffers)\r\n-\r\n-        if(!allOffers.rows[0]) return res.status(200).json({all: {}})\r\n-\r\n-        return res.status(200).json({ all: allOffers });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-\r\n-}\r\n-\r\n-// delete offer by offerId\r\n-\r\n-export const deleteOfferForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await deleteOfferById(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-//update an offer\r\n-\r\n-export const updateOfferForUser = async (req, res) => {\r\n-    try {\r\n-\r\n-        const offerId = req.params.offerId;\r\n-        // use a key table for obtaining the data in the request\r\n-\r\n-        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n-        const formData = {};\r\n-        keys.map(key => {\r\n-            let value = req.body[key];\r\n-\r\n-            // verify if the imgUrl is not empty\r\n-            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n-\r\n-            formData[key] = value;\r\n-        });\r\n-\r\n-        formData.offerId = offerId;\r\n-        // create a table with this object\r\n-        const data = Object.values(formData);\r\n-        // create a new offer\r\n-        const result = await updateOffer(data);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-\r\n-\r\n-    } catch (error) {\r\n-\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-//set unavailable the user offer\r\n-\r\n-export const setUnavailableOfferForUser = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await setunavailableOffer(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all available offers for an user in his account page (filter function)\r\n-\r\n-export const availableOfferForUser = async (req, res) => {\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allAvailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all unavailable offers (filter function in account page)\r\n-\r\n-export const unavailableOfferForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allUnavailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// filter function to get ongoings offer for the user\r\n-\r\n-export const ongoingOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await ongoingOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// expires offer for the user to show in his account page and for the filter in this page\r\n-export const expiredOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await expiredOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// function to handle offer page after click on the notification\r\n-\r\n-export const handleOfferAfterNotifClick = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-        const result = await getOfferByOfferId(offerId);\r\n-\r\n-        return res.status(200).json(result);\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-// export default {\r\n-//     newPublication,\r\n-//     getHomePageOffersForUser,\r\n-//     suggestionOffers,\r\n-//     allOffersForUser,\r\n-//     deleteOfferForUser,\r\n-//     updateOfferForUser,\r\n-//     setUnavailableOfferForUser,\r\n-//     availableOfferForUser,\r\n-//     unavailableOfferForUser,\r\n-//     ongoingOffersForUser,\r\n-//     expiredOffersForUser,\r\n-\r\n-// };\n-import {\r\n-    createOffer,\r\n-    getAllOfferById,\r\n-    deleteOfferById,\r\n-    updateOffer,\r\n-    setunavailableOffer,\r\n-    allAvailableOffer,\r\n-    allUnavailableOffer,\r\n-    ongoingOffer,\r\n-    expiredOffer,\r\n-    latestOffers,\r\n-    getHomepageOffers,\r\n-    getOfferByOfferId\r\n-} from '../models/offreModel.js';\r\n-\r\n-// handle the offer publication and register the offer for a user in the profile page\r\n-\r\n-export const newPublication = async (req, res) => {\r\n-    try {\r\n-\r\n-        const userId = req.user.userid\r\n-\r\n-        const {\r\n-            title,\r\n-            description,\r\n-            depart,\r\n-            destination,\r\n-            capacity,\r\n-            scheduledDate\r\n-        } = req.body;\r\n-\r\n-        // return res.json(req.file)\r\n-\r\n-        // return res.json({body: req.body });\r\n-\r\n-        var data = [];\r\n-\r\n-        if (req.file) {\r\n-            const file = req.file.filename;\r\n-\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                file,\r\n-                userId\r\n-            ]\r\n-        } else {\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                userId\r\n-            ]\r\n-        }\r\n-\r\n-        // return res.json(data);\r\n-\r\n-        // create a new offer\r\n-        const offer = await createOffer(data);\r\n-\r\n-        if (offer) {\r\n-            return res.status(200).json({ user: offer });\r\n-        } else {\r\n-            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-\r\n-// home page function to show offer\r\n-\r\n-export const getHomePageOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-\r\n-        const result = await getHomepageOffers(userId);\r\n-\r\n-        if(!result[0]) return res.status(200).json({offers: {}})\r\n-\r\n-        return res.status(200).json({offers: result});\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// suggestion offer, show the 10 latest offers available\r\n-\r\n-export const suggestionOffers = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-        const result = await latestOffers(userId);\r\n-\r\n-        if (!result) return result.json({ error: \"No offer availaible\" })\r\n-\r\n-        return res.status(200).json({ suggestions: result });\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all offer for an user in his account page\r\n-\r\n-export const allOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userid;\r\n-    try {\r\n-\r\n-        const allOffers = await getAllOfferById(userId);\r\n-\r\n-        // console.log(\"AllOffersBack: \" + allOffers)\r\n-\r\n-        if(!allOffers.rows[0]) return res.status(200).json({all: {}})\r\n-\r\n-        return res.status(200).json({ all: allOffers });\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-\r\n-}\r\n-\r\n-// delete offer by offerId\r\n-\r\n-export const deleteOfferForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await deleteOfferById(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-//update an offer\r\n-\r\n-export const updateOfferForUser = async (req, res) => {\r\n-    try {\r\n-\r\n-        const offerId = req.params.offerId;\r\n-        // use a key table for obtaining the data in the request\r\n-\r\n-        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n-        const formData = {};\r\n-        keys.map(key => {\r\n-            let value = req.body[key];\r\n-\r\n-            // verify if the imgUrl is not empty\r\n-            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n-\r\n-            formData[key] = value;\r\n-        });\r\n-\r\n-        formData.offerId = offerId;\r\n-        // create a table with this object\r\n-        const data = Object.values(formData);\r\n-        // create a new offer\r\n-        const result = await updateOffer(data);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-\r\n-\r\n-    } catch (error) {\r\n-\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-//set unavailable the user offer\r\n-\r\n-export const setUnavailableOfferForUser = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await setunavailableOffer(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all available offers for an user in his account page (filter function)\r\n-\r\n-export const availableOfferForUser = async (req, res) => {\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allAvailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all unavailable offers (filter function in account page)\r\n-\r\n-export const unavailableOfferForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allUnavailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// filter function to get ongoings offer for the user\r\n-\r\n-export const ongoingOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await ongoingOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// expires offer for the user to show in his account page and for the filter in this page\r\n-export const expiredOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await expiredOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// function to handle offer page after click on the notification\r\n-\r\n-export const handleOfferAfterNotifClick = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-        const result = await getOfferByOfferId(offerId);\r\n-\r\n-        return res.status(200).json(result);\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-// export default {\r\n-//     newPublication,\r\n-//     getHomePageOffersForUser,\r\n-//     suggestionOffers,\r\n-//     allOffersForUser,\r\n-//     deleteOfferForUser,\r\n-//     updateOfferForUser,\r\n-//     setUnavailableOfferForUser,\r\n-//     availableOfferForUser,\r\n-//     unavailableOfferForUser,\r\n-//     ongoingOffersForUser,\r\n-//     expiredOffersForUser,\r\n-\r\n // };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722246920758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,9 +114,9 @@\n         if (!result) return result.json({ error: \"No offer availaible\" })\r\n \r\n         return res.status(200).json({ suggestions: result });\r\n     } catch (error) {\r\n-        console.error(error);\r\n+        // console.error(error);\r\n         res.status(500).json({ error: error.message });\r\n     }\r\n }\r\n \r\n@@ -135,9 +135,9 @@\n \r\n         return res.status(200).json({ all: allOffers });\r\n \r\n     } catch (error) {\r\n-        console.error(error);\r\n+        // console.error(error);\r\n         res.status(500).json({ error: error.message });\r\n     }\r\n \r\n }\r\n"
                },
                {
                    "date": 1722246926985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,325 @@\n+import {\r\n+    createOffer,\r\n+    getAllOfferById,\r\n+    deleteOfferById,\r\n+    updateOffer,\r\n+    setunavailableOffer,\r\n+    allAvailableOffer,\r\n+    allUnavailableOffer,\r\n+    ongoingOffer,\r\n+    expiredOffer,\r\n+    latestOffers,\r\n+    getHomepageOffers,\r\n+    getOfferByOfferId\r\n+} from '../models/offreModel.js';\r\n+\r\n+// handle the offer publication and register the offer for a user in the profile page\r\n+\r\n+export const newPublication = async (req, res) => {\r\n+    try {\r\n+\r\n+        const userId = req.user.userid\r\n+\r\n+        const {\r\n+            title,\r\n+            description,\r\n+            depart,\r\n+            destination,\r\n+            capacity,\r\n+            scheduledDate\r\n+        } = req.body;\r\n+\r\n+        // return res.json(req.file)\r\n+\r\n+        // return res.json({body: req.body });\r\n+\r\n+        var data = [];\r\n+\r\n+        if (req.file) {\r\n+            const file = req.file.filename;\r\n+\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                file,\r\n+                userId\r\n+            ]\r\n+        } else {\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                userId\r\n+            ]\r\n+        }\r\n+\r\n+        // return res.json(data);\r\n+\r\n+        // create a new offer\r\n+        const offer = await createOffer(data);\r\n+\r\n+        if (offer) {\r\n+            return res.status(200).json({ user: offer });\r\n+        } else {\r\n+            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+\r\n+// home page function to show offer\r\n+\r\n+export const getHomePageOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+\r\n+        const result = await getHomepageOffers(userId);\r\n+\r\n+        if(!result[0]) return res.status(200).json({offers: {}})\r\n+\r\n+        return res.status(200).json({offers: result});\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// suggestion offer, show the 10 latest offers available\r\n+\r\n+export const suggestionOffers = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+        const result = await latestOffers(userId);\r\n+\r\n+        if (!result) return result.json({ error: \"No offer availaible\" })\r\n+\r\n+        return res.status(200).json({ suggestions: result });\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all offer for an user in his account page\r\n+\r\n+export const allOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userid;\r\n+    try {\r\n+\r\n+        const allOffers = await getAllOfferById(userId);\r\n+\r\n+        // console.log(\"AllOffersBack: \" + allOffers)\r\n+\r\n+        if(!allOffers.rows[0]) return res.status(200).json({all: {}})\r\n+\r\n+        return res.status(200).json({ all: allOffers });\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+\r\n+}\r\n+\r\n+// delete offer by offerId\r\n+\r\n+export const deleteOfferForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await deleteOfferById(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+//update an offer\r\n+\r\n+export const updateOfferForUser = async (req, res) => {\r\n+    try {\r\n+\r\n+        const offerId = req.params.offerId;\r\n+        // use a key table for obtaining the data in the request\r\n+\r\n+        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n+        const formData = {};\r\n+        keys.map(key => {\r\n+            let value = req.body[key];\r\n+\r\n+            // verify if the imgUrl is not empty\r\n+            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n+\r\n+            formData[key] = value;\r\n+        });\r\n+\r\n+        formData.offerId = offerId;\r\n+        // create a table with this object\r\n+        const data = Object.values(formData);\r\n+        // create a new offer\r\n+        const result = await updateOffer(data);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+\r\n+\r\n+    } catch (error) {\r\n+\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+//set unavailable the user offer\r\n+\r\n+export const setUnavailableOfferForUser = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await setunavailableOffer(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all available offers for an user in his account page (filter function)\r\n+\r\n+export const availableOfferForUser = async (req, res) => {\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allAvailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all unavailable offers (filter function in account page)\r\n+\r\n+export const unavailableOfferForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allUnavailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// filter function to get ongoings offer for the user\r\n+\r\n+export const ongoingOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await ongoingOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// expires offer for the user to show in his account page and for the filter in this page\r\n+export const expiredOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await expiredOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// function to handle offer page after click on the notification\r\n+\r\n+export const handleOfferAfterNotifClick = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+        const result = await getOfferByOfferId(offerId);\r\n+\r\n+        return res.status(200).json(result);\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+// export default {\r\n+//     newPublication,\r\n+//     getHomePageOffersForUser,\r\n+//     suggestionOffers,\r\n+//     allOffersForUser,\r\n+//     deleteOfferForUser,\r\n+//     updateOfferForUser,\r\n+//     setUnavailableOfferForUser,\r\n+//     availableOfferForUser,\r\n+//     unavailableOfferForUser,\r\n+//     ongoingOffersForUser,\r\n+//     expiredOffersForUser,\r\n+\r\n+// };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722264326000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,8 +124,9 @@\n \r\n export const allOffersForUser = async (req, res) => {\r\n \r\n     const userId = req.user.userid;\r\n+    \r\n     try {\r\n \r\n         const allOffers = await getAllOfferById(userId);\r\n \r\n@@ -321,330 +322,5 @@\n //     unavailableOfferForUser,\r\n //     ongoingOffersForUser,\r\n //     expiredOffersForUser,\r\n \r\n-// };\n-import {\r\n-    createOffer,\r\n-    getAllOfferById,\r\n-    deleteOfferById,\r\n-    updateOffer,\r\n-    setunavailableOffer,\r\n-    allAvailableOffer,\r\n-    allUnavailableOffer,\r\n-    ongoingOffer,\r\n-    expiredOffer,\r\n-    latestOffers,\r\n-    getHomepageOffers,\r\n-    getOfferByOfferId\r\n-} from '../models/offreModel.js';\r\n-\r\n-// handle the offer publication and register the offer for a user in the profile page\r\n-\r\n-export const newPublication = async (req, res) => {\r\n-    try {\r\n-\r\n-        const userId = req.user.userid\r\n-\r\n-        const {\r\n-            title,\r\n-            description,\r\n-            depart,\r\n-            destination,\r\n-            capacity,\r\n-            scheduledDate\r\n-        } = req.body;\r\n-\r\n-        // return res.json(req.file)\r\n-\r\n-        // return res.json({body: req.body });\r\n-\r\n-        var data = [];\r\n-\r\n-        if (req.file) {\r\n-            const file = req.file.filename;\r\n-\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                file,\r\n-                userId\r\n-            ]\r\n-        } else {\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                userId\r\n-            ]\r\n-        }\r\n-\r\n-        // return res.json(data);\r\n-\r\n-        // create a new offer\r\n-        const offer = await createOffer(data);\r\n-\r\n-        if (offer) {\r\n-            return res.status(200).json({ user: offer });\r\n-        } else {\r\n-            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-\r\n-// home page function to show offer\r\n-\r\n-export const getHomePageOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-\r\n-        const result = await getHomepageOffers(userId);\r\n-\r\n-        if(!result[0]) return res.status(200).json({offers: {}})\r\n-\r\n-        return res.status(200).json({offers: result});\r\n-\r\n-    } catch (error) {\r\n-        console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// suggestion offer, show the 10 latest offers available\r\n-\r\n-export const suggestionOffers = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-        const result = await latestOffers(userId);\r\n-\r\n-        if (!result) return result.json({ error: \"No offer availaible\" })\r\n-\r\n-        return res.status(200).json({ suggestions: result });\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all offer for an user in his account page\r\n-\r\n-export const allOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userid;\r\n-    try {\r\n-\r\n-        const allOffers = await getAllOfferById(userId);\r\n-\r\n-        // console.log(\"AllOffersBack: \" + allOffers)\r\n-\r\n-        if(!allOffers.rows[0]) return res.status(200).json({all: {}})\r\n-\r\n-        return res.status(200).json({ all: allOffers });\r\n-\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-\r\n-}\r\n-\r\n-// delete offer by offerId\r\n-\r\n-export const deleteOfferForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await deleteOfferById(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-//update an offer\r\n-\r\n-export const updateOfferForUser = async (req, res) => {\r\n-    try {\r\n-\r\n-        const offerId = req.params.offerId;\r\n-        // use a key table for obtaining the data in the request\r\n-\r\n-        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n-        const formData = {};\r\n-        keys.map(key => {\r\n-            let value = req.body[key];\r\n-\r\n-            // verify if the imgUrl is not empty\r\n-            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n-\r\n-            formData[key] = value;\r\n-        });\r\n-\r\n-        formData.offerId = offerId;\r\n-        // create a table with this object\r\n-        const data = Object.values(formData);\r\n-        // create a new offer\r\n-        const result = await updateOffer(data);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-\r\n-\r\n-    } catch (error) {\r\n-\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-//set unavailable the user offer\r\n-\r\n-export const setUnavailableOfferForUser = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await setunavailableOffer(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all available offers for an user in his account page (filter function)\r\n-\r\n-export const availableOfferForUser = async (req, res) => {\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allAvailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all unavailable offers (filter function in account page)\r\n-\r\n-export const unavailableOfferForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allUnavailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// filter function to get ongoings offer for the user\r\n-\r\n-export const ongoingOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await ongoingOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// expires offer for the user to show in his account page and for the filter in this page\r\n-export const expiredOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await expiredOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// function to handle offer page after click on the notification\r\n-\r\n-export const handleOfferAfterNotifClick = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-        const result = await getOfferByOfferId(offerId);\r\n-\r\n-        return res.status(200).json(result);\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-// export default {\r\n-//     newPublication,\r\n-//     getHomePageOffersForUser,\r\n-//     suggestionOffers,\r\n-//     allOffersForUser,\r\n-//     deleteOfferForUser,\r\n-//     updateOfferForUser,\r\n-//     setUnavailableOfferForUser,\r\n-//     availableOfferForUser,\r\n-//     unavailableOfferForUser,\r\n-//     ongoingOffersForUser,\r\n-//     expiredOffersForUser,\r\n-\r\n // };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722264432715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,326 @@\n+import {\r\n+    createOffer,\r\n+    getAllOfferById,\r\n+    deleteOfferById,\r\n+    updateOffer,\r\n+    setunavailableOffer,\r\n+    allAvailableOffer,\r\n+    allUnavailableOffer,\r\n+    ongoingOffer,\r\n+    expiredOffer,\r\n+    latestOffers,\r\n+    getHomepageOffers,\r\n+    getOfferByOfferId\r\n+} from '../models/offreModel.js';\r\n+\r\n+// handle the offer publication and register the offer for a user in the profile page\r\n+\r\n+export const newPublication = async (req, res) => {\r\n+    try {\r\n+\r\n+        const userId = req.user.userid\r\n+\r\n+        const {\r\n+            title,\r\n+            description,\r\n+            depart,\r\n+            destination,\r\n+            capacity,\r\n+            scheduledDate\r\n+        } = req.body;\r\n+\r\n+        // return res.json(req.file)\r\n+\r\n+        // return res.json({body: req.body });\r\n+\r\n+        var data = [];\r\n+\r\n+        if (req.file) {\r\n+            const file = req.file.filename;\r\n+\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                file,\r\n+                userId\r\n+            ]\r\n+        } else {\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                userId\r\n+            ]\r\n+        }\r\n+\r\n+        // return res.json(data);\r\n+\r\n+        // create a new offer\r\n+        const offer = await createOffer(data);\r\n+\r\n+        if (offer) {\r\n+            return res.status(200).json({ user: offer });\r\n+        } else {\r\n+            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+\r\n+// home page function to show offer\r\n+\r\n+export const getHomePageOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+\r\n+        const result = await getHomepageOffers(userId);\r\n+\r\n+        if(!result[0]) return res.status(200).json({offers: {}})\r\n+\r\n+        return res.status(200).json({offers: result});\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// suggestion offer, show the 10 latest offers available\r\n+\r\n+export const suggestionOffers = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+        const result = await latestOffers(userId);\r\n+\r\n+        if (!result) return result.json({ error: \"No offer availaible\" })\r\n+\r\n+        return res.status(200).json({ suggestions: result });\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all offer for an user in his account page\r\n+\r\n+export const allOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userid;\r\n+    \r\n+    try {\r\n+\r\n+        const allOffers = await getAllOfferById(userId);\r\n+\r\n+        // console.log(\"AllOffersBack: \" + allOffers)\r\n+\r\n+        if(!allOffers.rows[0]) return res.status(200).json({all: {}})\r\n+\r\n+        return res.status(200).json({ all: allOffers });\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+\r\n+}\r\n+\r\n+// delete offer by offerId\r\n+\r\n+export const deleteOfferForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await deleteOfferById(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+//update an offer\r\n+\r\n+export const updateOfferForUser = async (req, res) => {\r\n+    try {\r\n+\r\n+        const offerId = req.params.offerId;\r\n+        // use a key table for obtaining the data in the request\r\n+\r\n+        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n+        const formData = {};\r\n+        keys.map(key => {\r\n+            let value = req.body[key];\r\n+\r\n+            // verify if the imgUrl is not empty\r\n+            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n+\r\n+            formData[key] = value;\r\n+        });\r\n+\r\n+        formData.offerId = offerId;\r\n+        // create a table with this object\r\n+        const data = Object.values(formData);\r\n+        // create a new offer\r\n+        const result = await updateOffer(data);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+\r\n+\r\n+    } catch (error) {\r\n+\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+//set unavailable the user offer\r\n+\r\n+export const setUnavailableOfferForUser = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await setunavailableOffer(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all available offers for an user in his account page (filter function)\r\n+\r\n+export const availableOfferForUser = async (req, res) => {\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allAvailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all unavailable offers (filter function in account page)\r\n+\r\n+export const unavailableOfferForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allUnavailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// filter function to get ongoings offer for the user\r\n+\r\n+export const ongoingOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await ongoingOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// expires offer for the user to show in his account page and for the filter in this page\r\n+export const expiredOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await expiredOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// function to handle offer page after click on the notification\r\n+\r\n+export const handleOfferAfterNotifClick = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+        const result = await getOfferByOfferId(offerId);\r\n+\r\n+        return res.status(200).json(result);\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+// export default {\r\n+//     newPublication,\r\n+//     getHomePageOffersForUser,\r\n+//     suggestionOffers,\r\n+//     allOffersForUser,\r\n+//     deleteOfferForUser,\r\n+//     updateOfferForUser,\r\n+//     setUnavailableOfferForUser,\r\n+//     availableOfferForUser,\r\n+//     unavailableOfferForUser,\r\n+//     ongoingOffersForUser,\r\n+//     expiredOffersForUser,\r\n+\r\n+// };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722265701741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n         const allOffers = await getAllOfferById(userId);\r\n \r\n         // console.log(\"AllOffersBack: \" + allOffers)\r\n \r\n-        if(!allOffers.rows[0]) return res.status(200).json({all: {}})\r\n+        if(!allOffers[0]) return res.status(200).json({all: {}})\r\n \r\n         return res.status(200).json({ all: allOffers });\r\n \r\n     } catch (error) {\r\n@@ -322,331 +322,5 @@\n //     unavailableOfferForUser,\r\n //     ongoingOffersForUser,\r\n //     expiredOffersForUser,\r\n \r\n-// };\n-import {\r\n-    createOffer,\r\n-    getAllOfferById,\r\n-    deleteOfferById,\r\n-    updateOffer,\r\n-    setunavailableOffer,\r\n-    allAvailableOffer,\r\n-    allUnavailableOffer,\r\n-    ongoingOffer,\r\n-    expiredOffer,\r\n-    latestOffers,\r\n-    getHomepageOffers,\r\n-    getOfferByOfferId\r\n-} from '../models/offreModel.js';\r\n-\r\n-// handle the offer publication and register the offer for a user in the profile page\r\n-\r\n-export const newPublication = async (req, res) => {\r\n-    try {\r\n-\r\n-        const userId = req.user.userid\r\n-\r\n-        const {\r\n-            title,\r\n-            description,\r\n-            depart,\r\n-            destination,\r\n-            capacity,\r\n-            scheduledDate\r\n-        } = req.body;\r\n-\r\n-        // return res.json(req.file)\r\n-\r\n-        // return res.json({body: req.body });\r\n-\r\n-        var data = [];\r\n-\r\n-        if (req.file) {\r\n-            const file = req.file.filename;\r\n-\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                file,\r\n-                userId\r\n-            ]\r\n-        } else {\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                userId\r\n-            ]\r\n-        }\r\n-\r\n-        // return res.json(data);\r\n-\r\n-        // create a new offer\r\n-        const offer = await createOffer(data);\r\n-\r\n-        if (offer) {\r\n-            return res.status(200).json({ user: offer });\r\n-        } else {\r\n-            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-\r\n-// home page function to show offer\r\n-\r\n-export const getHomePageOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-\r\n-        const result = await getHomepageOffers(userId);\r\n-\r\n-        if(!result[0]) return res.status(200).json({offers: {}})\r\n-\r\n-        return res.status(200).json({offers: result});\r\n-\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// suggestion offer, show the 10 latest offers available\r\n-\r\n-export const suggestionOffers = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n-        const result = await latestOffers(userId);\r\n-\r\n-        if (!result) return result.json({ error: \"No offer availaible\" })\r\n-\r\n-        return res.status(200).json({ suggestions: result });\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all offer for an user in his account page\r\n-\r\n-export const allOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userid;\r\n-    \r\n-    try {\r\n-\r\n-        const allOffers = await getAllOfferById(userId);\r\n-\r\n-        // console.log(\"AllOffersBack: \" + allOffers)\r\n-\r\n-        if(!allOffers.rows[0]) return res.status(200).json({all: {}})\r\n-\r\n-        return res.status(200).json({ all: allOffers });\r\n-\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-\r\n-}\r\n-\r\n-// delete offer by offerId\r\n-\r\n-export const deleteOfferForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await deleteOfferById(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-//update an offer\r\n-\r\n-export const updateOfferForUser = async (req, res) => {\r\n-    try {\r\n-\r\n-        const offerId = req.params.offerId;\r\n-        // use a key table for obtaining the data in the request\r\n-\r\n-        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n-        const formData = {};\r\n-        keys.map(key => {\r\n-            let value = req.body[key];\r\n-\r\n-            // verify if the imgUrl is not empty\r\n-            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n-\r\n-            formData[key] = value;\r\n-        });\r\n-\r\n-        formData.offerId = offerId;\r\n-        // create a table with this object\r\n-        const data = Object.values(formData);\r\n-        // create a new offer\r\n-        const result = await updateOffer(data);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-\r\n-\r\n-    } catch (error) {\r\n-\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-//set unavailable the user offer\r\n-\r\n-export const setUnavailableOfferForUser = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await setunavailableOffer(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all available offers for an user in his account page (filter function)\r\n-\r\n-export const availableOfferForUser = async (req, res) => {\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allAvailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all unavailable offers (filter function in account page)\r\n-\r\n-export const unavailableOfferForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allUnavailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// filter function to get ongoings offer for the user\r\n-\r\n-export const ongoingOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await ongoingOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// expires offer for the user to show in his account page and for the filter in this page\r\n-export const expiredOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await expiredOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// function to handle offer page after click on the notification\r\n-\r\n-export const handleOfferAfterNotifClick = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-        const result = await getOfferByOfferId(offerId);\r\n-\r\n-        return res.status(200).json(result);\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-// export default {\r\n-//     newPublication,\r\n-//     getHomePageOffersForUser,\r\n-//     suggestionOffers,\r\n-//     allOffersForUser,\r\n-//     deleteOfferForUser,\r\n-//     updateOfferForUser,\r\n-//     setUnavailableOfferForUser,\r\n-//     availableOfferForUser,\r\n-//     unavailableOfferForUser,\r\n-//     ongoingOffersForUser,\r\n-//     expiredOffersForUser,\r\n-\r\n // };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722266511818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,341 @@\n+import {\r\n+    createOffer,\r\n+    getAllOfferById,\r\n+    deleteOfferById,\r\n+    updateOffer,\r\n+    setunavailableOffer,\r\n+    allAvailableOffer,\r\n+    allUnavailableOffer,\r\n+    ongoingOffer,\r\n+    expiredOffer,\r\n+    latestOffers,\r\n+    getHomepageOffers,\r\n+    getOfferByOfferId\r\n+} from '../models/offreModel.js';\r\n+\r\n+// handle the offer publication and register the offer for a user in the profile page\r\n+\r\n+export const newPublication = async (req, res) => {\r\n+    try {\r\n+\r\n+        const userId = req.user.userid\r\n+\r\n+        const {\r\n+            title,\r\n+            description,\r\n+            depart,\r\n+            destination,\r\n+            capacity,\r\n+            scheduledDate\r\n+        } = req.body;\r\n+\r\n+        // return res.json(req.file)\r\n+\r\n+        // return res.json({body: req.body });\r\n+\r\n+        var data = [];\r\n+\r\n+        if (req.file) {\r\n+            const file = req.file.filename;\r\n+\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                file,\r\n+                userId\r\n+            ]\r\n+        } else {\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                userId\r\n+            ]\r\n+        }\r\n+\r\n+        // return res.json(data);\r\n+\r\n+        // create a new offer\r\n+        const offer = await createOffer(data);\r\n+\r\n+        if (offer) {\r\n+            return res.status(200).json({ user: offer });\r\n+        } else {\r\n+            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+\r\n+// home page function to show offer\r\n+\r\n+export const getHomePageOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+\r\n+        const result = await getHomepageOffers(userId);\r\n+\r\n+        if(!result[0]) return res.status(200).json({offers: {}})\r\n+\r\n+        return res.status(200).json({offers: result});\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// suggestion offer, show the 10 latest offers available\r\n+\r\n+export const suggestionOffers = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+        const result = await latestOffers(userId);\r\n+\r\n+        if (!result) return result.json({ error: \"No offer availaible\" })\r\n+\r\n+        return res.status(200).json({ suggestions: result });\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+export const suggestionOffers = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+        const result = await latestOffers(userId);\r\n+\r\n+        if (!result) return result.json({ error: \"No offer availaible\" })\r\n+\r\n+        return res.status(200).json({ suggestions: result });\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all offer for an user in his account page\r\n+\r\n+export const allOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userid;\r\n+    \r\n+    try {\r\n+\r\n+        const allOffers = await getAllOfferById(userId);\r\n+\r\n+        // console.log(\"AllOffersBack: \" + allOffers)\r\n+\r\n+        if(!allOffers[0]) return res.status(200).json({all: {}})\r\n+\r\n+        return res.status(200).json({ all: allOffers });\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+\r\n+}\r\n+\r\n+// delete offer by offerId\r\n+\r\n+export const deleteOfferForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await deleteOfferById(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+//update an offer\r\n+\r\n+export const updateOfferForUser = async (req, res) => {\r\n+    try {\r\n+\r\n+        const offerId = req.params.offerId;\r\n+        // use a key table for obtaining the data in the request\r\n+\r\n+        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n+        const formData = {};\r\n+        keys.map(key => {\r\n+            let value = req.body[key];\r\n+\r\n+            // verify if the imgUrl is not empty\r\n+            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n+\r\n+            formData[key] = value;\r\n+        });\r\n+\r\n+        formData.offerId = offerId;\r\n+        // create a table with this object\r\n+        const data = Object.values(formData);\r\n+        // create a new offer\r\n+        const result = await updateOffer(data);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+\r\n+\r\n+    } catch (error) {\r\n+\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+//set unavailable the user offer\r\n+\r\n+export const setUnavailableOfferForUser = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await setunavailableOffer(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all available offers for an user in his account page (filter function)\r\n+\r\n+export const availableOfferForUser = async (req, res) => {\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allAvailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all unavailable offers (filter function in account page)\r\n+\r\n+export const unavailableOfferForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allUnavailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// filter function to get ongoings offer for the user\r\n+\r\n+export const ongoingOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await ongoingOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// expires offer for the user to show in his account page and for the filter in this page\r\n+export const expiredOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await expiredOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// function to handle offer page after click on the notification\r\n+\r\n+export const handleOfferAfterNotifClick = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+        const result = await getOfferByOfferId(offerId);\r\n+\r\n+        return res.status(200).json(result);\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+// export default {\r\n+//     newPublication,\r\n+//     getHomePageOffersForUser,\r\n+//     suggestionOffers,\r\n+//     allOffersForUser,\r\n+//     deleteOfferForUser,\r\n+//     updateOfferForUser,\r\n+//     setUnavailableOfferForUser,\r\n+//     availableOfferForUser,\r\n+//     unavailableOfferForUser,\r\n+//     ongoingOffersForUser,\r\n+//     expiredOffersForUser,\r\n+\r\n+// };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1722266518742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,339 +118,14 @@\n         // console.error(error);\r\n         res.status(500).json({ error: error.message });\r\n     }\r\n }\r\n-export const suggestionOffers = async (req, res) => {\r\n \r\n-    const userId = await req.user.userid;\r\n+export const savedOffers = async (req, res) => {\r\n \r\n-    try {\r\n-        const result = await latestOffers(userId);\r\n-\r\n-        if (!result) return result.json({ error: \"No offer availaible\" })\r\n-\r\n-        return res.status(200).json({ suggestions: result });\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all offer for an user in his account page\r\n-\r\n-export const allOffersForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userid;\r\n-    \r\n-    try {\r\n-\r\n-        const allOffers = await getAllOfferById(userId);\r\n-\r\n-        // console.log(\"AllOffersBack: \" + allOffers)\r\n-\r\n-        if(!allOffers[0]) return res.status(200).json({all: {}})\r\n-\r\n-        return res.status(200).json({ all: allOffers });\r\n-\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-\r\n-}\r\n-\r\n-// delete offer by offerId\r\n-\r\n-export const deleteOfferForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await deleteOfferById(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-//update an offer\r\n-\r\n-export const updateOfferForUser = async (req, res) => {\r\n-    try {\r\n-\r\n-        const offerId = req.params.offerId;\r\n-        // use a key table for obtaining the data in the request\r\n-\r\n-        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n-        const formData = {};\r\n-        keys.map(key => {\r\n-            let value = req.body[key];\r\n-\r\n-            // verify if the imgUrl is not empty\r\n-            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n-\r\n-            formData[key] = value;\r\n-        });\r\n-\r\n-        formData.offerId = offerId;\r\n-        // create a table with this object\r\n-        const data = Object.values(formData);\r\n-        // create a new offer\r\n-        const result = await updateOffer(data);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-\r\n-\r\n-    } catch (error) {\r\n-\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-//set unavailable the user offer\r\n-\r\n-export const setUnavailableOfferForUser = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-\r\n-        const result = await setunavailableOffer(offerId);\r\n-\r\n-        if (result) {\r\n-            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n-        } else {\r\n-            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n-        }\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all available offers for an user in his account page (filter function)\r\n-\r\n-export const availableOfferForUser = async (req, res) => {\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allAvailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// show all unavailable offers (filter function in account page)\r\n-\r\n-export const unavailableOfferForUser = async (req, res) => {\r\n-\r\n-    const userId = req.user.userId;\r\n-\r\n-    try {\r\n-        const result = await allUnavailableOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-// filter function to get ongoings offer for the user\r\n-\r\n-export const ongoingOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await ongoingOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// expires offer for the user to show in his account page and for the filter in this page\r\n-export const expiredOffersForUser = async (req, res) => {\r\n-\r\n-    try {\r\n-\r\n-        const userId = req.user.userId;\r\n-\r\n-        const result = await expiredOffer(userId);\r\n-\r\n-        return res.status(200).json(result);\r\n-\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// function to handle offer page after click on the notification\r\n-\r\n-export const handleOfferAfterNotifClick = async (req, res) => {\r\n-    try {\r\n-        const offerId = req.params.offerId;\r\n-        const result = await getOfferByOfferId(offerId);\r\n-\r\n-        return res.status(200).json(result);\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-    }\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-// export default {\r\n-//     newPublication,\r\n-//     getHomePageOffersForUser,\r\n-//     suggestionOffers,\r\n-//     allOffersForUser,\r\n-//     deleteOfferForUser,\r\n-//     updateOfferForUser,\r\n-//     setUnavailableOfferForUser,\r\n-//     availableOfferForUser,\r\n-//     unavailableOfferForUser,\r\n-//     ongoingOffersForUser,\r\n-//     expiredOffersForUser,\r\n-\r\n-// };\n-import {\r\n-    createOffer,\r\n-    getAllOfferById,\r\n-    deleteOfferById,\r\n-    updateOffer,\r\n-    setunavailableOffer,\r\n-    allAvailableOffer,\r\n-    allUnavailableOffer,\r\n-    ongoingOffer,\r\n-    expiredOffer,\r\n-    latestOffers,\r\n-    getHomepageOffers,\r\n-    getOfferByOfferId\r\n-} from '../models/offreModel.js';\r\n-\r\n-// handle the offer publication and register the offer for a user in the profile page\r\n-\r\n-export const newPublication = async (req, res) => {\r\n-    try {\r\n-\r\n-        const userId = req.user.userid\r\n-\r\n-        const {\r\n-            title,\r\n-            description,\r\n-            depart,\r\n-            destination,\r\n-            capacity,\r\n-            scheduledDate\r\n-        } = req.body;\r\n-\r\n-        // return res.json(req.file)\r\n-\r\n-        // return res.json({body: req.body });\r\n-\r\n-        var data = [];\r\n-\r\n-        if (req.file) {\r\n-            const file = req.file.filename;\r\n-\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                file,\r\n-                userId\r\n-            ]\r\n-        } else {\r\n-            data = [\r\n-                title,\r\n-                capacity,\r\n-                depart,\r\n-                destination,\r\n-                scheduledDate,\r\n-                description,\r\n-                userId\r\n-            ]\r\n-        }\r\n-\r\n-        // return res.json(data);\r\n-\r\n-        // create a new offer\r\n-        const offer = await createOffer(data);\r\n-\r\n-        if (offer) {\r\n-            return res.status(200).json({ user: offer });\r\n-        } else {\r\n-            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n-        }\r\n-\r\n-    } catch (error) {\r\n-\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-\r\n-};\r\n-\r\n-\r\n-// home page function to show offer\r\n-\r\n-export const getHomePageOffersForUser = async (req, res) => {\r\n-\r\n     const userId = await req.user.userid;\r\n \r\n     try {\r\n-\r\n-        const result = await getHomepageOffers(userId);\r\n-\r\n-        if(!result[0]) return res.status(200).json({offers: {}})\r\n-\r\n-        return res.status(200).json({offers: result});\r\n-\r\n-    } catch (error) {\r\n-        // console.error(error);\r\n-        res.status(500).json({ error: error.message });\r\n-\r\n-    }\r\n-}\r\n-\r\n-// suggestion offer, show the 10 latest offers available\r\n-\r\n-export const suggestionOffers = async (req, res) => {\r\n-\r\n-    const userId = await req.user.userid;\r\n-\r\n-    try {\r\n         const result = await latestOffers(userId);\r\n \r\n         if (!result) return result.json({ error: \"No offer availaible\" })\r\n \r\n"
                },
                {
                    "date": 1722266780192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n \r\n     const userId = await req.user.userid;\r\n \r\n     try {\r\n-        const result = await allsa(userId);\r\n+        const result = await allSavedOffers(userId);\r\n \r\n         if (!result) return result.json({ error: \"No offer availaible\" })\r\n \r\n         return res.status(200).json({ suggestions: result });\r\n"
                },
                {
                    "date": 1722266791424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,343 @@\n+import {\r\n+    createOffer,\r\n+    getAllOfferById,\r\n+    deleteOfferById,\r\n+    updateOffer,\r\n+    setunavailableOffer,\r\n+    allAvailableOffer,\r\n+    allUnavailableOffer,\r\n+    ongoingOffer,\r\n+    expiredOffer,\r\n+    latestOffers,\r\n+    getHomepageOffers,\r\n+    getOfferByOfferId,\r\n+    allSavedOffers\r\n+} from '../models/offreModel.js';\r\n+\r\n+// handle the offer publication and register the offer for a user in the profile page\r\n+\r\n+export const newPublication = async (req, res) => {\r\n+    try {\r\n+\r\n+        const userId = req.user.userid\r\n+\r\n+        const {\r\n+            title,\r\n+            description,\r\n+            depart,\r\n+            destination,\r\n+            capacity,\r\n+            scheduledDate\r\n+        } = req.body;\r\n+\r\n+        // return res.json(req.file)\r\n+\r\n+        // return res.json({body: req.body });\r\n+\r\n+        var data = [];\r\n+\r\n+        if (req.file) {\r\n+            const file = req.file.filename;\r\n+\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                file,\r\n+                userId\r\n+            ]\r\n+        } else {\r\n+            data = [\r\n+                title,\r\n+                capacity,\r\n+                depart,\r\n+                destination,\r\n+                scheduledDate,\r\n+                description,\r\n+                userId\r\n+            ]\r\n+        }\r\n+\r\n+        // return res.json(data);\r\n+\r\n+        // create a new offer\r\n+        const offer = await createOffer(data);\r\n+\r\n+        if (offer) {\r\n+            return res.status(200).json({ user: offer });\r\n+        } else {\r\n+            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n+        }\r\n+\r\n+    } catch (error) {\r\n+\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+\r\n+// home page function to show offer\r\n+\r\n+export const getHomePageOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+\r\n+        const result = await getHomepageOffers(userId);\r\n+\r\n+        if(!result[0]) return res.status(200).json({offers: {}})\r\n+\r\n+        return res.status(200).json({offers: result});\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// suggestion offer, show the 10 latest offers available\r\n+\r\n+export const suggestionOffers = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+        const result = await latestOffers(userId);\r\n+\r\n+        if (!result) return result.json({ error: \"No offer availaible\" })\r\n+\r\n+        return res.status(200).json({ suggestions: result });\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+export const savedOffers = async (req, res) => {\r\n+\r\n+    const userId = await req.user.userid;\r\n+\r\n+    try {\r\n+        const result = await allSavedOffers(userId);\r\n+\r\n+        if (!result) return result.json({ error: \"No offer availaible\" })\r\n+\r\n+        return res.status(200).json({ saved: result });\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all offer for an user in his account page\r\n+\r\n+export const allOffersForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userid;\r\n+    \r\n+    try {\r\n+\r\n+        const allOffers = await getAllOfferById(userId);\r\n+\r\n+        // console.log(\"AllOffersBack: \" + allOffers)\r\n+\r\n+        if(!allOffers[0]) return res.status(200).json({all: {}})\r\n+\r\n+        return res.status(200).json({ all: allOffers });\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+\r\n+}\r\n+\r\n+// delete offer by offerId\r\n+\r\n+export const deleteOfferForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await deleteOfferById(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+//update an offer\r\n+\r\n+export const updateOfferForUser = async (req, res) => {\r\n+    try {\r\n+\r\n+        const offerId = req.params.offerId;\r\n+        // use a key table for obtaining the data in the request\r\n+\r\n+        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n+        const formData = {};\r\n+        keys.map(key => {\r\n+            let value = req.body[key];\r\n+\r\n+            // verify if the imgUrl is not empty\r\n+            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n+\r\n+            formData[key] = value;\r\n+        });\r\n+\r\n+        formData.offerId = offerId;\r\n+        // create a table with this object\r\n+        const data = Object.values(formData);\r\n+        // create a new offer\r\n+        const result = await updateOffer(data);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+\r\n+\r\n+    } catch (error) {\r\n+\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+\r\n+};\r\n+\r\n+//set unavailable the user offer\r\n+\r\n+export const setUnavailableOfferForUser = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+\r\n+        const result = await setunavailableOffer(offerId);\r\n+\r\n+        if (result) {\r\n+            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n+        } else {\r\n+            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n+        }\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all available offers for an user in his account page (filter function)\r\n+\r\n+export const availableOfferForUser = async (req, res) => {\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allAvailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// show all unavailable offers (filter function in account page)\r\n+\r\n+export const unavailableOfferForUser = async (req, res) => {\r\n+\r\n+    const userId = req.user.userId;\r\n+\r\n+    try {\r\n+        const result = await allUnavailableOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+// filter function to get ongoings offer for the user\r\n+\r\n+export const ongoingOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await ongoingOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// expires offer for the user to show in his account page and for the filter in this page\r\n+export const expiredOffersForUser = async (req, res) => {\r\n+\r\n+    try {\r\n+\r\n+        const userId = req.user.userId;\r\n+\r\n+        const result = await expiredOffer(userId);\r\n+\r\n+        return res.status(200).json(result);\r\n+\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+\r\n+    }\r\n+}\r\n+\r\n+// function to handle offer page after click on the notification\r\n+\r\n+export const handleOfferAfterNotifClick = async (req, res) => {\r\n+    try {\r\n+        const offerId = req.params.offerId;\r\n+        const result = await getOfferByOfferId(offerId);\r\n+\r\n+        return res.status(200).json(result);\r\n+    } catch (error) {\r\n+        // console.error(error);\r\n+        res.status(500).json({ error: error.message });\r\n+    }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+// export default {\r\n+//     newPublication,\r\n+//     getHomePageOffersForUser,\r\n+//     suggestionOffers,\r\n+//     allOffersForUser,\r\n+//     deleteOfferForUser,\r\n+//     updateOfferForUser,\r\n+//     setUnavailableOfferForUser,\r\n+//     availableOfferForUser,\r\n+//     unavailableOfferForUser,\r\n+//     ongoingOffersForUser,\r\n+//     expiredOffersForUser,\r\n+\r\n+// };\n\\ No newline at end of file\n"
                }
            ],
            "date": 1722241186855,
            "name": "Commit-0",
            "content": "import {\r\n    createOffer,\r\n    getAllOfferById,\r\n    deleteOfferById,\r\n    updateOffer,\r\n    setunavailableOffer,\r\n    allAvailableOffer,\r\n    allUnavailableOffer,\r\n    ongoingOffer,\r\n    expiredOffer,\r\n    latestOffers,\r\n    getHomepageOffers,\r\n    getOfferByOfferId\r\n} from '../models/offreModel.js';\r\n\r\n// handle the offer publication and register the offer for a user in the profile page\r\n\r\nexport const newPublication = async (req, res) => {\r\n    try {\r\n\r\n        const userId = req.user.userid\r\n\r\n        const {\r\n            title,\r\n            description,\r\n            depart,\r\n            destination,\r\n            capacity,\r\n            scheduledDate\r\n        } = req.body;\r\n\r\n        // return res.json(req.file)\r\n\r\n        // return res.json({body: req.body });\r\n\r\n        var data = [];\r\n\r\n        if (req.file) {\r\n            const file = req.file.filename;\r\n\r\n            data = [\r\n                title,\r\n                capacity,\r\n                depart,\r\n                destination,\r\n                scheduledDate,\r\n                description,\r\n                file,\r\n                userId\r\n            ]\r\n        } else {\r\n            data = [\r\n                title,\r\n                capacity,\r\n                depart,\r\n                destination,\r\n                scheduledDate,\r\n                description,\r\n                userId\r\n            ]\r\n        }\r\n\r\n        // return res.json(data);\r\n\r\n        // create a new offer\r\n        const offer = await createOffer(data);\r\n\r\n        if (offer) {\r\n            return res.status(200).json({ user: offer });\r\n        } else {\r\n            return res.status(400).json({ error: \"Erreur lors de la modification de l'image de profile\" });\r\n        }\r\n\r\n    } catch (error) {\r\n\r\n        console.error(error);\r\n        res.status(500).json({ error: error.message });\r\n\r\n    }\r\n\r\n};\r\n\r\n\r\n// home page function to show offer\r\n\r\nexport const getHomePageOffersForUser = async (req, res) => {\r\n\r\n    const userId = await req.user.userid;\r\n\r\n    try {\r\n\r\n        const result = await getHomepageOffers(userId);\r\n\r\n        if(!result[0]) return res.status(200).json({offers: {}})\r\n\r\n        return res.status(200).json({offers: result});\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ error: error.message });\r\n\r\n    }\r\n}\r\n\r\n// suggestion offer, show the 10 latest offers available\r\n\r\nexport const suggestionOffers = async (req, res) => {\r\n\r\n    const userId = await req.user.userid;\r\n\r\n    try {\r\n        const result = await latestOffers(userId);\r\n\r\n        if (!result) return result.json({ error: \"No offer availaible\" })\r\n\r\n        return res.status(200).json({ suggestions: result });\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ error: error.message });\r\n    }\r\n}\r\n\r\n// show all offer for an user in his account page\r\n\r\nexport const allOffersForUser = async (req, res) => {\r\n\r\n    const userId = req.user.userid;\r\n    try {\r\n\r\n        const allOffers = await getAllOfferById(userId);\r\n\r\n        return res.status(200).json(allOffers);\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ error: error.message });\r\n    }\r\n\r\n}\r\n\r\n// delete offer by offerId\r\n\r\nexport const deleteOfferForUser = async (req, res) => {\r\n\r\n    try {\r\n        const offerId = req.params.offerId;\r\n\r\n        const result = await deleteOfferById(offerId);\r\n\r\n        if (result) {\r\n            res.status(200).json({ message: \"Publication d'offre supprimée\" });\r\n        } else {\r\n            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ error: error.message });\r\n    }\r\n}\r\n\r\n//update an offer\r\n\r\nexport const updateOfferForUser = async (req, res) => {\r\n    try {\r\n\r\n        const offerId = req.params.offerId;\r\n        // use a key table for obtaining the data in the request\r\n\r\n        const keys = ['title', 'capacity', 'depart', 'destination', 'scheduledDate', 'imgUrl'];\r\n        const formData = {};\r\n        keys.map(key => {\r\n            let value = req.body[key];\r\n\r\n            // verify if the imgUrl is not empty\r\n            if (key === 'imgUrl' && (value === '' || value.trim() === '')) value = null;\r\n\r\n            formData[key] = value;\r\n        });\r\n\r\n        formData.offerId = offerId;\r\n        // create a table with this object\r\n        const data = Object.values(formData);\r\n        // create a new offer\r\n        const result = await updateOffer(data);\r\n\r\n        if (result) {\r\n            res.status(200).json({ message: \"Publication d'offre modifiée avec succès\" });\r\n        } else {\r\n            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n        }\r\n\r\n\r\n    } catch (error) {\r\n\r\n        console.error(error);\r\n        res.status(500).json({ error: error.message });\r\n\r\n    }\r\n\r\n};\r\n\r\n//set unavailable the user offer\r\n\r\nexport const setUnavailableOfferForUser = async (req, res) => {\r\n    try {\r\n        const offerId = req.params.offerId;\r\n\r\n        const result = await setunavailableOffer(offerId);\r\n\r\n        if (result) {\r\n            res.status(200).json({ message: \"Publication indisponible maintenant.\" });\r\n        } else {\r\n            res.status(404).json({ message: \"Erreur, publication non trouvée\" })\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ error: error.message });\r\n    }\r\n}\r\n\r\n// show all available offers for an user in his account page (filter function)\r\n\r\nexport const availableOfferForUser = async (req, res) => {\r\n    const userId = req.user.userId;\r\n\r\n    try {\r\n        const result = await allAvailableOffer(userId);\r\n\r\n        return res.status(200).json(result);\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ error: error.message });\r\n    }\r\n}\r\n\r\n// show all unavailable offers (filter function in account page)\r\n\r\nexport const unavailableOfferForUser = async (req, res) => {\r\n\r\n    const userId = req.user.userId;\r\n\r\n    try {\r\n        const result = await allUnavailableOffer(userId);\r\n\r\n        return res.status(200).json(result);\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ error: error.message });\r\n    }\r\n}\r\n\r\n// filter function to get ongoings offer for the user\r\n\r\nexport const ongoingOffersForUser = async (req, res) => {\r\n\r\n    try {\r\n\r\n        const userId = req.user.userId;\r\n\r\n        const result = await ongoingOffer(userId);\r\n\r\n        return res.status(200).json(result);\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ error: error.message });\r\n\r\n    }\r\n}\r\n\r\n// expires offer for the user to show in his account page and for the filter in this page\r\nexport const expiredOffersForUser = async (req, res) => {\r\n\r\n    try {\r\n\r\n        const userId = req.user.userId;\r\n\r\n        const result = await expiredOffer(userId);\r\n\r\n        return res.status(200).json(result);\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ error: error.message });\r\n\r\n    }\r\n}\r\n\r\n// function to handle offer page after click on the notification\r\n\r\nexport const handleOfferAfterNotifClick = async (req, res) => {\r\n    try {\r\n        const offerId = req.params.offerId;\r\n        const result = await getOfferByOfferId(offerId);\r\n\r\n        return res.status(200).json(result);\r\n    } catch (error) {\r\n        console.error(error);\r\n        res.status(500).json({ error: error.message });\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// export default {\r\n//     newPublication,\r\n//     getHomePageOffersForUser,\r\n//     suggestionOffers,\r\n//     allOffersForUser,\r\n//     deleteOfferForUser,\r\n//     updateOfferForUser,\r\n//     setUnavailableOfferForUser,\r\n//     availableOfferForUser,\r\n//     unavailableOfferForUser,\r\n//     ongoingOffersForUser,\r\n//     expiredOffersForUser,\r\n\r\n// };"
        }
    ]
}