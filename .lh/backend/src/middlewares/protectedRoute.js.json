{
    "sourceFile": "backend/src/middlewares/protectedRoute.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 30,
            "patches": [
                {
                    "date": 1720602333709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1720602412885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,9 @@\n \r\n         const authHeader = req.headers['authorization']\r\n \r\n         const jwtToken = authHeader && authHeader.split(' ')[1];\r\n+        \r\n \r\n \r\n         const JWT_SECRET = process.env.JWT_SECRET;\r\n \r\n"
                },
                {
                    "date": 1720602419284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+import jwt from 'jsonwebtoken';\r\n+import pkg from 'express';\r\n+import pool from '../db/connexion.js';\r\n+import { getInformation } from '../models/users.js';\r\n+\r\n+import dotenv from 'dotenv';\r\n+\r\n+dotenv.config();\r\n+\r\n+const { request, response, NextFunction } = pkg;\r\n+// import cookieParser from 'cookie-parser';\r\n+// import express from 'express';\r\n+\r\n+// const app = express();\r\n+\r\n+// app.use(cookieParser());\r\n+\r\n+const protectedRoute = async (req, res, next) => {\r\n+\r\n+    try {\r\n+\r\n+        const authHeader = req.headers['authorization']\r\n+\r\n+        const jwtToken = authHeader && authHeader.split(' ')[1];\r\n+\r\n+        if(!)\r\n+\r\n+\r\n+        const JWT_SECRET = process.env.JWT_SECRET;\r\n+\r\n+        // return res.json(jwtToken)\r\n+\r\n+        if (!jwtToken) {\r\n+            return res.status(500).json({ error: \"Aucun token prise en charge\" });\r\n+        }\r\n+\r\n+        const payload = jwt.verify(jwtToken, JWT_SECRET);\r\n+\r\n+        // return res.json(payload);\r\n+\r\n+        if (!payload.id) {\r\n+            return res.status(500).json({ error: \"Token invalid\" });\r\n+        }\r\n+\r\n+        const user = await getInformation([payload.id]);\r\n+\r\n+        if (!user) {\r\n+            return res.status(500).json({ error: \"Utilisateur non trouver\" });\r\n+        }\r\n+\r\n+        req.user = user;\r\n+\r\n+        next();\r\n+\r\n+    } catch (error) {\r\n+        console.log(error)\r\n+        return res.status(500).json({ error: \"Server error: \" + error });\r\n+    }\r\n+\r\n+};\r\n+\r\n+export default protectedRoute;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720602425888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,11 +22,9 @@\n         const authHeader = req.headers['authorization']\r\n \r\n         const jwtToken = authHeader && authHeader.split(' ')[1];\r\n \r\n-        if(!)\r\n \r\n-\r\n         const JWT_SECRET = process.env.JWT_SECRET;\r\n \r\n         // return res.json(jwtToken)\r\n \r\n@@ -58,66 +56,5 @@\n     }\r\n \r\n };\r\n \r\n-export default protectedRoute;\n-import jwt from 'jsonwebtoken';\r\n-import pkg from 'express';\r\n-import pool from '../db/connexion.js';\r\n-import { getInformation } from '../models/users.js';\r\n-\r\n-import dotenv from 'dotenv';\r\n-\r\n-dotenv.config();\r\n-\r\n-const { request, response, NextFunction } = pkg;\r\n-// import cookieParser from 'cookie-parser';\r\n-// import express from 'express';\r\n-\r\n-// const app = express();\r\n-\r\n-// app.use(cookieParser());\r\n-\r\n-const protectedRoute = async (req, res, next) => {\r\n-\r\n-    try {\r\n-\r\n-        const authHeader = req.headers['authorization']\r\n-\r\n-        const jwtToken = authHeader && authHeader.split(' ')[1];\r\n-        \r\n-\r\n-\r\n-        const JWT_SECRET = process.env.JWT_SECRET;\r\n-\r\n-        // return res.json(jwtToken)\r\n-\r\n-        if (!jwtToken) {\r\n-            return res.status(500).json({ error: \"Aucun token prise en charge\" });\r\n-        }\r\n-\r\n-        const payload = jwt.verify(jwtToken, JWT_SECRET);\r\n-\r\n-        // return res.json(payload);\r\n-\r\n-        if (!payload.id) {\r\n-            return res.status(500).json({ error: \"Token invalid\" });\r\n-        }\r\n-\r\n-        const user = await getInformation([payload.id]);\r\n-\r\n-        if (!user) {\r\n-            return res.status(500).json({ error: \"Utilisateur non trouver\" });\r\n-        }\r\n-\r\n-        req.user = user;\r\n-\r\n-        next();\r\n-\r\n-    } catch (error) {\r\n-        console.log(error)\r\n-        return res.status(500).json({ error: \"Server error: \" + error });\r\n-    }\r\n-\r\n-};\r\n-\r\n export default protectedRoute;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720602476053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,11 @@\n         const authHeader = req.headers['authorization']\r\n \r\n         const jwtToken = authHeader && authHeader.split(' ')[1];\r\n \r\n+        \r\n \r\n+\r\n         const JWT_SECRET = process.env.JWT_SECRET;\r\n \r\n         // return res.json(jwtToken)\r\n \r\n"
                },
                {
                    "date": 1720602481532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         const authHeader = req.headers['authorization']\r\n \r\n         const jwtToken = authHeader && authHeader.split(' ')[1];\r\n \r\n-        \r\n+        const token = \r\n \r\n \r\n         const JWT_SECRET = process.env.JWT_SECRET;\r\n \r\n"
                },
                {
                    "date": 1720602496103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         const authHeader = req.headers['authorization']\r\n \r\n         const jwtToken = authHeader && authHeader.split(' ')[1];\r\n \r\n-        const token = \r\n+        const token = req.\r\n \r\n \r\n         const JWT_SECRET = process.env.JWT_SECRET;\r\n \r\n"
                },
                {
                    "date": 1720602502130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         const authHeader = req.headers['authorization']\r\n \r\n         const jwtToken = authHeader && authHeader.split(' ')[1];\r\n \r\n-        const token = req.\r\n+        const token = req.body.\r\n \r\n \r\n         const JWT_SECRET = process.env.JWT_SECRET;\r\n \r\n"
                },
                {
                    "date": 1720602507458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         const authHeader = req.headers['authorization']\r\n \r\n         const jwtToken = authHeader && authHeader.split(' ')[1];\r\n \r\n-        const token = req.body.\r\n+        const token = req.body.refToken\r\n \r\n \r\n         const JWT_SECRET = process.env.JWT_SECRET;\r\n \r\n"
                },
                {
                    "date": 1720602514602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,11 +22,8 @@\n         const authHeader = req.headers['authorization']\r\n \r\n         const jwtToken = authHeader && authHeader.split(' ')[1];\r\n \r\n-        const token = req.body.refToken\r\n-\r\n-\r\n         const JWT_SECRET = process.env.JWT_SECRET;\r\n \r\n         // return res.json(jwtToken)\r\n \r\n"
                },
                {
                    "date": 1720603128627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,9 @@\n \r\n         const authHeader = req.headers['authorization']\r\n \r\n         const jwtToken = authHeader && authHeader.split(' ')[1];\r\n+        const jwtToken = authHeader && authHeader.split(' ')[1];\r\n \r\n         const JWT_SECRET = process.env.JWT_SECRET;\r\n \r\n         // return res.json(jwtToken)\r\n"
                },
                {
                    "date": 1720603137421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,61 @@\n+import jwt from 'jsonwebtoken';\r\n+import pkg from 'express';\r\n+import pool from '../db/connexion.js';\r\n+import { getInformation } from '../models/users.js';\r\n+\r\n+import dotenv from 'dotenv';\r\n+\r\n+dotenv.config();\r\n+\r\n+const { request, response, NextFunction } = pkg;\r\n+// import cookieParser from 'cookie-parser';\r\n+// import express from 'express';\r\n+\r\n+// const app = express();\r\n+\r\n+// app.use(cookieParser());\r\n+\r\n+const protectedRoute = async (req, res, next) => {\r\n+\r\n+    try {\r\n+\r\n+        const authHeader = req.headers['authorization']\r\n+\r\n+        // const jwtToken = authHeader && authHeader.split(' ')[1];\r\n+\r\n+        const jwtToken = req.;\r\n+\r\n+        const JWT_SECRET = process.env.JWT_SECRET;\r\n+\r\n+        // return res.json(jwtToken)\r\n+\r\n+        if (!jwtToken) {\r\n+            return res.status(500).json({ error: \"Aucun token prise en charge\" });\r\n+        }\r\n+\r\n+        const payload = jwt.verify(jwtToken, JWT_SECRET);\r\n+\r\n+        // return res.json(payload);\r\n+\r\n+        if (!payload.id) {\r\n+            return res.status(500).json({ error: \"Token invalid\" });\r\n+        }\r\n+\r\n+        const user = await getInformation([payload.id]);\r\n+\r\n+        if (!user) {\r\n+            return res.status(500).json({ error: \"Utilisateur non trouver\" });\r\n+        }\r\n+\r\n+        req.user = user;\r\n+\r\n+        next();\r\n+\r\n+    } catch (error) {\r\n+        console.log(error)\r\n+        return res.status(500).json({ error: \"Server error: \" + error });\r\n+    }\r\n+\r\n+};\r\n+\r\n+export default protectedRoute;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720603146206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         const authHeader = req.headers['authorization']\r\n \r\n         // const jwtToken = authHeader && authHeader.split(' ')[1];\r\n \r\n-        const jwtToken = req.;\r\n+        const jwtToken = req.body.token;\r\n \r\n         const JWT_SECRET = process.env.JWT_SECRET;\r\n \r\n         // return res.json(jwtToken)\r\n@@ -57,65 +57,5 @@\n     }\r\n \r\n };\r\n \r\n-export default protectedRoute;\n-import jwt from 'jsonwebtoken';\r\n-import pkg from 'express';\r\n-import pool from '../db/connexion.js';\r\n-import { getInformation } from '../models/users.js';\r\n-\r\n-import dotenv from 'dotenv';\r\n-\r\n-dotenv.config();\r\n-\r\n-const { request, response, NextFunction } = pkg;\r\n-// import cookieParser from 'cookie-parser';\r\n-// import express from 'express';\r\n-\r\n-// const app = express();\r\n-\r\n-// app.use(cookieParser());\r\n-\r\n-const protectedRoute = async (req, res, next) => {\r\n-\r\n-    try {\r\n-\r\n-        const authHeader = req.headers['authorization']\r\n-\r\n-        const jwtToken = authHeader && authHeader.split(' ')[1];\r\n-        const jwtToken = authHeader && authHeader.split(' ')[1];\r\n-\r\n-        const JWT_SECRET = process.env.JWT_SECRET;\r\n-\r\n-        // return res.json(jwtToken)\r\n-\r\n-        if (!jwtToken) {\r\n-            return res.status(500).json({ error: \"Aucun token prise en charge\" });\r\n-        }\r\n-\r\n-        const payload = jwt.verify(jwtToken, JWT_SECRET);\r\n-\r\n-        // return res.json(payload);\r\n-\r\n-        if (!payload.id) {\r\n-            return res.status(500).json({ error: \"Token invalid\" });\r\n-        }\r\n-\r\n-        const user = await getInformation([payload.id]);\r\n-\r\n-        if (!user) {\r\n-            return res.status(500).json({ error: \"Utilisateur non trouver\" });\r\n-        }\r\n-\r\n-        req.user = user;\r\n-\r\n-        next();\r\n-\r\n-    } catch (error) {\r\n-        console.log(error)\r\n-        return res.status(500).json({ error: \"Server error: \" + error });\r\n-    }\r\n-\r\n-};\r\n-\r\n export default protectedRoute;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720603212194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n const protectedRoute = async (req, res, next) => {\r\n \r\n     try {\r\n \r\n-        const authHeader = req.headers['authorization']\r\n+        // const authHeader = req.headers['authorization']\r\n \r\n         // const jwtToken = authHeader && authHeader.split(' ')[1];\r\n \r\n         const jwtToken = req.body.token;\r\n"
                },
                {
                    "date": 1720603676410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         // const authHeader = req.headers['authorization']\r\n \r\n         // const jwtToken = authHeader && authHeader.split(' ')[1];\r\n \r\n-        const jwtToken = req.body.token;\r\n+        const jwtToken = await req.body.token;\r\n \r\n         const JWT_SECRET = process.env.JWT_SECRET;\r\n \r\n         // return res.json(jwtToken)\r\n"
                },
                {
                    "date": 1720603703576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n         if (!jwtToken) {\r\n             return res.status(500).json({ error: \"Aucun token prise en charge\" });\r\n         }\r\n \r\n-        const payload = jwt.verify(jwtToken, JWT_SECRET);\r\n+        const payload = await jwt.verify(jwtToken, JWT_SECRET);\r\n \r\n         // return res.json(payload);\r\n \r\n         if (!payload.id) {\r\n"
                },
                {
                    "date": 1720603715433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n         if (!jwtToken) {\r\n             return res.status(500).json({ error: \"Aucun token prise en charge\" });\r\n         }\r\n \r\n-        const payload = await jwt.verify(jwtToken, JWT_SECRET);\r\n+        const payload = jwt.verify(jwtToken, JWT_SECRET);\r\n \r\n         // return res.json(payload);\r\n \r\n         if (!payload.id) {\r\n"
                },
                {
                    "date": 1720603729786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n \r\n         // return res.json(jwtToken)\r\n \r\n         if (!jwtToken) {\r\n-            return res.status(500).json({ error: \"Aucun token prise en charge\" });\r\n+            return res.status(400).json({ error: \"Aucun token prise en charge\" });\r\n         }\r\n \r\n         const payload = jwt.verify(jwtToken, JWT_SECRET);\r\n \r\n"
                },
                {
                    "date": 1720603740295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,17 +29,17 @@\n \r\n         // return res.json(jwtToken)\r\n \r\n         if (!jwtToken) {\r\n-            return res.status(400).json({ error: \"Aucun token prise en charge\" });\r\n+            return res.status(401).json({ error: \"Aucun token prise en charge\" });\r\n         }\r\n \r\n         const payload = jwt.verify(jwtToken, JWT_SECRET);\r\n \r\n         // return res.json(payload);\r\n \r\n         if (!payload.id) {\r\n-            return res.status(500).json({ error: \"Token invalid\" });\r\n+            return res.status(401).json({ error: \"Token invalid\" });\r\n         }\r\n \r\n         const user = await getInformation([payload.id]);\r\n \r\n"
                },
                {
                    "date": 1720603746325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n \r\n         const user = await getInformation([payload.id]);\r\n \r\n         if (!user) {\r\n-            return res.status(500).json({ error: \"Utilisateur non trouver\" });\r\n+            return res.status(401).json({ error: \"Utilisateur non trouver\" });\r\n         }\r\n \r\n         req.user = user;\r\n \r\n"
                },
                {
                    "date": 1720604456020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         // const authHeader = req.headers['authorization']\r\n \r\n         // const jwtToken = authHeader && authHeader.split(' ')[1];\r\n \r\n-        const jwtToken = await req.body.token;\r\n+        const jwtToken = await req.header.token;\r\n \r\n         const JWT_SECRET = process.env.JWT_SECRET;\r\n \r\n         // return res.json(jwtToken)\r\n"
                },
                {
                    "date": 1720604530269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         // const authHeader = req.headers['authorization']\r\n \r\n         // const jwtToken = authHeader && authHeader.split(' ')[1];\r\n \r\n-        const jwtToken = await req.header.token;\r\n+        const jwtToken = await req.;\r\n \r\n         const JWT_SECRET = process.env.JWT_SECRET;\r\n \r\n         // return res.json(jwtToken)\r\n"
                },
                {
                    "date": 1720604538265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         // const authHeader = req.headers['authorization']\r\n \r\n         // const jwtToken = authHeader && authHeader.split(' ')[1];\r\n \r\n-        const jwtToken = await req.;\r\n+        const jwtToken = await req;\r\n \r\n         const JWT_SECRET = process.env.JWT_SECRET;\r\n \r\n         // return res.json(jwtToken)\r\n"
                },
                {
                    "date": 1720604578274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,10 +22,12 @@\n         // const authHeader = req.headers['authorization']\r\n \r\n         // const jwtToken = authHeader && authHeader.split(' ')[1];\r\n \r\n-        const jwtToken = await req;\r\n+        return res\r\n \r\n+        const jwtToken = await req.headers.token;\r\n+\r\n         const JWT_SECRET = process.env.JWT_SECRET;\r\n \r\n         // return res.json(jwtToken)\r\n \r\n"
                },
                {
                    "date": 1720604589609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,57 @@\n+import jwt from 'jsonwebtoken';\r\n+import pkg from 'express';\r\n+import pool from '../db/connexion.js';\r\n+import { getInformation } from '../models/users.js';\r\n+\r\n+import dotenv from 'dotenv';\r\n+\r\n+dotenv.config();\r\n+\r\n+const { request, response, NextFunction } = pkg;\r\n+// import cookieParser from 'cookie-parser';\r\n+// import express from 'express';\r\n+\r\n+// const app = express();\r\n+\r\n+// app.use(cookieParser());\r\n+\r\n+const protectedRoute = async (req, res, next) => {\r\n+\r\n+    try {\r\n+\r\n+        const jwtToken = req.header(\"token\");\r\n+\r\n+        const JWT_SECRET = process.env.JWT_SECRET;\r\n+\r\n+        // return res.json(jwtToken)\r\n+\r\n+        if (!jwtToken) {\r\n+            return res.status(500).json({ error: \"Aucun token prise en charge\" });\r\n+        }\r\n+\r\n+        const payload = jwt.verify(jwtToken, JWT_SECRET);\r\n+\r\n+        // return res.json(payload);\r\n+\r\n+        if (!payload.id) {\r\n+            return res.status(500).json({ error: \"Token invalid\" });\r\n+        }\r\n+\r\n+        const user = await getInformation([payload.id]);\r\n+\r\n+        if (!user) {\r\n+            return res.status(500).json({ error: \"Utilisateur non trouver\" });\r\n+        }\r\n+\r\n+        req.user = user;\r\n+\r\n+        next();\r\n+\r\n+    } catch (error) {\r\n+        console.log(error)\r\n+        return res.status(500).json({ error: \"Server error: \" + error });\r\n+    }\r\n+\r\n+};\r\n+\r\n+export default protectedRoute;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720604597536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,68 +53,5 @@\n     }\r\n \r\n };\r\n \r\n-export default protectedRoute;\n-import jwt from 'jsonwebtoken';\r\n-import pkg from 'express';\r\n-import pool from '../db/connexion.js';\r\n-import { getInformation } from '../models/users.js';\r\n-\r\n-import dotenv from 'dotenv';\r\n-\r\n-dotenv.config();\r\n-\r\n-const { request, response, NextFunction } = pkg;\r\n-// import cookieParser from 'cookie-parser';\r\n-// import express from 'express';\r\n-\r\n-// const app = express();\r\n-\r\n-// app.use(cookieParser());\r\n-\r\n-const protectedRoute = async (req, res, next) => {\r\n-\r\n-    try {\r\n-\r\n-        // const authHeader = req.headers['authorization']\r\n-\r\n-        // const jwtToken = authHeader && authHeader.split(' ')[1];\r\n-\r\n-        return res\r\n-\r\n-        const jwtToken = await req.headers.token;\r\n-\r\n-        const JWT_SECRET = process.env.JWT_SECRET;\r\n-\r\n-        // return res.json(jwtToken)\r\n-\r\n-        if (!jwtToken) {\r\n-            return res.status(401).json({ error: \"Aucun token prise en charge\" });\r\n-        }\r\n-\r\n-        const payload = jwt.verify(jwtToken, JWT_SECRET);\r\n-\r\n-        // return res.json(payload);\r\n-\r\n-        if (!payload.id) {\r\n-            return res.status(401).json({ error: \"Token invalid\" });\r\n-        }\r\n-\r\n-        const user = await getInformation([payload.id]);\r\n-\r\n-        if (!user) {\r\n-            return res.status(401).json({ error: \"Utilisateur non trouver\" });\r\n-        }\r\n-\r\n-        req.user = user;\r\n-\r\n-        next();\r\n-\r\n-    } catch (error) {\r\n-        console.log(error)\r\n-        return res.status(500).json({ error: \"Server error: \" + error });\r\n-    }\r\n-\r\n-};\r\n-\r\n export default protectedRoute;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1720604664625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n const protectedRoute = async (req, res, next) => {\r\n \r\n     try {\r\n \r\n-        const jwtToken = req.header(\"token\");\r\n+        const jwtToken = await req.header(\"token\");\r\n \r\n         const JWT_SECRET = process.env.JWT_SECRET;\r\n \r\n         // return res.json(jwtToken)\r\n"
                },
                {
                    "date": 1720605680071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n         if (!jwtToken) {\r\n             return res.status(500).json({ error: \"Aucun token prise en charge\" });\r\n         }\r\n \r\n-        const payload = jwt.verify(jwtToken, JWT_SECRET);\r\n+        const payload = await jwt.verify(jwtToken, JWT_SECRET);\r\n \r\n         // return res.json(payload);\r\n \r\n         if (!payload.id) {\r\n"
                },
                {
                    "date": 1720605704407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n         if (!jwtToken) {\r\n             return res.status(500).json({ error: \"Aucun token prise en charge\" });\r\n         }\r\n \r\n-        const payload = await jwt.verify(jwtToken, JWT_SECRET);\r\n+        const payload = jwt.verify(jwtToken, JWT_SECRET);\r\n \r\n         // return res.json(payload);\r\n \r\n         if (!payload.id) {\r\n"
                },
                {
                    "date": 1720605977073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n const protectedRoute = async (req, res, next) => {\r\n \r\n     try {\r\n \r\n-        const jwtToken = await req.header(\"token\");\r\n+        const jwtToken = req.header(\"token\");\r\n \r\n         const JWT_SECRET = process.env.JWT_SECRET;\r\n \r\n         // return res.json(jwtToken)\r\n"
                },
                {
                    "date": 1720609869819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,52 @@\n+import jwt from 'jsonwebtoken';\r\n+import pkg from 'express';\r\n+import pool from '../db/connexion.js';\r\n+import { getInformation } from '../models/users.js';\r\n+\r\n+import dotenv from 'dotenv';\r\n+\r\n+dotenv.config();\r\n+\r\n+const { request, response, NextFunction } = pkg;\r\n+\r\n+\r\n+const protectedRoute = async (req, res, next) => {\r\n+\r\n+    try {\r\n+\r\n+        const jwtToken = req.header(\"token\");\r\n+\r\n+        const JWT_SECRET = process.env.JWT_SECRET;\r\n+\r\n+        // return res.json(jwtToken)\r\n+\r\n+        if (!jwtToken) {\r\n+            return res.status(500).json({ error: \"Aucun token prise en charge\" });\r\n+        }\r\n+\r\n+        const payload = jwt.verify(jwtToken, JWT_SECRET);\r\n+\r\n+        // return res.json(payload);\r\n+\r\n+        if (!payload.id) {\r\n+            return res.status(500).json({ error: \"Token invalid\" });\r\n+        }\r\n+\r\n+        const user = await getInformation([payload.id]);\r\n+\r\n+        if (!user) {\r\n+            return res.status(500).json({ error: \"Utilisateur non trouver\" });\r\n+        }\r\n+\r\n+        req.user = user;\r\n+\r\n+        next();\r\n+\r\n+    } catch (error) {\r\n+        console.log(error)\r\n+        return res.status(500).json({ error: \"Server error: \" + error });\r\n+    }\r\n+\r\n+};\r\n+\r\n+export default protectedRoute;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1720602333709,
            "name": "Commit-0",
            "content": "import jwt from 'jsonwebtoken';\r\nimport pkg from 'express';\r\nimport pool from '../db/connexion.js';\r\nimport { getInformation } from '../models/users.js';\r\n\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n\r\nconst { request, response, NextFunction } = pkg;\r\n// import cookieParser from 'cookie-parser';\r\n// import express from 'express';\r\n\r\n// const app = express();\r\n\r\n// app.use(cookieParser());\r\n\r\nconst protectedRoute = async (req, res, next) => {\r\n\r\n    try {\r\n\r\n        const authHeader = req.headers['authorization']\r\n\r\n        const jwtToken = authHeader && authHeader.split(' ')[1];\r\n\r\n\r\n        const JWT_SECRET = process.env.JWT_SECRET;\r\n\r\n        // return res.json(jwtToken)\r\n\r\n        if (!jwtToken) {\r\n            return res.status(500).json({ error: \"Aucun token prise en charge\" });\r\n        }\r\n\r\n        const payload = jwt.verify(jwtToken, JWT_SECRET);\r\n\r\n        // return res.json(payload);\r\n\r\n        if (!payload.id) {\r\n            return res.status(500).json({ error: \"Token invalid\" });\r\n        }\r\n\r\n        const user = await getInformation([payload.id]);\r\n\r\n        if (!user) {\r\n            return res.status(500).json({ error: \"Utilisateur non trouver\" });\r\n        }\r\n\r\n        req.user = user;\r\n\r\n        next();\r\n\r\n    } catch (error) {\r\n        console.log(error)\r\n        return res.status(500).json({ error: \"Server error: \" + error });\r\n    }\r\n\r\n};\r\n\r\nexport default protectedRoute;"
        }
    ]
}