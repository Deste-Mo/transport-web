{
    "sourceFile": "backend/src/models/offreModel.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1722241219978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722241237766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,193 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC LIMIT 10\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+\r\n+// exportation of all function for manipulate offer data in the database\r\n+// module.exports = {\r\n+//     createOffer,\r\n+//     getAllOfferById,\r\n+//     deleteOfferById,\r\n+//     updateOffer,\r\n+//     setunavailableOffer,\r\n+//     allAvailableOffer,\r\n+//     allUnavailableOffer,\r\n+//     ongoingOffer,\r\n+//     expiredOffer,\r\n+//     getHomepageOffers,\r\n+//     latestOffers,\r\n+//     getOfferByOfferId,\r\n+// };\r\n"
                },
                {
                    "date": 1722245512832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,9 +154,9 @@\n \r\n // get the latest offers published\r\n \r\n export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC LIMIT 10\"\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n \r\n     const result = await pool.query(query, [userId]);\r\n \r\n     return result.rows;\r\n@@ -190,197 +190,4 @@\n //     getHomepageOffers,\r\n //     latestOffers,\r\n //     getOfferByOfferId,\r\n // };\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC LIMIT 10\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-\r\n-// exportation of all function for manipulate offer data in the database\r\n-// module.exports = {\r\n-//     createOffer,\r\n-//     getAllOfferById,\r\n-//     deleteOfferById,\r\n-//     updateOffer,\r\n-//     setunavailableOffer,\r\n-//     allAvailableOffer,\r\n-//     allUnavailableOffer,\r\n-//     ongoingOffer,\r\n-//     expiredOffer,\r\n-//     getHomepageOffers,\r\n-//     latestOffers,\r\n-//     getOfferByOfferId,\r\n-// };\r\n"
                },
                {
                    "date": 1722245523639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,193 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+\r\n+// exportation of all function for manipulate offer data in the database\r\n+// module.exports = {\r\n+//     createOffer,\r\n+//     getAllOfferById,\r\n+//     deleteOfferById,\r\n+//     updateOffer,\r\n+//     setunavailableOffer,\r\n+//     allAvailableOffer,\r\n+//     allUnavailableOffer,\r\n+//     ongoingOffer,\r\n+//     expiredOffer,\r\n+//     getHomepageOffers,\r\n+//     latestOffers,\r\n+//     getOfferByOfferId,\r\n+// };\r\n"
                },
                {
                    "date": 1722245542792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,193 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+\r\n+// exportation of all function for manipulate offer data in the database\r\n+// module.exports = {\r\n+//     createOffer,\r\n+//     getAllOfferById,\r\n+//     deleteOfferById,\r\n+//     updateOffer,\r\n+//     setunavailableOffer,\r\n+//     allAvailableOffer,\r\n+//     allUnavailableOffer,\r\n+//     ongoingOffer,\r\n+//     expiredOffer,\r\n+//     getHomepageOffers,\r\n+//     latestOffers,\r\n+//     getOfferByOfferId,\r\n+// };\r\n"
                },
                {
                    "date": 1722246950196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,193 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+\r\n+// exportation of all function for manipulate offer data in the database\r\n+// module.exports = {\r\n+//     createOffer,\r\n+//     getAllOfferById,\r\n+//     deleteOfferById,\r\n+//     updateOffer,\r\n+//     setunavailableOffer,\r\n+//     allAvailableOffer,\r\n+//     allUnavailableOffer,\r\n+//     ongoingOffer,\r\n+//     expiredOffer,\r\n+//     getHomepageOffers,\r\n+//     latestOffers,\r\n+//     getOfferByOfferId,\r\n+// };\r\n"
                },
                {
                    "date": 1722246985513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,176 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                }
            ],
            "date": 1722241219978,
            "name": "Commit-0",
            "content": "import pool from '../db/connexion.js';\r\n\r\n// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n\r\n export const createOffer = async (data) => {\r\n\r\n    var query = \"\"\r\n    \r\n    data.length > 7 \r\n    ? \r\n    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n    : \r\n    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n\r\n    const result = await pool.query(query,data);\r\n\r\n    return result.rows[0];\r\n}\r\n\r\n// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n\r\nexport const getAllOfferById = async (userId) =>{\r\n    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC', [userId]);\r\n\r\n    return result.rows;\r\n}\r\n\r\n// delete a offer publication for a user (used for the unset function )\r\n\r\nexport const deleteOfferById = async (offerId) =>{\r\n    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n\r\n    return result.rowCount;\r\n}\r\n\r\n// update the offer\r\n\r\nexport const updateOffer = async (data) => {\r\n    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n\r\n    return result.rowCount;\r\n}\r\n\r\n//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\nexport const setunavailableOffer = async (offerId) =>{\r\n    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n\r\n    return result.rowCount;\r\n}\r\n\r\n//*****************************FILTER FUNCTIONS************************//\r\n\r\nexport const allAvailableOffer = async(userId) => {\r\n    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n\r\n    return result.rows;\r\n\r\n}\r\n\r\nexport const allUnavailableOffer = async(userId) => {\r\n    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n\r\n    return result.rows;\r\n}\r\n\r\nexport const ongoingOffer = async(userId) => {\r\n    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n\r\n    return result.rows;\r\n\r\n}\r\n\r\nexport const expiredOffer = async(userId) => {\r\n    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n\r\n    return result.rows;\r\n\r\n}\r\n\r\n\r\n// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n\r\nexport const getHomepageOffers = async (userId) => {\r\n\r\n    // const todaydate = new Date();    \r\n  \r\n    const query = `\r\n              WITH CurrentUser AS (\r\n                  SELECT a.accountType \r\n                  FROM Account a \r\n                  JOIN Users u ON u.accountId = a.accountId \r\n                  WHERE u.userId = $1\r\n              ), \r\n              OppositeOffers AS (\r\n                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n                  FROM Offer o \r\n                  JOIN Users u ON o.userId = u.userId \r\n                  JOIN Account a ON a.accountId = u.accountId \r\n                  WHERE o.dispo = TRUE \r\n                  AND u.userId <> $1\r\n                  AND o.scheduledDate >= current_date \r\n                  AND (\r\n                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n                      OR\r\n                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n                  )\r\n                  ORDER BY RANDOM() \r\n                  LIMIT 50\r\n              ), \r\n              SameTypeFollowedOffers AS (\r\n                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n                  FROM Offer o \r\n                  JOIN Users u ON o.userId = u.userId \r\n                  JOIN Follow f ON u.userId = f.followeeId \r\n                  JOIN Account a ON u.accountId = a.accountId \r\n                  WHERE o.dispo = TRUE\r\n                  AND u.userId <> $1 \r\n                  AND o.scheduledDate >= current_date \r\n                  AND f.followerId = $1 \r\n                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n                  ORDER BY RANDOM() \r\n                  LIMIT 15\r\n              ), \r\n              OppositeFollowedOffers AS (\r\n                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n                  FROM Offer o \r\n                  JOIN Users u ON o.userId = u.userId \r\n                  JOIN Follow f ON u.userId = f.followeeId \r\n                  JOIN Account a ON u.accountId = a.accountId \r\n                  WHERE o.dispo = TRUE \r\n                  AND u.userId <> $1\r\n                  AND o.scheduledDate >= current_date \r\n                  AND f.followerId = $1  \r\n                  AND (\r\n                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n                      OR\r\n                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n                  )\r\n                  ORDER BY RANDOM() \r\n                  LIMIT 35\r\n              ) \r\n              SELECT * FROM OppositeOffers \r\n              UNION  \r\n              SELECT * FROM SameTypeFollowedOffers \r\n              UNION \r\n              SELECT * FROM OppositeFollowedOffers;\r\n          `;\r\n  \r\n          const result = await pool.query(query, [userId]);\r\n  \r\n  \r\n      return result.rows;\r\n  }\r\n\r\n// get the latest offers published\r\n\r\nexport const latestOffers = async (userId) => {\r\n    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC LIMIT 10\"\r\n\r\n    const result = await pool.query(query, [userId]);\r\n\r\n    return result.rows;\r\n}\r\n\r\n\r\n\r\n//get an offer by ID OFFER\r\n\r\nexport const getOfferByOfferId = async (offerId) => {\r\n\r\n    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n\r\n    const result = await pool.query(query, [offerId]);\r\n\r\n    return result.rows[0];\r\n}\r\n\r\n\r\n// exportation of all function for manipulate offer data in the database\r\n// module.exports = {\r\n//     createOffer,\r\n//     getAllOfferById,\r\n//     deleteOfferById,\r\n//     updateOffer,\r\n//     setunavailableOffer,\r\n//     allAvailableOffer,\r\n//     allUnavailableOffer,\r\n//     ongoingOffer,\r\n//     expiredOffer,\r\n//     getHomepageOffers,\r\n//     latestOffers,\r\n//     getOfferByOfferId,\r\n// };\r\n"
        }
    ]
}