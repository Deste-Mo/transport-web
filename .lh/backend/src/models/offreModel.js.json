{
    "sourceFile": "backend/src/models/offreModel.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 93,
            "patches": [
                {
                    "date": 1722241219978,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722241237766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,193 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC LIMIT 10\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+\r\n+// exportation of all function for manipulate offer data in the database\r\n+// module.exports = {\r\n+//     createOffer,\r\n+//     getAllOfferById,\r\n+//     deleteOfferById,\r\n+//     updateOffer,\r\n+//     setunavailableOffer,\r\n+//     allAvailableOffer,\r\n+//     allUnavailableOffer,\r\n+//     ongoingOffer,\r\n+//     expiredOffer,\r\n+//     getHomepageOffers,\r\n+//     latestOffers,\r\n+//     getOfferByOfferId,\r\n+// };\r\n"
                },
                {
                    "date": 1722245512832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,9 +154,9 @@\n \r\n // get the latest offers published\r\n \r\n export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC LIMIT 10\"\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n \r\n     const result = await pool.query(query, [userId]);\r\n \r\n     return result.rows;\r\n@@ -190,197 +190,4 @@\n //     getHomepageOffers,\r\n //     latestOffers,\r\n //     getOfferByOfferId,\r\n // };\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC LIMIT 10\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-\r\n-// exportation of all function for manipulate offer data in the database\r\n-// module.exports = {\r\n-//     createOffer,\r\n-//     getAllOfferById,\r\n-//     deleteOfferById,\r\n-//     updateOffer,\r\n-//     setunavailableOffer,\r\n-//     allAvailableOffer,\r\n-//     allUnavailableOffer,\r\n-//     ongoingOffer,\r\n-//     expiredOffer,\r\n-//     getHomepageOffers,\r\n-//     latestOffers,\r\n-//     getOfferByOfferId,\r\n-// };\r\n"
                },
                {
                    "date": 1722245523639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,193 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+\r\n+// exportation of all function for manipulate offer data in the database\r\n+// module.exports = {\r\n+//     createOffer,\r\n+//     getAllOfferById,\r\n+//     deleteOfferById,\r\n+//     updateOffer,\r\n+//     setunavailableOffer,\r\n+//     allAvailableOffer,\r\n+//     allUnavailableOffer,\r\n+//     ongoingOffer,\r\n+//     expiredOffer,\r\n+//     getHomepageOffers,\r\n+//     latestOffers,\r\n+//     getOfferByOfferId,\r\n+// };\r\n"
                },
                {
                    "date": 1722245542792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,193 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+\r\n+// exportation of all function for manipulate offer data in the database\r\n+// module.exports = {\r\n+//     createOffer,\r\n+//     getAllOfferById,\r\n+//     deleteOfferById,\r\n+//     updateOffer,\r\n+//     setunavailableOffer,\r\n+//     allAvailableOffer,\r\n+//     allUnavailableOffer,\r\n+//     ongoingOffer,\r\n+//     expiredOffer,\r\n+//     getHomepageOffers,\r\n+//     latestOffers,\r\n+//     getOfferByOfferId,\r\n+// };\r\n"
                },
                {
                    "date": 1722246950196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,193 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+\r\n+// exportation of all function for manipulate offer data in the database\r\n+// module.exports = {\r\n+//     createOffer,\r\n+//     getAllOfferById,\r\n+//     deleteOfferById,\r\n+//     updateOffer,\r\n+//     setunavailableOffer,\r\n+//     allAvailableOffer,\r\n+//     allUnavailableOffer,\r\n+//     ongoingOffer,\r\n+//     expiredOffer,\r\n+//     getHomepageOffers,\r\n+//     latestOffers,\r\n+//     getOfferByOfferId,\r\n+// };\r\n"
                },
                {
                    "date": 1722246985513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,176 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722264364220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n \r\n // get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n \r\n export const getAllOfferById = async (userId) =>{\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC', [userId]);\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC', [userId]);\r\n \r\n     return result.rows;\r\n }\r\n \r\n@@ -173,776 +173,4 @@\n     const result = await pool.query(query, [offerId]);\r\n \r\n     return result.rows[0];\r\n }\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-\r\n-// exportation of all function for manipulate offer data in the database\r\n-// module.exports = {\r\n-//     createOffer,\r\n-//     getAllOfferById,\r\n-//     deleteOfferById,\r\n-//     updateOffer,\r\n-//     setunavailableOffer,\r\n-//     allAvailableOffer,\r\n-//     allUnavailableOffer,\r\n-//     ongoingOffer,\r\n-//     expiredOffer,\r\n-//     getHomepageOffers,\r\n-//     latestOffers,\r\n-//     getOfferByOfferId,\r\n-// };\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-\r\n-// exportation of all function for manipulate offer data in the database\r\n-// module.exports = {\r\n-//     createOffer,\r\n-//     getAllOfferById,\r\n-//     deleteOfferById,\r\n-//     updateOffer,\r\n-//     setunavailableOffer,\r\n-//     allAvailableOffer,\r\n-//     allUnavailableOffer,\r\n-//     ongoingOffer,\r\n-//     expiredOffer,\r\n-//     getHomepageOffers,\r\n-//     latestOffers,\r\n-//     getOfferByOfferId,\r\n-// };\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-\r\n-// exportation of all function for manipulate offer data in the database\r\n-// module.exports = {\r\n-//     createOffer,\r\n-//     getAllOfferById,\r\n-//     deleteOfferById,\r\n-//     updateOffer,\r\n-//     setunavailableOffer,\r\n-//     allAvailableOffer,\r\n-//     allUnavailableOffer,\r\n-//     ongoingOffer,\r\n-//     expiredOffer,\r\n-//     getHomepageOffers,\r\n-//     latestOffers,\r\n-//     getOfferByOfferId,\r\n-// };\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-\r\n-// exportation of all function for manipulate offer data in the database\r\n-// module.exports = {\r\n-//     createOffer,\r\n-//     getAllOfferById,\r\n-//     deleteOfferById,\r\n-//     updateOffer,\r\n-//     setunavailableOffer,\r\n-//     allAvailableOffer,\r\n-//     allUnavailableOffer,\r\n-//     ongoingOffer,\r\n-//     expiredOffer,\r\n-//     getHomepageOffers,\r\n-//     latestOffers,\r\n-//     getOfferByOfferId,\r\n-// };\r\n"
                },
                {
                    "date": 1722264386536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,10 @@\n \r\n // get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n \r\n export const getAllOfferById = async (userId) =>{\r\n+\r\n+    \r\n     const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC', [userId]);\r\n \r\n     return result.rows;\r\n }\r\n"
                },
                {
                    "date": 1722264392491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,10 @@\n // get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n \r\n export const getAllOfferById = async (userId) =>{\r\n \r\n-    \r\n+    const query = \r\n+\r\n     const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC', [userId]);\r\n \r\n     return result.rows;\r\n }\r\n"
                },
                {
                    "date": 1722264401110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,179 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = \r\n+\r\n+    const result = await pool.query(, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722264410662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,179 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC'\r\n+\r\n+    const result = await pool.query(, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722264419950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,179 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722264429203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,179 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722266545802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,180 +163,8 @@\n     const result = await pool.query(query, [userId]);\r\n \r\n     return result.rows;\r\n }\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n export const latestOffers = async (userId) => {\r\n     const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n \r\n     const result = await pool.query(query, [userId]);\r\n@@ -355,541 +183,4 @@\n     const result = await pool.query(query, [offerId]);\r\n \r\n     return result.rows[0];\r\n }\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC'\r\n-\r\n-    const result = await pool.query(, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = \r\n-\r\n-    const result = await pool.query(, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = \r\n-\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n"
                },
                {
                    "date": 1722266553765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,187 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const Offers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722266651216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,187 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN  WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722266661199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,187 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722266668274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,187 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722266674077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,187 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid =  WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722266692529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,187 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722266711547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,1125 +184,4 @@\n     const result = await pool.query(query, [offerId]);\r\n \r\n     return result.rows[0];\r\n }\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid =  WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN  WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const Offers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n"
                },
                {
                    "date": 1722266728289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,9 +165,9 @@\n     return result.rows;\r\n }\r\n \r\n export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s. FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n \r\n     const result = await pool.query(query, [userId]);\r\n \r\n     return result.rows;\r\n"
                },
                {
                    "date": 1722266739140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,187 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722266751406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,187 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s. FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722266757217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,187 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722267472949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,194 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722267480788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSaveOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722267487821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722267487966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722267493316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722267502476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,9 @@\n     return result.rows;\r\n }\r\n \r\n export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+    const query = \"\"\r\n \r\n     const result = await pool.query(query, [userId]);\r\n \r\n     return result.rows;\r\n@@ -192,1531 +192,4 @@\n     const result = await pool.query(query, [offerId]);\r\n \r\n     return result.rows[0];\r\n }\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSaveOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s. FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s. FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n"
                },
                {
                    "date": 1722267507958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,9 @@\n     return result.rows;\r\n }\r\n \r\n export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"\"\r\n+    const query = \"INSERT INTO \"\r\n \r\n     const result = await pool.query(query, [userId]);\r\n \r\n     return result.rows;\r\n"
                },
                {
                    "date": 1722267513949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,9 @@\n     return result.rows;\r\n }\r\n \r\n export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO \"\r\n+    const query = \"INSERT INTO save\"\r\n \r\n     const result = await pool.query(query, [userId]);\r\n \r\n     return result.rows;\r\n"
                },
                {
                    "date": 1722267521669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722267529320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer offerid\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722267536255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,9 @@\n     return result.rows;\r\n }\r\n \r\n export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer offerid\"\r\n+    const query = \"INSERT INTO saveoffer ()\"\r\n \r\n     const result = await pool.query(query, [userId]);\r\n \r\n     return result.rows;\r\n@@ -192,394 +192,4 @@\n     const result = await pool.query(query, [offerId]);\r\n \r\n     return result.rows[0];\r\n }\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO save\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n"
                },
                {
                    "date": 1722267546779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ()\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722267553155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,9 @@\n     return result.rows;\r\n }\r\n \r\n export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ()\"\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1,¿$ )\"\r\n \r\n     const result = await pool.query(query, [userId]);\r\n \r\n     return result.rows;\r\n@@ -192,199 +192,4 @@\n     const result = await pool.query(query, [offerId]);\r\n \r\n     return result.rows[0];\r\n }\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer ()\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n"
                },
                {
                    "date": 1722267559297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1,)\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722267564708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $)\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722267571479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2)\";\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722267586668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2)\";\r\n+\r\n+    const result = await pool.query(quer,y, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722267615919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n \r\n export const setSavedOffer = async (userId, offerId) => {\r\n     const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2)\";\r\n \r\n-    const result = await pool.query(quer,y, [userId]);\r\n+    const result = await pool.query(query, [,userId]);\r\n \r\n     return result.rows;\r\n }\r\n \r\n@@ -192,784 +192,4 @@\n     const result = await pool.query(query, [offerId]);\r\n \r\n     return result.rows[0];\r\n }\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2)\";\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $)\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1,)\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1,¿$ )\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n"
                },
                {
                    "date": 1722267621463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2)\";\r\n+\r\n+    const result = await pool.query(query, [of,userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722267627649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n \r\n export const setSavedOffer = async (userId, offerId) => {\r\n     const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2)\";\r\n \r\n-    const result = await pool.query(query, [of,userId]);\r\n+    const result = await pool.query(query, [offer,userId]);\r\n \r\n     return result.rows;\r\n }\r\n \r\n@@ -192,199 +192,4 @@\n     const result = await pool.query(query, [offerId]);\r\n \r\n     return result.rows[0];\r\n }\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2)\";\r\n-\r\n-    const result = await pool.query(query, [,userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n"
                },
                {
                    "date": 1722267635715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2)\";\r\n+\r\n+    const result = await pool.query(query, [offerI,userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722267641712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2)\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722267647776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2)\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+c\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722267668617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,209 +176,14 @@\n export const setSavedOffer = async (userId, offerId) => {\r\n     const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2)\";\r\n \r\n     const result = await pool.query(query, [offerId,userId]);\r\n-c\r\n-    return result.rows;\r\n-}\r\n \r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n+    return result.rows;c\r\n }\r\n-import pool from '../db/connexion.js';\r\n \r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n \r\n- export const createOffer = async (data) => {\r\n \r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2)\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n //get an offer by ID OFFER\r\n \r\n export const getOfferByOfferId = async (offerId) => {\r\n \r\n@@ -387,394 +192,4 @@\n     const result = await pool.query(query, [offerId]);\r\n \r\n     return result.rows[0];\r\n }\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2)\";\r\n-\r\n-    const result = await pool.query(query, [offerI,userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2)\";\r\n-\r\n-    const result = await pool.query(query, [offer,userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n"
                },
                {
                    "date": 1722267675071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2)\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722267685849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING \";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722267691558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722268708851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM save INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722268714884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,9 +165,9 @@\n     return result.rows;\r\n }\r\n \r\n export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM save INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n \r\n     const result = await pool.query(query, [userId]);\r\n \r\n     return result.rows;\r\n@@ -192,784 +192,4 @@\n     const result = await pool.query(query, [offerId]);\r\n \r\n     return result.rows[0];\r\n }\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING \";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2)\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2)\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows;c\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n"
                },
                {
                    "date": 1722268738131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722268757719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722268845349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722268845835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -192,589 +192,4 @@\n     const result = await pool.query(query, [offerId]);\r\n \r\n     return result.rows[0];\r\n }\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN saveoffer s on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n"
                },
                {
                    "date": 1722269079680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,11 +179,18 @@\n     const result = await pool.query(query, [offerId,userId]);\r\n \r\n     return result.rows[0];\r\n }\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n \r\n+    const result = await pool.query(query, [offerId,userId]);\r\n \r\n+    return result.rows[0];\r\n+}\r\n \r\n+\r\n+\r\n //get an offer by ID OFFER\r\n \r\n export const getOfferByOfferId = async (offerId) => {\r\n \r\n"
                },
                {
                    "date": 1722269087380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,203 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+export const retireSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722269087560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,206 +200,4 @@\n     const result = await pool.query(query, [offerId]);\r\n \r\n     return result.rows[0];\r\n }\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n"
                },
                {
                    "date": 1722269095934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,203 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+export const retireSavedOffer = async (userId, offerId) => {\r\n+    const query = \"DELETE FROM saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722269106642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,203 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+export const retireSavedOffer = async (userId, offerId) => {\r\n+    const query = \"DELETE FROM saveoffer  RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722269120653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,203 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+export const retireSavedOffer = async (userId, offerId) => {\r\n+    const query = \"DELETE FROM saveoffer WHERE sa RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722269126541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,203 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+export const retireSavedOffer = async (userId, offerId) => {\r\n+    const query = \"DELETE FROM saveoffer WHERE saveoffer. RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722269133223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,203 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+export const retireSavedOffer = async (userId, offerId) => {\r\n+    const query = \"DELETE FROM saveoffer WHERE save RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722269147905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,203 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+export const retireSavedOffer = async (userId, offerId) => {\r\n+    const query = \"DELETE FROM saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722269154611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,9 +181,9 @@\n     return result.rows[0];\r\n }\r\n \r\n export const retireSavedOffer = async (userId, offerId) => {\r\n-    const query = \"DELETE FROM saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+    const query = \"DELETE FROM saveoffer WHERE offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n \r\n     const result = await pool.query(query, [offerId,userId]);\r\n \r\n     return result.rows[0];\r\n@@ -200,1222 +200,4 @@\n     const result = await pool.query(query, [offerId]);\r\n \r\n     return result.rows[0];\r\n }\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-export const retireSavedOffer = async (userId, offerId) => {\r\n-    const query = \"DELETE FROM saveoffer WHERE save RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-export const retireSavedOffer = async (userId, offerId) => {\r\n-    const query = \"DELETE FROM saveoffer WHERE saveoffer. RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-export const retireSavedOffer = async (userId, offerId) => {\r\n-    const query = \"DELETE FROM saveoffer WHERE sa RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-export const retireSavedOffer = async (userId, offerId) => {\r\n-    const query = \"DELETE FROM saveoffer  RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-export const retireSavedOffer = async (userId, offerId) => {\r\n-    const query = \"DELETE FROM saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-export const retireSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n"
                },
                {
                    "date": 1722269161706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,9 +181,9 @@\n     return result.rows[0];\r\n }\r\n \r\n export const retireSavedOffer = async (userId, offerId) => {\r\n-    const query = \"DELETE FROM saveoffer WHERE offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid) VALUES ($1, $2) RETURNING *\";\r\n \r\n     const result = await pool.query(query, [offerId,userId]);\r\n \r\n     return result.rows[0];\r\n"
                },
                {
                    "date": 1722269170379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,9 +181,9 @@\n     return result.rows[0];\r\n }\r\n \r\n export const retireSavedOffer = async (userId, offerId) => {\r\n-    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid) VALUES ($1, $2) RETURNING *\";\r\n+    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n \r\n     const result = await pool.query(query, [offerId,userId]);\r\n \r\n     return result.rows[0];\r\n"
                },
                {
                    "date": 1722269176056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,203 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+export const retireSavedOffer = async (userId, offerId) => {\r\n+    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722269188090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,203 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+export const retireSavedOffer = async (userId, offerId) => {\r\n+    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722269188711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,203 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+export const retireSavedOffer = async (userId, offerId) => {\r\n+    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722269203262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,203 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+export const retireSavedOffer = async (userId, offerId) => {\r\n+    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722269203779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,816 +200,4 @@\n     const result = await pool.query(query, [offerId]);\r\n \r\n     return result.rows[0];\r\n }\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-export const retireSavedOffer = async (userId, offerId) => {\r\n-    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-export const retireSavedOffer = async (userId, offerId) => {\r\n-    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-export const retireSavedOffer = async (userId, offerId) => {\r\n-    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-export const retireSavedOffer = async (userId, offerId) => {\r\n-    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n"
                },
                {
                    "date": 1722325291590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,8 +165,16 @@\n     return result.rows;\r\n }\r\n \r\n export const allSavedOffers = async (userId) => {\r\n+    const verif = \" SELECT * FROM Saveoffer WHERE offerid = $1 AND userid= $2\";\r\n+   \r\n+    const result = await pool.query(verif, data);\r\n+\r\n+    if(result.rowCount > 0){\r\n+        console.log(data);\r\n+        return null;\r\n+    }\r\n     const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n \r\n     const result = await pool.query(query, [userId]);\r\n \r\n"
                },
                {
                    "date": 1722325297817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,213 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    \r\n+    const verif = \" SELECT * FROM Saveoffer WHERE offerid = $1 AND userid= $2\";\r\n+   \r\n+    const result = await pool.query(verif, data);\r\n+\r\n+    if(result.rowCount > 0){\r\n+        console.log(data);\r\n+        return null;\r\n+    }\r\n+\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+export const retireSavedOffer = async (userId, offerId) => {\r\n+    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722325305588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,12 +165,12 @@\n     return result.rows;\r\n }\r\n \r\n export const allSavedOffers = async (userId) => {\r\n-    \r\n+\r\n     const verif = \" SELECT * FROM Saveoffer WHERE offerid = $1 AND userid= $2\";\r\n    \r\n-    const result = await pool.query(verif, data);\r\n+    const result_ = await pool.query(verif, data);\r\n \r\n     if(result.rowCount > 0){\r\n         console.log(data);\r\n         return null;\r\n@@ -210,215 +210,4 @@\n     const result = await pool.query(query, [offerId]);\r\n \r\n     return result.rows[0];\r\n }\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    const verif = \" SELECT * FROM Saveoffer WHERE offerid = $1 AND userid= $2\";\r\n-   \r\n-    const result = await pool.query(verif, data);\r\n-\r\n-    if(result.rowCount > 0){\r\n-        console.log(data);\r\n-        return null;\r\n-    }\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-export const retireSavedOffer = async (userId, offerId) => {\r\n-    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n"
                },
                {
                    "date": 1722325312703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,213 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+\r\n+    const verif = \" SELECT * FROM Saveoffer WHERE offerid = $1 AND userid= $2\";\r\n+   \r\n+    const result_0 = await pool.query(verif, );\r\n+\r\n+    if(result.rowCount > 0){\r\n+        console.log(data);\r\n+        return null;\r\n+    }\r\n+\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+export const retireSavedOffer = async (userId, offerId) => {\r\n+    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722325318261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,213 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    \r\n+    const verif = \" SELECT * FROM Saveoffer WHERE offerid = $1 AND userid= $2\";\r\n+   \r\n+    const result = await pool.query(verif, data);\r\n+\r\n+    if(result.rowCount > 0){\r\n+        console.log(data);\r\n+        return null;\r\n+    }\r\n+\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+export const retireSavedOffer = async (userId, offerId) => {\r\n+    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722325323620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,204 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    \r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+export const retireSavedOffer = async (userId, offerId) => {\r\n+    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722325330113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,214 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    \r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+\r\n+    const verif = \" SELECT * FROM Saveoffer WHERE offerid = $1 AND userid= $2\";\r\n+   \r\n+    const result = await pool.query(verif, data);\r\n+\r\n+    if(result.rowCount > 0){\r\n+        console.log(data);\r\n+        return null;\r\n+    }\r\n+    \r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+export const retireSavedOffer = async (userId, offerId) => {\r\n+    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722325336438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,219 +177,15 @@\n export const setSavedOffer = async (userId, offerId) => {\r\n \r\n     const verif = \" SELECT * FROM Saveoffer WHERE offerid = $1 AND userid= $2\";\r\n    \r\n-    const result = await pool.query(verif, data);\r\n+    const result = await pool.query(verif, [data]);\r\n \r\n     if(result.rowCount > 0){\r\n         console.log(data);\r\n         return null;\r\n     }\r\n-    \r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n \r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-export const retireSavedOffer = async (userId, offerId) => {\r\n-    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    \r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n     const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n \r\n     const result = await pool.query(query, [offerId,userId]);\r\n \r\n@@ -415,643 +211,4 @@\n     const result = await pool.query(query, [offerId]);\r\n \r\n     return result.rows[0];\r\n }\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    \r\n-    const verif = \" SELECT * FROM Saveoffer WHERE offerid = $1 AND userid= $2\";\r\n-   \r\n-    const result = await pool.query(verif, data);\r\n-\r\n-    if(result.rowCount > 0){\r\n-        console.log(data);\r\n-        return null;\r\n-    }\r\n-\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-export const retireSavedOffer = async (userId, offerId) => {\r\n-    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-\r\n-    const verif = \" SELECT * FROM Saveoffer WHERE offerid = $1 AND userid= $2\";\r\n-   \r\n-    const result_0 = await pool.query(verif, );\r\n-\r\n-    if(result.rowCount > 0){\r\n-        console.log(data);\r\n-        return null;\r\n-    }\r\n-\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-export const retireSavedOffer = async (userId, offerId) => {\r\n-    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-\r\n-    const verif = \" SELECT * FROM Saveoffer WHERE offerid = $1 AND userid= $2\";\r\n-   \r\n-    const result_ = await pool.query(verif, data);\r\n-\r\n-    if(result.rowCount > 0){\r\n-        console.log(data);\r\n-        return null;\r\n-    }\r\n-\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-export const retireSavedOffer = async (userId, offerId) => {\r\n-    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n"
                },
                {
                    "date": 1722325343444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,214 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    \r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+\r\n+    const verif = \" SELECT * FROM Saveoffer WHERE offerid = $1 AND userid= $2\";\r\n+   \r\n+    const result = await pool.query(verif, [offerId, ]);\r\n+\r\n+    if(result.rowCount > 0){\r\n+        console.log(data);\r\n+        return null;\r\n+    }\r\n+\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+export const retireSavedOffer = async (userId, offerId) => {\r\n+    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722325349747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,214 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    \r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+\r\n+    const verif = \" SELECT * FROM Saveoffer WHERE offerid = $1 AND userid= $2\";\r\n+   \r\n+    const result = await pool.query(verif, [offerId, userId]);\r\n+\r\n+    if(result.rowCount > 0){\r\n+        console.log(data);\r\n+        return null;\r\n+    }\r\n+\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+export const retireSavedOffer = async (userId, offerId) => {\r\n+    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722325350606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,432 +211,4 @@\n     const result = await pool.query(query, [offerId]);\r\n \r\n     return result.rows[0];\r\n }\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    \r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-\r\n-    const verif = \" SELECT * FROM Saveoffer WHERE offerid = $1 AND userid= $2\";\r\n-   \r\n-    const result = await pool.query(verif, [offerId, ]);\r\n-\r\n-    if(result.rowCount > 0){\r\n-        console.log(data);\r\n-        return null;\r\n-    }\r\n-\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-export const retireSavedOffer = async (userId, offerId) => {\r\n-    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    \r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-\r\n-    const verif = \" SELECT * FROM Saveoffer WHERE offerid = $1 AND userid= $2\";\r\n-   \r\n-    const result = await pool.query(verif, [data]);\r\n-\r\n-    if(result.rowCount > 0){\r\n-        console.log(data);\r\n-        return null;\r\n-    }\r\n-\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-export const retireSavedOffer = async (userId, offerId) => {\r\n-    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n"
                },
                {
                    "date": 1722325360030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,214 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    \r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+\r\n+    const verif = \" SELECT * FROM Saveoffer WHERE offerid = $1 AND userid= $2\";\r\n+   \r\n+    const result_0 = await pool.query(verif, [offerId, userId]);\r\n+\r\n+    if(result_0.rowCount > 0){\r\n+        console.log(data);\r\n+        return null;\r\n+    }\r\n+\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+export const retireSavedOffer = async (userId, offerId) => {\r\n+    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722325360243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,214 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    \r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+\r\n+    const verif = \" SELECT * FROM Saveoffer WHERE offerid = $1 AND userid= $2\";\r\n+   \r\n+    const result_0 = await pool.query(verif, [offerId, userId]);\r\n+\r\n+    if(result_0.rowCount > 0){\r\n+        console.log(data);\r\n+        return null;\r\n+    }\r\n+\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+export const retireSavedOffer = async (userId, offerId) => {\r\n+    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722325381523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,213 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    \r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+\r\n+    const verif = \" SELECT * FROM Saveoffer WHERE offerid = $1 AND userid= $2\";\r\n+   \r\n+    const result_0 = await pool.query(verif, [offerId, userId]);\r\n+\r\n+    if(result_0.rowCount > 0){\r\n+        return null;\r\n+    }\r\n+\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+export const retireSavedOffer = async (userId, offerId) => {\r\n+    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722325388921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,213 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    \r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+\r\n+    const verif = \" SELECT * FROM Saveoffer WHERE offerid = $1 AND userid= $2\";\r\n+   \r\n+    const result_0 = await pool.query(verif, [offerId, userId]);\r\n+\r\n+    if(result_0.rowCount > 0){\r\n+        return null;\r\n+    }\r\n+\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+export const retireSavedOffer = async (userId, offerId) => {\r\n+    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722325410836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,223 @@\n+import pool from '../db/connexion.js';\r\n+\r\n+// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n+\r\n+ export const createOffer = async (data) => {\r\n+\r\n+    var query = \"\"\r\n+    \r\n+    data.length > 7 \r\n+    ? \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n+    : \r\n+    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n+\r\n+    const result = await pool.query(query,data);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n+\r\n+export const getAllOfferById = async (userId) =>{\r\n+\r\n+    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+// delete a offer publication for a user (used for the unset function )\r\n+\r\n+export const deleteOfferById = async (offerId) =>{\r\n+    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+// update the offer\r\n+\r\n+export const updateOffer = async (data) => {\r\n+    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n+export const setunavailableOffer = async (offerId) =>{\r\n+    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+//*****************************FILTER FUNCTIONS************************//\r\n+\r\n+export const allAvailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const allUnavailableOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const ongoingOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+export const expiredOffer = async(userId) => {\r\n+    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n+\r\n+    return result.rows;\r\n+\r\n+}\r\n+\r\n+\r\n+// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n+\r\n+export const getHomepageOffers = async (userId) => {\r\n+\r\n+    // const todaydate = new Date();    \r\n+  \r\n+    const query = `\r\n+              WITH CurrentUser AS (\r\n+                  SELECT a.accountType \r\n+                  FROM Account a \r\n+                  JOIN Users u ON u.accountId = a.accountId \r\n+                  WHERE u.userId = $1\r\n+              ), \r\n+              OppositeOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Account a ON a.accountId = u.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 50\r\n+              ), \r\n+              SameTypeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE\r\n+                  AND u.userId <> $1 \r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1 \r\n+                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 15\r\n+              ), \r\n+              OppositeFollowedOffers AS (\r\n+                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                  FROM Offer o \r\n+                  JOIN Users u ON o.userId = u.userId \r\n+                  JOIN Follow f ON u.userId = f.followeeId \r\n+                  JOIN Account a ON u.accountId = a.accountId \r\n+                  WHERE o.dispo = TRUE \r\n+                  AND u.userId <> $1\r\n+                  AND o.scheduledDate >= current_date \r\n+                  AND f.followerId = $1  \r\n+                  AND (\r\n+                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                      OR\r\n+                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                  )\r\n+                  ORDER BY RANDOM() \r\n+                  LIMIT 35\r\n+              ) \r\n+              SELECT * FROM OppositeOffers \r\n+              UNION  \r\n+              SELECT * FROM SameTypeFollowedOffers \r\n+              UNION \r\n+              SELECT * FROM OppositeFollowedOffers;\r\n+          `;\r\n+  \r\n+          const result = await pool.query(query, [userId]);\r\n+  \r\n+  \r\n+      return result.rows;\r\n+  }\r\n+\r\n+// get the latest offers published\r\n+\r\n+export const latestOffers = async (userId) => {\r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const allSavedOffers = async (userId) => {\r\n+    \r\n+    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rows;\r\n+}\r\n+\r\n+export const setSavedOffer = async (userId, offerId) => {\r\n+\r\n+    const verif = \" SELECT * FROM Saveoffer WHERE offerid = $1 AND userid= $2\";\r\n+   \r\n+    const result_0 = await pool.query(verif, [offerId, userId]);\r\n+\r\n+    if(result_0.rowCount > 0){\r\n+        return null;\r\n+    }\r\n+\r\n+    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n+\r\n+export const retireSavedOffer = async (userId, offerId) => {\r\n+    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n+\r\n+    const result = await pool.query(query, [offerId,userId]);\r\n+\r\n+    return result;\r\n+}\r\n+\r\n+// delete all save offer for the user\r\n+\r\n+export const deleteAllSaveoffer = async ( userId) =>{\r\n+    const query = \"DELETE FROM Saveoffer WHERE userid = $1\";\r\n+\r\n+    const result = await pool.query(query, [userId]);\r\n+\r\n+    return result.rowCount;\r\n+}\r\n+\r\n+\r\n+\r\n+//get an offer by ID OFFER\r\n+\r\n+export const getOfferByOfferId = async (offerId) => {\r\n+\r\n+    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n+\r\n+    const result = await pool.query(query, [offerId]);\r\n+\r\n+    return result.rows[0];\r\n+}\r\n"
                },
                {
                    "date": 1722325411558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -220,1072 +220,4 @@\n     const result = await pool.query(query, [offerId]);\r\n \r\n     return result.rows[0];\r\n }\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    \r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-\r\n-    const verif = \" SELECT * FROM Saveoffer WHERE offerid = $1 AND userid= $2\";\r\n-   \r\n-    const result_0 = await pool.query(verif, [offerId, userId]);\r\n-\r\n-    if(result_0.rowCount > 0){\r\n-        return null;\r\n-    }\r\n-\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-export const retireSavedOffer = async (userId, offerId) => {\r\n-    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    \r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-\r\n-    const verif = \" SELECT * FROM Saveoffer WHERE offerid = $1 AND userid= $2\";\r\n-   \r\n-    const result_0 = await pool.query(verif, [offerId, userId]);\r\n-\r\n-    if(result_0.rowCount > 0){\r\n-        return null;\r\n-    }\r\n-\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-export const retireSavedOffer = async (userId, offerId) => {\r\n-    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    \r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-\r\n-    const verif = \" SELECT * FROM Saveoffer WHERE offerid = $1 AND userid= $2\";\r\n-   \r\n-    const result_0 = await pool.query(verif, [offerId, userId]);\r\n-\r\n-    if(result_0.rowCount > 0){\r\n-        console.log(data);\r\n-        return null;\r\n-    }\r\n-\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-export const retireSavedOffer = async (userId, offerId) => {\r\n-    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    \r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-\r\n-    const verif = \" SELECT * FROM Saveoffer WHERE offerid = $1 AND userid= $2\";\r\n-   \r\n-    const result_0 = await pool.query(verif, [offerId, userId]);\r\n-\r\n-    if(result_0.rowCount > 0){\r\n-        console.log(data);\r\n-        return null;\r\n-    }\r\n-\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-export const retireSavedOffer = async (userId, offerId) => {\r\n-    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-import pool from '../db/connexion.js';\r\n-\r\n-// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n-\r\n- export const createOffer = async (data) => {\r\n-\r\n-    var query = \"\"\r\n-    \r\n-    data.length > 7 \r\n-    ? \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n-    : \r\n-    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n-\r\n-    const result = await pool.query(query,data);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n-\r\n-export const getAllOfferById = async (userId) =>{\r\n-\r\n-    const query = 'SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC';\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-// delete a offer publication for a user (used for the unset function )\r\n-\r\n-export const deleteOfferById = async (offerId) =>{\r\n-    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-// update the offer\r\n-\r\n-export const updateOffer = async (data) => {\r\n-    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\n-export const setunavailableOffer = async (offerId) =>{\r\n-    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n-\r\n-    return result.rowCount;\r\n-}\r\n-\r\n-//*****************************FILTER FUNCTIONS************************//\r\n-\r\n-export const allAvailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const allUnavailableOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const ongoingOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-export const expiredOffer = async(userId) => {\r\n-    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n-\r\n-    return result.rows;\r\n-\r\n-}\r\n-\r\n-\r\n-// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n-\r\n-export const getHomepageOffers = async (userId) => {\r\n-\r\n-    // const todaydate = new Date();    \r\n-  \r\n-    const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n-  \r\n-          const result = await pool.query(query, [userId]);\r\n-  \r\n-  \r\n-      return result.rows;\r\n-  }\r\n-\r\n-// get the latest offers published\r\n-\r\n-export const latestOffers = async (userId) => {\r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const allSavedOffers = async (userId) => {\r\n-    \r\n-    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType, s.saveid, s.savedate FROM saveoffer s INNER JOIN users u ON s.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId INNER JOIN offer o on s.offerid = o.offerid WHERE o.dispo = TRUE AND u.userId = $1 ORDER BY o.offerid DESC\"\r\n-\r\n-    const result = await pool.query(query, [userId]);\r\n-\r\n-    return result.rows;\r\n-}\r\n-\r\n-export const setSavedOffer = async (userId, offerId) => {\r\n-\r\n-    const verif = \" SELECT * FROM Saveoffer WHERE offerid = $1 AND userid= $2\";\r\n-   \r\n-    const result = await pool.query(verif, [offerId, userId]);\r\n-\r\n-    if(result.rowCount > 0){\r\n-        console.log(data);\r\n-        return null;\r\n-    }\r\n-\r\n-    const query = \"INSERT INTO saveoffer (offerid, userid) VALUES ($1, $2) RETURNING *\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n-\r\n-export const retireSavedOffer = async (userId, offerId) => {\r\n-    const query = \"DELETE FROM saveoffer WHERE offerid = $1 AND userid = $2\";\r\n-\r\n-    const result = await pool.query(query, [offerId,userId]);\r\n-\r\n-    return result;\r\n-}\r\n-\r\n-\r\n-\r\n-//get an offer by ID OFFER\r\n-\r\n-export const getOfferByOfferId = async (offerId) => {\r\n-\r\n-    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n-\r\n-    const result = await pool.query(query, [offerId]);\r\n-\r\n-    return result.rows[0];\r\n-}\r\n"
                },
                {
                    "date": 1722326073607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,68 +87,69 @@\n \r\n     // const todaydate = new Date();    \r\n   \r\n     const query = `\r\n-              WITH CurrentUser AS (\r\n-                  SELECT a.accountType \r\n-                  FROM Account a \r\n-                  JOIN Users u ON u.accountId = a.accountId \r\n-                  WHERE u.userId = $1\r\n-              ), \r\n-              OppositeOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Account a ON a.accountId = u.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 50\r\n-              ), \r\n-              SameTypeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE\r\n-                  AND u.userId <> $1 \r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1 \r\n-                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 15\r\n-              ), \r\n-              OppositeFollowedOffers AS (\r\n-                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n-                  FROM Offer o \r\n-                  JOIN Users u ON o.userId = u.userId \r\n-                  JOIN Follow f ON u.userId = f.followeeId \r\n-                  JOIN Account a ON u.accountId = a.accountId \r\n-                  WHERE o.dispo = TRUE \r\n-                  AND u.userId <> $1\r\n-                  AND o.scheduledDate >= current_date \r\n-                  AND f.followerId = $1  \r\n-                  AND (\r\n-                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n-                      OR\r\n-                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n-                  )\r\n-                  ORDER BY RANDOM() \r\n-                  LIMIT 35\r\n-              ) \r\n-              SELECT * FROM OppositeOffers \r\n-              UNION  \r\n-              SELECT * FROM SameTypeFollowedOffers \r\n-              UNION \r\n-              SELECT * FROM OppositeFollowedOffers;\r\n-          `;\r\n+            WITH CurrentUser AS (\r\n+                SELECT a.accountType \r\n+                FROM Account a \r\n+                JOIN Users u ON u.accountId = a.accountId \r\n+                WHERE u.userId = $1\r\n+            ), \r\n+            OppositeOffers AS (\r\n+                SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                FROM Offer o \r\n+                JOIN Users u ON o.userId = u.userId \r\n+                JOIN Account a ON a.accountId = u.accountId \r\n+                WHERE o.dispo = TRUE \r\n+                AND u.userId <> $1\r\n+                AND o.scheduledDate >= current_date \r\n+                AND (\r\n+                    (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                    OR\r\n+                    (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                )\r\n+                ORDER BY RANDOM() \r\n+                LIMIT 50\r\n+            ), \r\n+            SameTypeFollowedOffers AS (\r\n+                SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                FROM Offer o \r\n+                JOIN Users u ON o.userId = u.userId \r\n+                JOIN Follow f ON u.userId = f.followeeId \r\n+                JOIN Account a ON u.accountId = a.accountId \r\n+                WHERE o.dispo = TRUE\r\n+                AND u.userId <> $1 \r\n+                AND o.scheduledDate >= current_date \r\n+                AND f.followerId = $1 \r\n+                AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n+                ORDER BY RANDOM() \r\n+                LIMIT 15\r\n+            ), \r\n+            OppositeFollowedOffers AS (\r\n+                SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n+                FROM Offer o \r\n+                JOIN Users u ON o.userId = u.userId \r\n+                JOIN Follow f ON u.userId = f.followeeId \r\n+                JOIN Account a ON u.accountId = a.accountId \r\n+                WHERE o.dispo = TRUE \r\n+                AND u.userId <> $1\r\n+                AND o.scheduledDate >= current_date \r\n+                AND f.followerId = $1  \r\n+                AND (\r\n+                    (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n+                    OR\r\n+                    (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n+                )\r\n+                ORDER BY RANDOM() \r\n+                LIMIT 35\r\n+            ) \r\n+            SELECT * FROM (SELECT * FROM OppositeOffers \r\n+            UNION  \r\n+            SELECT * FROM SameTypeFollowedOffers \r\n+            UNION \r\n+            SELECT * FROM OppositeFollowedOffers) AS CombinedOffers\r\n+            ORDER BY RANDOM();\r\n+        `;\r\n   \r\n           const result = await pool.query(query, [userId]);\r\n   \r\n   \r\n"
                }
            ],
            "date": 1722241219978,
            "name": "Commit-0",
            "content": "import pool from '../db/connexion.js';\r\n\r\n// create a new offer publication, this function takes a table for this parameter and returns the inserted values\r\n\r\n export const createOffer = async (data) => {\r\n\r\n    var query = \"\"\r\n    \r\n    data.length > 7 \r\n    ? \r\n    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, imgUrl, userId) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) returning *\" \r\n    : \r\n    query = \"INSERT INTO Offer( title, capacity, depart, dest, scheduledDate, description, userId) VALUES ($1,$2,$3,$4,$5,$6,$7) returning *\";\r\n\r\n    const result = await pool.query(query,data);\r\n\r\n    return result.rows[0];\r\n}\r\n\r\n// get all offer for an user (use this function to show all offers published by the user within this profil page)\r\n\r\nexport const getAllOfferById = async (userId) =>{\r\n    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 ORDER BY o.publicationDate DESC', [userId]);\r\n\r\n    return result.rows;\r\n}\r\n\r\n// delete a offer publication for a user (used for the unset function )\r\n\r\nexport const deleteOfferById = async (offerId) =>{\r\n    const result = await pool.query('DELETE FROM Offer WHERE offerId = $1', [offerId]);\r\n\r\n    return result.rowCount;\r\n}\r\n\r\n// update the offer\r\n\r\nexport const updateOffer = async (data) => {\r\n    const result = await pool.query('UPDATE Offer SET title = $1, capacity =$2, depart=$3, dest=$4, scheduledDate=$5, description=$6, imgUrl=$7, dispo=TRUE WHERE offerId=$8', data);\r\n\r\n    return result.rowCount;\r\n}\r\n\r\n//Make the offer unavailable (use this for cancelling the offer publication or if a contract is established )\r\nexport const setunavailableOffer = async (offerId) =>{\r\n    const result = await pool.query('UPDATE Offer SET dispo = FALSE WHERE offerId = $1',[offerId]);\r\n\r\n    return result.rowCount;\r\n}\r\n\r\n//*****************************FILTER FUNCTIONS************************//\r\n\r\nexport const allAvailableOffer = async(userId) => {\r\n    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE ORDER BY o.publicationDate DESC', [userId]);\r\n\r\n    return result.rows;\r\n\r\n}\r\n\r\nexport const allUnavailableOffer = async(userId) => {\r\n    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=FALSE ORDER BY o.publicationDate DESC',[userId]);\r\n\r\n    return result.rows;\r\n}\r\n\r\nexport const ongoingOffer = async(userId) => {\r\n    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.dispo=TRUE AND o.scheduledDate < (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n\r\n    return result.rows;\r\n\r\n}\r\n\r\nexport const expiredOffer = async(userId) => {\r\n    const result = await pool.query('SELECT u.userId, u.firstName, u.lastName, u.phone, u.profileImage, o.offerId, o.title, o.capacity, o.depart, o.dest, o.scheduledDate, o.description, o.imgUrl, o.publicationDate, o.dispo FROM Users u INNER JOIN Offer o ON u.userId = o.userId WHERE o.userId = $1 AND o.scheduledDate > (SELECT CURRENT_DATE) ORDER BY o.publicationDate DESC', [userId]);\r\n\r\n    return result.rows;\r\n\r\n}\r\n\r\n\r\n// get homepage offers with specified critaria( the critaria is : random offer, 50% opposite account type, 14% same account type but followed, the rest opposite account type and followed )\r\n\r\nexport const getHomepageOffers = async (userId) => {\r\n\r\n    // const todaydate = new Date();    \r\n  \r\n    const query = `\r\n              WITH CurrentUser AS (\r\n                  SELECT a.accountType \r\n                  FROM Account a \r\n                  JOIN Users u ON u.accountId = a.accountId \r\n                  WHERE u.userId = $1\r\n              ), \r\n              OppositeOffers AS (\r\n                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n                  FROM Offer o \r\n                  JOIN Users u ON o.userId = u.userId \r\n                  JOIN Account a ON a.accountId = u.accountId \r\n                  WHERE o.dispo = TRUE \r\n                  AND u.userId <> $1\r\n                  AND o.scheduledDate >= current_date \r\n                  AND (\r\n                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n                      OR\r\n                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n                  )\r\n                  ORDER BY RANDOM() \r\n                  LIMIT 50\r\n              ), \r\n              SameTypeFollowedOffers AS (\r\n                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n                  FROM Offer o \r\n                  JOIN Users u ON o.userId = u.userId \r\n                  JOIN Follow f ON u.userId = f.followeeId \r\n                  JOIN Account a ON u.accountId = a.accountId \r\n                  WHERE o.dispo = TRUE\r\n                  AND u.userId <> $1 \r\n                  AND o.scheduledDate >= current_date \r\n                  AND f.followerId = $1 \r\n                  AND a.accountType = (SELECT accountType FROM CurrentUser) \r\n                  ORDER BY RANDOM() \r\n                  LIMIT 15\r\n              ), \r\n              OppositeFollowedOffers AS (\r\n                  SELECT o.*, u.lastName, u.firstName, u.phone, u.profileImage, a.accountType \r\n                  FROM Offer o \r\n                  JOIN Users u ON o.userId = u.userId \r\n                  JOIN Follow f ON u.userId = f.followeeId \r\n                  JOIN Account a ON u.accountId = a.accountId \r\n                  WHERE o.dispo = TRUE \r\n                  AND u.userId <> $1\r\n                  AND o.scheduledDate >= current_date \r\n                  AND f.followerId = $1  \r\n                  AND (\r\n                      (a.accountType IN ('Camionneur') AND (SELECT accountType FROM CurrentUser) IN ('Client', 'Entreprise'))\r\n                      OR\r\n                      (a.accountType IN ('Client', 'Entreprise') AND (SELECT accountType FROM CurrentUser) IN ('Camionneur'))\r\n                  )\r\n                  ORDER BY RANDOM() \r\n                  LIMIT 35\r\n              ) \r\n              SELECT * FROM OppositeOffers \r\n              UNION  \r\n              SELECT * FROM SameTypeFollowedOffers \r\n              UNION \r\n              SELECT * FROM OppositeFollowedOffers;\r\n          `;\r\n  \r\n          const result = await pool.query(query, [userId]);\r\n  \r\n  \r\n      return result.rows;\r\n  }\r\n\r\n// get the latest offers published\r\n\r\nexport const latestOffers = async (userId) => {\r\n    const query = \"SELECT o.*, u.lastname, u.firstname, u.profileimage, u.phone, a.accountType FROM Offer o INNER JOIN users u ON o.userId = u.userId  INNER JOIN Account a ON u.accountId = a.accountId WHERE o.dispo = TRUE AND u.userId <> $1 ORDER BY o.offerid DESC LIMIT 10\"\r\n\r\n    const result = await pool.query(query, [userId]);\r\n\r\n    return result.rows;\r\n}\r\n\r\n\r\n\r\n//get an offer by ID OFFER\r\n\r\nexport const getOfferByOfferId = async (offerId) => {\r\n\r\n    const query = \"SELECT * FROM Offer WHERE offerId = $1\";\r\n\r\n    const result = await pool.query(query, [offerId]);\r\n\r\n    return result.rows[0];\r\n}\r\n\r\n\r\n// exportation of all function for manipulate offer data in the database\r\n// module.exports = {\r\n//     createOffer,\r\n//     getAllOfferById,\r\n//     deleteOfferById,\r\n//     updateOffer,\r\n//     setunavailableOffer,\r\n//     allAvailableOffer,\r\n//     allUnavailableOffer,\r\n//     ongoingOffer,\r\n//     expiredOffer,\r\n//     getHomepageOffers,\r\n//     latestOffers,\r\n//     getOfferByOfferId,\r\n// };\r\n"
        }
    ]
}