{
    "sourceFile": "frontend/src/pages/conversations/Message.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 22,
            "patches": [
                {
                    "date": 1722234846982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722234940722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,8 +163,10 @@\n }\r\n \r\n \r\n const Message = ({message, sentDate, sentByCurrentUser = false}) => {\r\n+\r\n+    \r\n     return <div className={`space-y-1 max-w-1/2`}>\r\n         <div className={`p-4  rounded-2xl space-y-3 w-full ${sentByCurrentUser ? 'bg-primary-20' : 'bg-black-10'}`}>\r\n             <p className=\"text-small-2 text-black-80 \">{sentDate}</p>\r\n             <p className=\"text-small-1 text-black-100\">{message}</p>\r\n"
                },
                {
                    "date": 1722234988283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,187 @@\n+import {useNavigate} from \"react-router-dom\";\r\n+import {Button, TextArea, TextInput} from \"../../styles/components\";\r\n+import {useAuth} from \"../../context/AuthProvider\";\r\n+import {useApp} from \"../../context/AppPorvider\";\r\n+import {useEffect, useRef, useState} from \"react\";\r\n+import {useSocketContext} from \"../../context/SocketContext\";\r\n+import {SERVERLINK} from \"../../constants\";\r\n+import Mess from \"../../components/pages/conversations/Message.jsx\";\r\n+import Icon from \"../../components/ui/Icon.jsx\";\r\n+import {Input} from \"postcss\";\r\n+\r\n+const Messages = () => {\r\n+\r\n+    const navigate = useNavigate();\r\n+\r\n+    const {token} = useAuth();\r\n+\r\n+    const {messages, setMessages, userToChat, setUserToChat, handleCountUnread} = useApp()\r\n+\r\n+    const [messInput, setMessInput] = useState(\"\");\r\n+\r\n+    const endOfMessagesRef = useRef(null);\r\n+\r\n+    const scrollToBottom = () => {\r\n+        // endOfMessagesRef.current?.scrollIntoView({behavior: 'smooth'});\r\n+    };\r\n+\r\n+    const handleClick = () => {\r\n+        localStorage.removeItem('userToChat');\r\n+        navigate('/discussion');\r\n+    }\r\n+\r\n+    const handleInputChange = (e) => {\r\n+        setMessInput(e.target.value)\r\n+    }\r\n+\r\n+    const {socket} = useSocketContext();\r\n+\r\n+\r\n+    useEffect(() => {\r\n+\r\n+        const handleShown = async () => {\r\n+\r\n+            const user = await JSON.parse(localStorage.getItem('userToChat'));\r\n+\r\n+            setUserToChat({\r\n+                id: user.id,\r\n+                fullName: user.fullName,\r\n+                accountType: user.accountType,\r\n+                pic: user.pic\r\n+            })\r\n+\r\n+            const messagesRes = await fetch(SERVERLINK + '/api/messages/' + await user.id, {\r\n+                method: \"GET\",\r\n+                headers: {\r\n+                    \"Content-Type\": \"application/json\",\r\n+                    \"token\": token\r\n+                }\r\n+            })\r\n+\r\n+            const allMessages = await messagesRes.json();\r\n+\r\n+            setMessages(await allMessages.messages);\r\n+\r\n+            scrollToBottom();\r\n+\r\n+        }\r\n+\r\n+        handleShown();\r\n+\r\n+        socket?.on(\"newMessage\", (newMessage) => {\r\n+            setMessages([...messages, newMessage]);\r\n+            handleCountUnread();\r\n+            handleShowConversation();\r\n+        });\r\n+\r\n+        return () => socket?.off(\"newMessage\");\r\n+\r\n+    }, [messages, socket]);\r\n+\r\n+\r\n+    const handleSendMessage = async (e) => {\r\n+        e.preventDefault();\r\n+\r\n+        const userToChat = await JSON.parse(localStorage.getItem('userToChat')).id;\r\n+\r\n+        const response = await fetch(SERVERLINK + '/api/messages/send/' + userToChat, {\r\n+            method: \"POST\",\r\n+            headers: {\r\n+                \"Content-Type\": \"application/json\",\r\n+                \"token\": token\r\n+            },\r\n+            body: JSON.stringify({message: messInput})\r\n+        });\r\n+\r\n+        const answer = await response.json();\r\n+\r\n+        console.log(answer);\r\n+        setMessInput(\"\");\r\n+        scrollToBottom();\r\n+    }\r\n+    return (\r\n+        <section\r\n+            className=\"flex flex-col items-center justify-center w-full gap-4  rounded-xl bg-white-100 h-[85vh] relative overflow-hidden\">\r\n+            <div\r\n+                className=\"flex items-center justify-between w-full py-4 px-6 border-0 border-b border-b-black-20  bg-white-100 top-0 z-40\">\r\n+                <div className=\"flex items-center justify-between \">\r\n+                    <Icon variant=\"ghost\" icon=\"bi bi-chevron-left \" onClick={() => navigate(\"/discussion\")}/>\r\n+                    <div className=\"flex items-center gap-2 cursor-pointer\">\r\n+                        <img src={userToChat.pic} className={\"size-[54px] rounded-full bg-black-20\"}/>\r\n+                        <p className={\"text-black-100 text-lead\"}>{userToChat.fullName}<span\r\n+                            className=\"text-small-1 text-black-80\">({userToChat.accounttype})</span>\r\n+                        </p>\r\n+                    </div>\r\n+                </div>\r\n+                <Button variant=\"secondary\">Profile</Button>\r\n+            </div>\r\n+            <div\r\n+                className=\"flex flex-col gap-4 items-start justify-start h-screen px-6 py-[24px] w-full scrollbar-none overflow-y-scroll \">\r\n+                {\r\n+                    messages.length > 0 ? messages.map(message =>\r\n+                        (<>\r\n+                                {\r\n+                                    message.receiverid === userToChat.id ? (\r\n+                                        <div className=\"w-full flex justify-start\">\r\n+                                            <Message\r\n+                                                message={message.content}\r\n+                                                sentDate=\"2 minutes\"/>\r\n+                                        </div>\r\n+                                    ) : (\r\n+                                        <div className=\"w-full flex justify-end\">\r\n+                                            <Message\r\n+                                                message={message.content}\r\n+                                                sentDate={new Date(message.sentdate).toLocaleString()} sentByCurrentUser/>\r\n+                                        </div>\r\n+                                    )\r\n+                                }\r\n+                            </>\r\n+                        )) : (\r\n+                        <p className=\"text-black-40 w-full h-screen text-center flex items-center justify-center text-subtitle-3\">\r\n+                            Envoyer un message!\r\n+                        </p>\r\n+                    )\r\n+                    \r\n+                }\r\n+                <div ref={endOfMessagesRef}/>\r\n+            </div>\r\n+            <div className=\"border-0 bg-white-100 px-6 py-4 w-full border-t border-t-black-20  bottom-0 z-40\">\r\n+                <form className=\"flex items-center justify-between gap-4\" onSubmit={handleSendMessage}>\r\n+                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-image\"/>\r\n+                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-emoji-smile\"/>\r\n+                    <TextInput rounded=\"full\" block\r\n+                               className=\"flex-1 outline-none bg-gray-100  text-base text-black-80 px-6 py-3\"\r\n+                               placeholder=\"Ecrire un message ....\"\r\n+                               onChange={handleInputChange}\r\n+                               value={messInput}\r\n+                    />\r\n+                    <Icon onClick={handleSendMessage} icon=\"bi bi-arrow-up\" size=\"sm\"/>\r\n+                </form>\r\n+            </div>\r\n+        </section>\r\n+    )\r\n+}\r\n+\r\n+\r\n+const Message = ({message, sentDate, sentByCurrentUser = false}) => {\r\n+\r\n+    const { timeSince } = useApp()\r\n+\r\n+    return <div className={`space-y-1 max-w-1/2`}>\r\n+        <div className={`p-4  rounded-2xl space-y-3 w-full ${sentByCurrentUser ? 'bg-primary-20' : 'bg-black-10'}`}>\r\n+            <p className=\"text-small-2 text-black-80 \">{sentDate}</p>\r\n+            <p className=\"text-small-1 text-black-100\">{message}</p>\r\n+        </div>\r\n+\r\n+        <div className={`flex items-center  w-full gap-2 ${sentByCurrentUser ? 'justify-end' : 'justify-start'}`}>\r\n+            <Icon variant=\"ghost\" icon=\"bi bi-trash\" size=\"sm\"/>\r\n+            {\r\n+                !sentByCurrentUser &&\r\n+                <Icon variant=\"ghost\" icon=\"bi bi-arrow-90deg-down\" className=\"-rotate-90\" size=\"sm\"/>\r\n+            }\r\n+        </div>\r\n+    </div>\r\n+}\r\n+\r\n+export default Messages;\r\n+\r\n"
                },
                {
                    "date": 1722234988378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,187 @@\n+import {useNavigate} from \"react-router-dom\";\r\n+import {Button, TextArea, TextInput} from \"../../styles/components\";\r\n+import {useAuth} from \"../../context/AuthProvider\";\r\n+import {useApp} from \"../../context/AppPorvider\";\r\n+import {useEffect, useRef, useState} from \"react\";\r\n+import {useSocketContext} from \"../../context/SocketContext\";\r\n+import {SERVERLINK} from \"../../constants\";\r\n+import Mess from \"../../components/pages/conversations/Message.jsx\";\r\n+import Icon from \"../../components/ui/Icon.jsx\";\r\n+import {Input} from \"postcss\";\r\n+\r\n+const Messages = () => {\r\n+\r\n+    const navigate = useNavigate();\r\n+\r\n+    const {token} = useAuth();\r\n+\r\n+    const {messages, setMessages, userToChat, setUserToChat, handleCountUnread} = useApp()\r\n+\r\n+    const [messInput, setMessInput] = useState(\"\");\r\n+\r\n+    const endOfMessagesRef = useRef(null);\r\n+\r\n+    const scrollToBottom = () => {\r\n+        // endOfMessagesRef.current?.scrollIntoView({behavior: 'smooth'});\r\n+    };\r\n+\r\n+    const handleClick = () => {\r\n+        localStorage.removeItem('userToChat');\r\n+        navigate('/discussion');\r\n+    }\r\n+\r\n+    const handleInputChange = (e) => {\r\n+        setMessInput(e.target.value)\r\n+    }\r\n+\r\n+    const {socket} = useSocketContext();\r\n+\r\n+\r\n+    useEffect(() => {\r\n+\r\n+        const handleShown = async () => {\r\n+\r\n+            const user = await JSON.parse(localStorage.getItem('userToChat'));\r\n+\r\n+            setUserToChat({\r\n+                id: user.id,\r\n+                fullName: user.fullName,\r\n+                accountType: user.accountType,\r\n+                pic: user.pic\r\n+            })\r\n+\r\n+            const messagesRes = await fetch(SERVERLINK + '/api/messages/' + await user.id, {\r\n+                method: \"GET\",\r\n+                headers: {\r\n+                    \"Content-Type\": \"application/json\",\r\n+                    \"token\": token\r\n+                }\r\n+            })\r\n+\r\n+            const allMessages = await messagesRes.json();\r\n+\r\n+            setMessages(await allMessages.messages);\r\n+\r\n+            scrollToBottom();\r\n+\r\n+        }\r\n+\r\n+        handleShown();\r\n+\r\n+        socket?.on(\"newMessage\", (newMessage) => {\r\n+            setMessages([...messages, newMessage]);\r\n+            handleCountUnread();\r\n+            handleShowConversation();\r\n+        });\r\n+\r\n+        return () => socket?.off(\"newMessage\");\r\n+\r\n+    }, [messages, socket]);\r\n+\r\n+\r\n+    const handleSendMessage = async (e) => {\r\n+        e.preventDefault();\r\n+\r\n+        const userToChat = await JSON.parse(localStorage.getItem('userToChat')).id;\r\n+\r\n+        const response = await fetch(SERVERLINK + '/api/messages/send/' + userToChat, {\r\n+            method: \"POST\",\r\n+            headers: {\r\n+                \"Content-Type\": \"application/json\",\r\n+                \"token\": token\r\n+            },\r\n+            body: JSON.stringify({message: messInput})\r\n+        });\r\n+\r\n+        const answer = await response.json();\r\n+\r\n+        console.log(answer);\r\n+        setMessInput(\"\");\r\n+        scrollToBottom();\r\n+    }\r\n+    return (\r\n+        <section\r\n+            className=\"flex flex-col items-center justify-center w-full gap-4  rounded-xl bg-white-100 h-[85vh] relative overflow-hidden\">\r\n+            <div\r\n+                className=\"flex items-center justify-between w-full py-4 px-6 border-0 border-b border-b-black-20  bg-white-100 top-0 z-40\">\r\n+                <div className=\"flex items-center justify-between \">\r\n+                    <Icon variant=\"ghost\" icon=\"bi bi-chevron-left \" onClick={() => navigate(\"/discussion\")}/>\r\n+                    <div className=\"flex items-center gap-2 cursor-pointer\">\r\n+                        <img src={userToChat.pic} className={\"size-[54px] rounded-full bg-black-20\"}/>\r\n+                        <p className={\"text-black-100 text-lead\"}>{userToChat.fullName}<span\r\n+                            className=\"text-small-1 text-black-80\">({userToChat.accounttype})</span>\r\n+                        </p>\r\n+                    </div>\r\n+                </div>\r\n+                <Button variant=\"secondary\">Profile</Button>\r\n+            </div>\r\n+            <div\r\n+                className=\"flex flex-col gap-4 items-start justify-start h-screen px-6 py-[24px] w-full scrollbar-none overflow-y-scroll \">\r\n+                {\r\n+                    messages.length > 0 ? messages.map(message =>\r\n+                        (<>\r\n+                                {\r\n+                                    message.receiverid === userToChat.id ? (\r\n+                                        <div className=\"w-full flex justify-start\">\r\n+                                            <Message\r\n+                                                message={message.content}\r\n+                                                sentDate=\"2 minutes\"/>\r\n+                                        </div>\r\n+                                    ) : (\r\n+                                        <div className=\"w-full flex justify-end\">\r\n+                                            <Message\r\n+                                                message={message.content}\r\n+                                                sentDate={new Date(message.sentdate).toLocaleString()} sentByCurrentUser/>\r\n+                                        </div>\r\n+                                    )\r\n+                                }\r\n+                            </>\r\n+                        )) : (\r\n+                        <p className=\"text-black-40 w-full h-screen text-center flex items-center justify-center text-subtitle-3\">\r\n+                            Envoyer un message!\r\n+                        </p>\r\n+                    )\r\n+                    \r\n+                }\r\n+                <div ref={endOfMessagesRef}/>\r\n+            </div>\r\n+            <div className=\"border-0 bg-white-100 px-6 py-4 w-full border-t border-t-black-20  bottom-0 z-40\">\r\n+                <form className=\"flex items-center justify-between gap-4\" onSubmit={handleSendMessage}>\r\n+                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-image\"/>\r\n+                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-emoji-smile\"/>\r\n+                    <TextInput rounded=\"full\" block\r\n+                               className=\"flex-1 outline-none bg-gray-100  text-base text-black-80 px-6 py-3\"\r\n+                               placeholder=\"Ecrire un message ....\"\r\n+                               onChange={handleInputChange}\r\n+                               value={messInput}\r\n+                    />\r\n+                    <Icon onClick={handleSendMessage} icon=\"bi bi-arrow-up\" size=\"sm\"/>\r\n+                </form>\r\n+            </div>\r\n+        </section>\r\n+    )\r\n+}\r\n+\r\n+\r\n+const Message = ({message, sentDate, sentByCurrentUser = false}) => {\r\n+\r\n+    const { timeSince } = useApp()\r\n+\r\n+    return <div className={`space-y-1 max-w-1/2`}>\r\n+        <div className={`p-4  rounded-2xl space-y-3 w-full ${sentByCurrentUser ? 'bg-primary-20' : 'bg-black-10'}`}>\r\n+            <p className=\"text-small-2 text-black-80 \">{sentDate}</p>\r\n+            <p className=\"text-small-1 text-black-100\">{message}</p>\r\n+        </div>\r\n+\r\n+        <div className={`flex items-center  w-full gap-2 ${sentByCurrentUser ? 'justify-end' : 'justify-start'}`}>\r\n+            <Icon variant=\"ghost\" icon=\"bi bi-trash\" size=\"sm\"/>\r\n+            {\r\n+                !sentByCurrentUser &&\r\n+                <Icon variant=\"ghost\" icon=\"bi bi-arrow-90deg-down\" className=\"-rotate-90\" size=\"sm\"/>\r\n+            }\r\n+        </div>\r\n+    </div>\r\n+}\r\n+\r\n+export default Messages;\r\n+\r\n"
                },
                {
                    "date": 1722234994289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,377 +184,4 @@\n }\r\n \r\n export default Messages;\r\n \r\n-import {useNavigate} from \"react-router-dom\";\r\n-import {Button, TextArea, TextInput} from \"../../styles/components\";\r\n-import {useAuth} from \"../../context/AuthProvider\";\r\n-import {useApp} from \"../../context/AppPorvider\";\r\n-import {useEffect, useRef, useState} from \"react\";\r\n-import {useSocketContext} from \"../../context/SocketContext\";\r\n-import {SERVERLINK} from \"../../constants\";\r\n-import Mess from \"../../components/pages/conversations/Message.jsx\";\r\n-import Icon from \"../../components/ui/Icon.jsx\";\r\n-import {Input} from \"postcss\";\r\n-\r\n-const Messages = () => {\r\n-\r\n-    const navigate = useNavigate();\r\n-\r\n-    const {token} = useAuth();\r\n-\r\n-    const {messages, setMessages, userToChat, setUserToChat, handleCountUnread} = useApp()\r\n-\r\n-    const [messInput, setMessInput] = useState(\"\");\r\n-\r\n-    const endOfMessagesRef = useRef(null);\r\n-\r\n-    const scrollToBottom = () => {\r\n-        // endOfMessagesRef.current?.scrollIntoView({behavior: 'smooth'});\r\n-    };\r\n-\r\n-    const handleClick = () => {\r\n-        localStorage.removeItem('userToChat');\r\n-        navigate('/discussion');\r\n-    }\r\n-\r\n-    const handleInputChange = (e) => {\r\n-        setMessInput(e.target.value)\r\n-    }\r\n-\r\n-    const {socket} = useSocketContext();\r\n-\r\n-\r\n-    useEffect(() => {\r\n-\r\n-        const handleShown = async () => {\r\n-\r\n-            const user = await JSON.parse(localStorage.getItem('userToChat'));\r\n-\r\n-            setUserToChat({\r\n-                id: user.id,\r\n-                fullName: user.fullName,\r\n-                accountType: user.accountType,\r\n-                pic: user.pic\r\n-            })\r\n-\r\n-            const messagesRes = await fetch(SERVERLINK + '/api/messages/' + await user.id, {\r\n-                method: \"GET\",\r\n-                headers: {\r\n-                    \"Content-Type\": \"application/json\",\r\n-                    \"token\": token\r\n-                }\r\n-            })\r\n-\r\n-            const allMessages = await messagesRes.json();\r\n-\r\n-            setMessages(await allMessages.messages);\r\n-\r\n-            scrollToBottom();\r\n-\r\n-        }\r\n-\r\n-        handleShown();\r\n-\r\n-        socket?.on(\"newMessage\", (newMessage) => {\r\n-            setMessages([...messages, newMessage]);\r\n-            handleCountUnread();\r\n-            handleShowConversation();\r\n-        });\r\n-\r\n-        return () => socket?.off(\"newMessage\");\r\n-\r\n-    }, [messages, socket]);\r\n-\r\n-\r\n-    const handleSendMessage = async (e) => {\r\n-        e.preventDefault();\r\n-\r\n-        const userToChat = await JSON.parse(localStorage.getItem('userToChat')).id;\r\n-\r\n-        const response = await fetch(SERVERLINK + '/api/messages/send/' + userToChat, {\r\n-            method: \"POST\",\r\n-            headers: {\r\n-                \"Content-Type\": \"application/json\",\r\n-                \"token\": token\r\n-            },\r\n-            body: JSON.stringify({message: messInput})\r\n-        });\r\n-\r\n-        const answer = await response.json();\r\n-\r\n-        console.log(answer);\r\n-        setMessInput(\"\");\r\n-        scrollToBottom();\r\n-    }\r\n-    return (\r\n-        <section\r\n-            className=\"flex flex-col items-center justify-center w-full gap-4  rounded-xl bg-white-100 h-[85vh] relative overflow-hidden\">\r\n-            <div\r\n-                className=\"flex items-center justify-between w-full py-4 px-6 border-0 border-b border-b-black-20  bg-white-100 top-0 z-40\">\r\n-                <div className=\"flex items-center justify-between \">\r\n-                    <Icon variant=\"ghost\" icon=\"bi bi-chevron-left \" onClick={() => navigate(\"/discussion\")}/>\r\n-                    <div className=\"flex items-center gap-2 cursor-pointer\">\r\n-                        <img src={userToChat.pic} className={\"size-[54px] rounded-full bg-black-20\"}/>\r\n-                        <p className={\"text-black-100 text-lead\"}>{userToChat.fullName}<span\r\n-                            className=\"text-small-1 text-black-80\">({userToChat.accounttype})</span>\r\n-                        </p>\r\n-                    </div>\r\n-                </div>\r\n-                <Button variant=\"secondary\">Profile</Button>\r\n-            </div>\r\n-            <div\r\n-                className=\"flex flex-col gap-4 items-start justify-start h-screen px-6 py-[24px] w-full scrollbar-none overflow-y-scroll \">\r\n-                {\r\n-                    messages.length > 0 ? messages.map(message =>\r\n-                        (<>\r\n-                                {\r\n-                                    message.receiverid === userToChat.id ? (\r\n-                                        <div className=\"w-full flex justify-start\">\r\n-                                            <Message\r\n-                                                message={message.content}\r\n-                                                sentDate=\"2 minutes\"/>\r\n-                                        </div>\r\n-                                    ) : (\r\n-                                        <div className=\"w-full flex justify-end\">\r\n-                                            <Message\r\n-                                                message={message.content}\r\n-                                                sentDate={new Date(message.sentdate).toLocaleString()} sentByCurrentUser/>\r\n-                                        </div>\r\n-                                    )\r\n-                                }\r\n-                            </>\r\n-                        )) : (\r\n-                        <p className=\"text-black-40 w-full h-screen text-center flex items-center justify-center text-subtitle-3\">\r\n-                            Envoyer un message!\r\n-                        </p>\r\n-                    )\r\n-                    \r\n-                }\r\n-                <div ref={endOfMessagesRef}/>\r\n-            </div>\r\n-            <div className=\"border-0 bg-white-100 px-6 py-4 w-full border-t border-t-black-20  bottom-0 z-40\">\r\n-                <form className=\"flex items-center justify-between gap-4\" onSubmit={handleSendMessage}>\r\n-                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-image\"/>\r\n-                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-emoji-smile\"/>\r\n-                    <TextInput rounded=\"full\" block\r\n-                               className=\"flex-1 outline-none bg-gray-100  text-base text-black-80 px-6 py-3\"\r\n-                               placeholder=\"Ecrire un message ....\"\r\n-                               onChange={handleInputChange}\r\n-                               value={messInput}\r\n-                    />\r\n-                    <Icon onClick={handleSendMessage} icon=\"bi bi-arrow-up\" size=\"sm\"/>\r\n-                </form>\r\n-            </div>\r\n-        </section>\r\n-    )\r\n-}\r\n-\r\n-\r\n-const Message = ({message, sentDate, sentByCurrentUser = false}) => {\r\n-\r\n-    const { timeSince } = useApp()\r\n-\r\n-    return <div className={`space-y-1 max-w-1/2`}>\r\n-        <div className={`p-4  rounded-2xl space-y-3 w-full ${sentByCurrentUser ? 'bg-primary-20' : 'bg-black-10'}`}>\r\n-            <p className=\"text-small-2 text-black-80 \">{sentDate}</p>\r\n-            <p className=\"text-small-1 text-black-100\">{message}</p>\r\n-        </div>\r\n-\r\n-        <div className={`flex items-center  w-full gap-2 ${sentByCurrentUser ? 'justify-end' : 'justify-start'}`}>\r\n-            <Icon variant=\"ghost\" icon=\"bi bi-trash\" size=\"sm\"/>\r\n-            {\r\n-                !sentByCurrentUser &&\r\n-                <Icon variant=\"ghost\" icon=\"bi bi-arrow-90deg-down\" className=\"-rotate-90\" size=\"sm\"/>\r\n-            }\r\n-        </div>\r\n-    </div>\r\n-}\r\n-\r\n-export default Messages;\r\n-\r\n-import {useNavigate} from \"react-router-dom\";\r\n-import {Button, TextArea, TextInput} from \"../../styles/components\";\r\n-import {useAuth} from \"../../context/AuthProvider\";\r\n-import {useApp} from \"../../context/AppPorvider\";\r\n-import {useEffect, useRef, useState} from \"react\";\r\n-import {useSocketContext} from \"../../context/SocketContext\";\r\n-import {SERVERLINK} from \"../../constants\";\r\n-import Mess from \"../../components/pages/conversations/Message.jsx\";\r\n-import Icon from \"../../components/ui/Icon.jsx\";\r\n-import {Input} from \"postcss\";\r\n-\r\n-const Messages = () => {\r\n-\r\n-    const navigate = useNavigate();\r\n-\r\n-    const {token} = useAuth();\r\n-\r\n-    const {messages, setMessages, userToChat, setUserToChat, handleCountUnread} = useApp()\r\n-\r\n-    const [messInput, setMessInput] = useState(\"\");\r\n-\r\n-    const endOfMessagesRef = useRef(null);\r\n-\r\n-    const scrollToBottom = () => {\r\n-        // endOfMessagesRef.current?.scrollIntoView({behavior: 'smooth'});\r\n-    };\r\n-\r\n-    const handleClick = () => {\r\n-        localStorage.removeItem('userToChat');\r\n-        navigate('/discussion');\r\n-    }\r\n-\r\n-    const handleInputChange = (e) => {\r\n-        setMessInput(e.target.value)\r\n-    }\r\n-\r\n-    const {socket} = useSocketContext();\r\n-\r\n-\r\n-    useEffect(() => {\r\n-\r\n-        const handleShown = async () => {\r\n-\r\n-            const user = await JSON.parse(localStorage.getItem('userToChat'));\r\n-\r\n-            setUserToChat({\r\n-                id: user.id,\r\n-                fullName: user.fullName,\r\n-                accountType: user.accountType,\r\n-                pic: user.pic\r\n-            })\r\n-\r\n-            const messagesRes = await fetch(SERVERLINK + '/api/messages/' + await user.id, {\r\n-                method: \"GET\",\r\n-                headers: {\r\n-                    \"Content-Type\": \"application/json\",\r\n-                    \"token\": token\r\n-                }\r\n-            })\r\n-\r\n-            const allMessages = await messagesRes.json();\r\n-\r\n-            setMessages(await allMessages.messages);\r\n-\r\n-            scrollToBottom();\r\n-\r\n-        }\r\n-\r\n-        handleShown();\r\n-\r\n-        socket?.on(\"newMessage\", (newMessage) => {\r\n-            setMessages([...messages, newMessage]);\r\n-            handleCountUnread();\r\n-            handleShowConversation();\r\n-        });\r\n-\r\n-        return () => socket?.off(\"newMessage\");\r\n-\r\n-    }, [messages, socket]);\r\n-\r\n-\r\n-    const handleSendMessage = async (e) => {\r\n-        e.preventDefault();\r\n-\r\n-        const userToChat = await JSON.parse(localStorage.getItem('userToChat')).id;\r\n-\r\n-        const response = await fetch(SERVERLINK + '/api/messages/send/' + userToChat, {\r\n-            method: \"POST\",\r\n-            headers: {\r\n-                \"Content-Type\": \"application/json\",\r\n-                \"token\": token\r\n-            },\r\n-            body: JSON.stringify({message: messInput})\r\n-        });\r\n-\r\n-        const answer = await response.json();\r\n-\r\n-        console.log(answer);\r\n-        setMessInput(\"\");\r\n-        scrollToBottom();\r\n-    }\r\n-    return (\r\n-        <section\r\n-            className=\"flex flex-col items-center justify-center w-full gap-4  rounded-xl bg-white-100 h-[85vh] relative overflow-hidden\">\r\n-            <div\r\n-                className=\"flex items-center justify-between w-full py-4 px-6 border-0 border-b border-b-black-20  bg-white-100 top-0 z-40\">\r\n-                <div className=\"flex items-center justify-between \">\r\n-                    <Icon variant=\"ghost\" icon=\"bi bi-chevron-left \" onClick={() => navigate(\"/discussion\")}/>\r\n-                    <div className=\"flex items-center gap-2 cursor-pointer\">\r\n-                        <img src={userToChat.pic} className={\"size-[54px] rounded-full bg-black-20\"}/>\r\n-                        <p className={\"text-black-100 text-lead\"}>{userToChat.fullName}<span\r\n-                            className=\"text-small-1 text-black-80\">({userToChat.accounttype})</span>\r\n-                        </p>\r\n-                    </div>\r\n-                </div>\r\n-                <Button variant=\"secondary\">Profile</Button>\r\n-            </div>\r\n-            <div\r\n-                className=\"flex flex-col gap-4 items-start justify-start h-screen px-6 py-[24px] w-full scrollbar-none overflow-y-scroll \">\r\n-                {\r\n-                    messages.length > 0 ? messages.map(message =>\r\n-                        (<>\r\n-                                {\r\n-                                    message.receiverid === userToChat.id ? (\r\n-                                        <div className=\"w-full flex justify-start\">\r\n-                                            <Message\r\n-                                                message={message.content}\r\n-                                                sentDate=\"2 minutes\"/>\r\n-                                        </div>\r\n-                                    ) : (\r\n-                                        <div className=\"w-full flex justify-end\">\r\n-                                            <Message\r\n-                                                message={message.content}\r\n-                                                sentDate={new Date(message.sentdate).toLocaleString()} sentByCurrentUser/>\r\n-                                        </div>\r\n-                                    )\r\n-                                }\r\n-                            </>\r\n-                        )) : (\r\n-                        <p className=\"text-black-40 w-full h-screen text-center flex items-center justify-center text-subtitle-3\">\r\n-                            Envoyer un message!\r\n-                        </p>\r\n-                    )\r\n-                    \r\n-                }\r\n-                <div ref={endOfMessagesRef}/>\r\n-            </div>\r\n-            <div className=\"border-0 bg-white-100 px-6 py-4 w-full border-t border-t-black-20  bottom-0 z-40\">\r\n-                <form className=\"flex items-center justify-between gap-4\" onSubmit={handleSendMessage}>\r\n-                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-image\"/>\r\n-                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-emoji-smile\"/>\r\n-                    <TextInput rounded=\"full\" block\r\n-                               className=\"flex-1 outline-none bg-gray-100  text-base text-black-80 px-6 py-3\"\r\n-                               placeholder=\"Ecrire un message ....\"\r\n-                               onChange={handleInputChange}\r\n-                               value={messInput}\r\n-                    />\r\n-                    <Icon onClick={handleSendMessage} icon=\"bi bi-arrow-up\" size=\"sm\"/>\r\n-                </form>\r\n-            </div>\r\n-        </section>\r\n-    )\r\n-}\r\n-\r\n-\r\n-const Message = ({message, sentDate, sentByCurrentUser = false}) => {\r\n-\r\n-    \r\n-    return <div className={`space-y-1 max-w-1/2`}>\r\n-        <div className={`p-4  rounded-2xl space-y-3 w-full ${sentByCurrentUser ? 'bg-primary-20' : 'bg-black-10'}`}>\r\n-            <p className=\"text-small-2 text-black-80 \">{sentDate}</p>\r\n-            <p className=\"text-small-1 text-black-100\">{message}</p>\r\n-        </div>\r\n-\r\n-        <div className={`flex items-center  w-full gap-2 ${sentByCurrentUser ? 'justify-end' : 'justify-start'}`}>\r\n-            <Icon variant=\"ghost\" icon=\"bi bi-trash\" size=\"sm\"/>\r\n-            {\r\n-                !sentByCurrentUser &&\r\n-                <Icon variant=\"ghost\" icon=\"bi bi-arrow-90deg-down\" className=\"-rotate-90\" size=\"sm\"/>\r\n-            }\r\n-        </div>\r\n-    </div>\r\n-}\r\n-\r\n-export default Messages;\r\n-\r\n"
                },
                {
                    "date": 1722235010549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n     const { timeSince } = useApp()\r\n \r\n     return <div className={`space-y-1 max-w-1/2`}>\r\n         <div className={`p-4  rounded-2xl space-y-3 w-full ${sentByCurrentUser ? 'bg-primary-20' : 'bg-black-10'}`}>\r\n-            <p className=\"text-small-2 text-black-80 \">{sentDate}</p>\r\n+            <p className=\"text-small-2 text-black-80 \">{timeSince(message.sentdate, 3)}</p>\r\n             <p className=\"text-small-1 text-black-100\">{message}</p>\r\n         </div>\r\n \r\n         <div className={`flex items-center  w-full gap-2 ${sentByCurrentUser ? 'justify-end' : 'justify-start'}`}>\r\n"
                },
                {
                    "date": 1722235028031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,9 +130,9 @@\n                                     ) : (\r\n                                         <div className=\"w-full flex justify-end\">\r\n                                             <Message\r\n                                                 message={message.content}\r\n-                                                sentDate={new Date(message.sentdate).toLocaleString()} sentByCurrentUser/>\r\n+                                                sentDate={new Date(message.sentdate} sentByCurrentUser/>\r\n                                         </div>\r\n                                     )\r\n                                 }\r\n                             </>\r\n"
                },
                {
                    "date": 1722235033182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,9 +130,9 @@\n                                     ) : (\r\n                                         <div className=\"w-full flex justify-end\">\r\n                                             <Message\r\n                                                 message={message.content}\r\n-                                                sentDate={new Date(message.sentdate} sentByCurrentUser/>\r\n+                                                sentDate={message.sentdate} sentByCurrentUser/>\r\n                                         </div>\r\n                                     )\r\n                                 }\r\n                             </>\r\n"
                },
                {
                    "date": 1722235075592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,187 @@\n+import {useNavigate} from \"react-router-dom\";\r\n+import {Button, TextArea, TextInput} from \"../../styles/components\";\r\n+import {useAuth} from \"../../context/AuthProvider\";\r\n+import {useApp} from \"../../context/AppPorvider\";\r\n+import {useEffect, useRef, useState} from \"react\";\r\n+import {useSocketContext} from \"../../context/SocketContext\";\r\n+import {SERVERLINK} from \"../../constants\";\r\n+import Mess from \"../../components/pages/conversations/Message.jsx\";\r\n+import Icon from \"../../components/ui/Icon.jsx\";\r\n+import {Input} from \"postcss\";\r\n+\r\n+const Messages = () => {\r\n+\r\n+    const navigate = useNavigate();\r\n+\r\n+    const {token} = useAuth();\r\n+\r\n+    const {messages, setMessages, userToChat, setUserToChat, handleCountUnread} = useApp()\r\n+\r\n+    const [messInput, setMessInput] = useState(\"\");\r\n+\r\n+    const endOfMessagesRef = useRef(null);\r\n+\r\n+    const scrollToBottom = () => {\r\n+        // endOfMessagesRef.current?.scrollIntoView({behavior: 'smooth'});\r\n+    };\r\n+\r\n+    const handleClick = () => {\r\n+        localStorage.removeItem('userToChat');\r\n+        navigate('/discussion');\r\n+    }\r\n+\r\n+    const handleInputChange = (e) => {\r\n+        setMessInput(e.target.value)\r\n+    }\r\n+\r\n+    const {socket} = useSocketContext();\r\n+\r\n+\r\n+    useEffect(() => {\r\n+\r\n+        const handleShown = async () => {\r\n+\r\n+            const user = await JSON.parse(localStorage.getItem('userToChat'));\r\n+\r\n+            setUserToChat({\r\n+                id: user.id,\r\n+                fullName: user.fullName,\r\n+                accountType: user.accountType,\r\n+                pic: user.pic\r\n+            })\r\n+\r\n+            const messagesRes = await fetch(SERVERLINK + '/api/messages/' + await user.id, {\r\n+                method: \"GET\",\r\n+                headers: {\r\n+                    \"Content-Type\": \"application/json\",\r\n+                    \"token\": token\r\n+                }\r\n+            })\r\n+\r\n+            const allMessages = await messagesRes.json();\r\n+\r\n+            setMessages(await allMessages.messages);\r\n+\r\n+            scrollToBottom();\r\n+\r\n+        }\r\n+\r\n+        handleShown();\r\n+\r\n+        socket?.on(\"newMessage\", (newMessage) => {\r\n+            setMessages([...messages, newMessage]);\r\n+            handleCountUnread();\r\n+            handleShowConversation();\r\n+        });\r\n+\r\n+        return () => socket?.off(\"newMessage\");\r\n+\r\n+    }, [messages, socket]);\r\n+\r\n+\r\n+    const handleSendMessage = async (e) => {\r\n+        e.preventDefault();\r\n+\r\n+        const userToChat = await JSON.parse(localStorage.getItem('userToChat')).id;\r\n+\r\n+        const response = await fetch(SERVERLINK + '/api/messages/send/' + userToChat, {\r\n+            method: \"POST\",\r\n+            headers: {\r\n+                \"Content-Type\": \"application/json\",\r\n+                \"token\": token\r\n+            },\r\n+            body: JSON.stringify({message: messInput})\r\n+        });\r\n+\r\n+        const answer = await response.json();\r\n+\r\n+        console.log(answer);\r\n+        setMessInput(\"\");\r\n+        scrollToBottom();\r\n+    }\r\n+    return (\r\n+        <section\r\n+            className=\"flex flex-col items-center justify-center w-full gap-4  rounded-xl bg-white-100 h-[85vh] relative overflow-hidden\">\r\n+            <div\r\n+                className=\"flex items-center justify-between w-full py-4 px-6 border-0 border-b border-b-black-20  bg-white-100 top-0 z-40\">\r\n+                <div className=\"flex items-center justify-between \">\r\n+                    <Icon variant=\"ghost\" icon=\"bi bi-chevron-left \" onClick={() => navigate(\"/discussion\")}/>\r\n+                    <div className=\"flex items-center gap-2 cursor-pointer\">\r\n+                        <img src={userToChat.pic} className={\"size-[54px] rounded-full bg-black-20\"}/>\r\n+                        <p className={\"text-black-100 text-lead\"}>{userToChat.fullName}<span\r\n+                            className=\"text-small-1 text-black-80\">({userToChat.accounttype})</span>\r\n+                        </p>\r\n+                    </div>\r\n+                </div>\r\n+                <Button variant=\"secondary\">Profile</Button>\r\n+            </div>\r\n+            <div\r\n+                className=\"flex flex-col gap-4 items-start justify-start h-screen px-6 py-[24px] w-full scrollbar-none overflow-y-scroll \">\r\n+                {\r\n+                    messages.length > 0 ? messages.map(message =>\r\n+                        (<>\r\n+                                {\r\n+                                    message.receiverid === userToChat.id ? (\r\n+                                        <div className=\"w-full flex justify-start\">\r\n+                                            <Message\r\n+                                                message={message.content}\r\n+                                                sentDate={message.sentdate}/>\r\n+                                        </div>\r\n+                                    ) : (\r\n+                                        <div className=\"w-full flex justify-end\">\r\n+                                            <Message\r\n+                                                message={message.content}\r\n+                                                sentDate={message.sentdate} sentByCurrentUser/>\r\n+                                        </div>\r\n+                                    )\r\n+                                }\r\n+                            </>\r\n+                        )) : (\r\n+                        <p className=\"text-black-40 w-full h-screen text-center flex items-center justify-center text-subtitle-3\">\r\n+                            Envoyer un message!\r\n+                        </p>\r\n+                    )\r\n+                    \r\n+                }\r\n+                <div ref={endOfMessagesRef}/>\r\n+            </div>\r\n+            <div className=\"border-0 bg-white-100 px-6 py-4 w-full border-t border-t-black-20  bottom-0 z-40\">\r\n+                <form className=\"flex items-center justify-between gap-4\" onSubmit={handleSendMessage}>\r\n+                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-image\"/>\r\n+                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-emoji-smile\"/>\r\n+                    <TextInput rounded=\"full\" block\r\n+                               className=\"flex-1 outline-none bg-gray-100  text-base text-black-80 px-6 py-3\"\r\n+                               placeholder=\"Ecrire un message ....\"\r\n+                               onChange={handleInputChange}\r\n+                               value={messInput}\r\n+                    />\r\n+                    <Icon onClick={handleSendMessage} icon=\"bi bi-arrow-up\" size=\"sm\"/>\r\n+                </form>\r\n+            </div>\r\n+        </section>\r\n+    )\r\n+}\r\n+\r\n+\r\n+const Message = ({message, sentDate, sentByCurrentUser = false}) => {\r\n+\r\n+    const { timeSince } = useApp()\r\n+\r\n+    return <div className={`space-y-1 max-w-1/2`}>\r\n+        <div className={`p-4  rounded-2xl space-y-3 w-full ${sentByCurrentUser ? 'bg-primary-20' : 'bg-black-10'}`}>\r\n+            <p className=\"text-small-2 text-black-80 \">{timeSince(message.sentdate, 3)}</p>\r\n+            <p className=\"text-small-1 text-black-100\">{message}</p>\r\n+        </div>\r\n+\r\n+        <div className={`flex items-center  w-full gap-2 ${sentByCurrentUser ? 'justify-end' : 'justify-start'}`}>\r\n+            <Icon variant=\"ghost\" icon=\"bi bi-trash\" size=\"sm\"/>\r\n+            {\r\n+                !sentByCurrentUser &&\r\n+                <Icon variant=\"ghost\" icon=\"bi bi-arrow-90deg-down\" className=\"-rotate-90\" size=\"sm\"/>\r\n+            }\r\n+        </div>\r\n+    </div>\r\n+}\r\n+\r\n+export default Messages;\r\n+\r\n"
                },
                {
                    "date": 1722235165721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,22 +10,19 @@\n import {Input} from \"postcss\";\r\n \r\n const Messages = () => {\r\n \r\n+\r\n     const navigate = useNavigate();\r\n \r\n-    const {token} = useAuth();\r\n+    const { token } = useAuth();\r\n \r\n-    const {messages, setMessages, userToChat, setUserToChat, handleCountUnread} = useApp()\r\n+    const { messages, setMessages, userToChat, setUserToChat, handleCountUnread, handleShown } = useApp()\r\n \r\n     const [messInput, setMessInput] = useState(\"\");\r\n \r\n     const endOfMessagesRef = useRef(null);\r\n \r\n-    const scrollToBottom = () => {\r\n-        // endOfMessagesRef.current?.scrollIntoView({behavior: 'smooth'});\r\n-    };\r\n-\r\n     const handleClick = () => {\r\n         localStorage.removeItem('userToChat');\r\n         navigate('/discussion');\r\n     }\r\n@@ -33,53 +30,27 @@\n     const handleInputChange = (e) => {\r\n         setMessInput(e.target.value)\r\n     }\r\n \r\n-    const {socket} = useSocketContext();\r\n+    const { socket } = useSocketContext();\r\n \r\n \r\n     useEffect(() => {\r\n \r\n-        const handleShown = async () => {\r\n+        handleShown(endOfMessagesRef);\r\n \r\n-            const user = await JSON.parse(localStorage.getItem('userToChat'));\r\n-\r\n-            setUserToChat({\r\n-                id: user.id,\r\n-                fullName: user.fullName,\r\n-                accountType: user.accountType,\r\n-                pic: user.pic\r\n-            })\r\n-\r\n-            const messagesRes = await fetch(SERVERLINK + '/api/messages/' + await user.id, {\r\n-                method: \"GET\",\r\n-                headers: {\r\n-                    \"Content-Type\": \"application/json\",\r\n-                    \"token\": token\r\n-                }\r\n-            })\r\n-\r\n-            const allMessages = await messagesRes.json();\r\n-\r\n-            setMessages(await allMessages.messages);\r\n-\r\n-            scrollToBottom();\r\n-\r\n-        }\r\n-\r\n-        handleShown();\r\n-\r\n-        socket?.on(\"newMessage\", (newMessage) => {\r\n-            setMessages([...messages, newMessage]);\r\n+        socket?.on(\"newMessage\", async () => {\r\n+            // setMessages([...messages, await newMessage]);\r\n+            handleShown(endOfMessagesRef);\r\n             handleCountUnread();\r\n-            handleShowConversation();\r\n         });\r\n \r\n         return () => socket?.off(\"newMessage\");\r\n \r\n-    }, [messages, socket]);\r\n+    }, [socket]);\r\n \r\n \r\n+\r\n     const handleSendMessage = async (e) => {\r\n         e.preventDefault();\r\n \r\n         const userToChat = await JSON.parse(localStorage.getItem('userToChat')).id;\r\n@@ -89,16 +60,17 @@\n             headers: {\r\n                 \"Content-Type\": \"application/json\",\r\n                 \"token\": token\r\n             },\r\n-            body: JSON.stringify({message: messInput})\r\n+            body: JSON.stringify({ message: messInput })\r\n         });\r\n \r\n         const answer = await response.json();\r\n \r\n+        handleShown(endOfMessagesRef);\r\n+\r\n         console.log(answer);\r\n         setMessInput(\"\");\r\n-        scrollToBottom();\r\n     }\r\n     return (\r\n         <section\r\n             className=\"flex flex-col items-center justify-center w-full gap-4  rounded-xl bg-white-100 h-[85vh] relative overflow-hidden\">\r\n@@ -184,191 +156,4 @@\n }\r\n \r\n export default Messages;\r\n \r\n-import {useNavigate} from \"react-router-dom\";\r\n-import {Button, TextArea, TextInput} from \"../../styles/components\";\r\n-import {useAuth} from \"../../context/AuthProvider\";\r\n-import {useApp} from \"../../context/AppPorvider\";\r\n-import {useEffect, useRef, useState} from \"react\";\r\n-import {useSocketContext} from \"../../context/SocketContext\";\r\n-import {SERVERLINK} from \"../../constants\";\r\n-import Mess from \"../../components/pages/conversations/Message.jsx\";\r\n-import Icon from \"../../components/ui/Icon.jsx\";\r\n-import {Input} from \"postcss\";\r\n-\r\n-const Messages = () => {\r\n-\r\n-    const navigate = useNavigate();\r\n-\r\n-    const {token} = useAuth();\r\n-\r\n-    const {messages, setMessages, userToChat, setUserToChat, handleCountUnread} = useApp()\r\n-\r\n-    const [messInput, setMessInput] = useState(\"\");\r\n-\r\n-    const endOfMessagesRef = useRef(null);\r\n-\r\n-    const scrollToBottom = () => {\r\n-        // endOfMessagesRef.current?.scrollIntoView({behavior: 'smooth'});\r\n-    };\r\n-\r\n-    const handleClick = () => {\r\n-        localStorage.removeItem('userToChat');\r\n-        navigate('/discussion');\r\n-    }\r\n-\r\n-    const handleInputChange = (e) => {\r\n-        setMessInput(e.target.value)\r\n-    }\r\n-\r\n-    const {socket} = useSocketContext();\r\n-\r\n-\r\n-    useEffect(() => {\r\n-\r\n-        const handleShown = async () => {\r\n-\r\n-            const user = await JSON.parse(localStorage.getItem('userToChat'));\r\n-\r\n-            setUserToChat({\r\n-                id: user.id,\r\n-                fullName: user.fullName,\r\n-                accountType: user.accountType,\r\n-                pic: user.pic\r\n-            })\r\n-\r\n-            const messagesRes = await fetch(SERVERLINK + '/api/messages/' + await user.id, {\r\n-                method: \"GET\",\r\n-                headers: {\r\n-                    \"Content-Type\": \"application/json\",\r\n-                    \"token\": token\r\n-                }\r\n-            })\r\n-\r\n-            const allMessages = await messagesRes.json();\r\n-\r\n-            setMessages(await allMessages.messages);\r\n-\r\n-            scrollToBottom();\r\n-\r\n-        }\r\n-\r\n-        handleShown();\r\n-\r\n-        socket?.on(\"newMessage\", (newMessage) => {\r\n-            setMessages([...messages, newMessage]);\r\n-            handleCountUnread();\r\n-            handleShowConversation();\r\n-        });\r\n-\r\n-        return () => socket?.off(\"newMessage\");\r\n-\r\n-    }, [messages, socket]);\r\n-\r\n-\r\n-    const handleSendMessage = async (e) => {\r\n-        e.preventDefault();\r\n-\r\n-        const userToChat = await JSON.parse(localStorage.getItem('userToChat')).id;\r\n-\r\n-        const response = await fetch(SERVERLINK + '/api/messages/send/' + userToChat, {\r\n-            method: \"POST\",\r\n-            headers: {\r\n-                \"Content-Type\": \"application/json\",\r\n-                \"token\": token\r\n-            },\r\n-            body: JSON.stringify({message: messInput})\r\n-        });\r\n-\r\n-        const answer = await response.json();\r\n-\r\n-        console.log(answer);\r\n-        setMessInput(\"\");\r\n-        scrollToBottom();\r\n-    }\r\n-    return (\r\n-        <section\r\n-            className=\"flex flex-col items-center justify-center w-full gap-4  rounded-xl bg-white-100 h-[85vh] relative overflow-hidden\">\r\n-            <div\r\n-                className=\"flex items-center justify-between w-full py-4 px-6 border-0 border-b border-b-black-20  bg-white-100 top-0 z-40\">\r\n-                <div className=\"flex items-center justify-between \">\r\n-                    <Icon variant=\"ghost\" icon=\"bi bi-chevron-left \" onClick={() => navigate(\"/discussion\")}/>\r\n-                    <div className=\"flex items-center gap-2 cursor-pointer\">\r\n-                        <img src={userToChat.pic} className={\"size-[54px] rounded-full bg-black-20\"}/>\r\n-                        <p className={\"text-black-100 text-lead\"}>{userToChat.fullName}<span\r\n-                            className=\"text-small-1 text-black-80\">({userToChat.accounttype})</span>\r\n-                        </p>\r\n-                    </div>\r\n-                </div>\r\n-                <Button variant=\"secondary\">Profile</Button>\r\n-            </div>\r\n-            <div\r\n-                className=\"flex flex-col gap-4 items-start justify-start h-screen px-6 py-[24px] w-full scrollbar-none overflow-y-scroll \">\r\n-                {\r\n-                    messages.length > 0 ? messages.map(message =>\r\n-                        (<>\r\n-                                {\r\n-                                    message.receiverid === userToChat.id ? (\r\n-                                        <div className=\"w-full flex justify-start\">\r\n-                                            <Message\r\n-                                                message={message.content}\r\n-                                                sentDate=\"2 minutes\"/>\r\n-                                        </div>\r\n-                                    ) : (\r\n-                                        <div className=\"w-full flex justify-end\">\r\n-                                            <Message\r\n-                                                message={message.content}\r\n-                                                sentDate={message.sentdate} sentByCurrentUser/>\r\n-                                        </div>\r\n-                                    )\r\n-                                }\r\n-                            </>\r\n-                        )) : (\r\n-                        <p className=\"text-black-40 w-full h-screen text-center flex items-center justify-center text-subtitle-3\">\r\n-                            Envoyer un message!\r\n-                        </p>\r\n-                    )\r\n-                    \r\n-                }\r\n-                <div ref={endOfMessagesRef}/>\r\n-            </div>\r\n-            <div className=\"border-0 bg-white-100 px-6 py-4 w-full border-t border-t-black-20  bottom-0 z-40\">\r\n-                <form className=\"flex items-center justify-between gap-4\" onSubmit={handleSendMessage}>\r\n-                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-image\"/>\r\n-                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-emoji-smile\"/>\r\n-                    <TextInput rounded=\"full\" block\r\n-                               className=\"flex-1 outline-none bg-gray-100  text-base text-black-80 px-6 py-3\"\r\n-                               placeholder=\"Ecrire un message ....\"\r\n-                               onChange={handleInputChange}\r\n-                               value={messInput}\r\n-                    />\r\n-                    <Icon onClick={handleSendMessage} icon=\"bi bi-arrow-up\" size=\"sm\"/>\r\n-                </form>\r\n-            </div>\r\n-        </section>\r\n-    )\r\n-}\r\n-\r\n-\r\n-const Message = ({message, sentDate, sentByCurrentUser = false}) => {\r\n-\r\n-    const { timeSince } = useApp()\r\n-\r\n-    return <div className={`space-y-1 max-w-1/2`}>\r\n-        <div className={`p-4  rounded-2xl space-y-3 w-full ${sentByCurrentUser ? 'bg-primary-20' : 'bg-black-10'}`}>\r\n-            <p className=\"text-small-2 text-black-80 \">{timeSince(message.sentdate, 3)}</p>\r\n-            <p className=\"text-small-1 text-black-100\">{message}</p>\r\n-        </div>\r\n-\r\n-        <div className={`flex items-center  w-full gap-2 ${sentByCurrentUser ? 'justify-end' : 'justify-start'}`}>\r\n-            <Icon variant=\"ghost\" icon=\"bi bi-trash\" size=\"sm\"/>\r\n-            {\r\n-                !sentByCurrentUser &&\r\n-                <Icon variant=\"ghost\" icon=\"bi bi-arrow-90deg-down\" className=\"-rotate-90\" size=\"sm\"/>\r\n-            }\r\n-        </div>\r\n-    </div>\r\n-}\r\n-\r\n-export default Messages;\r\n-\r\n"
                },
                {
                    "date": 1722235218492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,159 @@\n+import {useNavigate} from \"react-router-dom\";\r\n+import {Button, TextArea, TextInput} from \"../../styles/components\";\r\n+import {useAuth} from \"../../context/AuthProvider\";\r\n+import {useApp} from \"../../context/AppPorvider\";\r\n+import {useEffect, useRef, useState} from \"react\";\r\n+import {useSocketContext} from \"../../context/SocketContext\";\r\n+import {SERVERLINK} from \"../../constants\";\r\n+import Mess from \"../../components/pages/conversations/Message.jsx\";\r\n+import Icon from \"../../components/ui/Icon.jsx\";\r\n+import {Input} from \"postcss\";\r\n+\r\n+const Messages = () => {\r\n+\r\n+\r\n+    const navigate = useNavigate();\r\n+\r\n+    const { token } = useAuth();\r\n+\r\n+    const { messages, setMessages, userToChat, setUserToChat, handleCountUnread, handleShown } = useApp()\r\n+\r\n+    const [messInput, setMessInput] = useState(\"\");\r\n+\r\n+    const endOfMessagesRef = useRef(null);\r\n+\r\n+    const handleClick = () => {\r\n+        localStorage.removeItem('userToChat');\r\n+        navigate('/discussion');\r\n+    }\r\n+\r\n+    const handleInputChange = (e) => {\r\n+        setMessInput(e.target.value)\r\n+    }\r\n+\r\n+    const { socket } = useSocketContext();\r\n+\r\n+\r\n+    useEffect(() => {\r\n+\r\n+        handleShown(endOfMessagesRef);\r\n+\r\n+        socket?.on(\"newMessage\", async () => {\r\n+            // setMessages([...messages, await newMessage]);\r\n+            handleShown(endOfMessagesRef);\r\n+            handleCountUnread();\r\n+        });\r\n+\r\n+        return () => socket?.off(\"newMessage\");\r\n+\r\n+    }, [socket]);\r\n+\r\n+\r\n+\r\n+    const handleSendMessage = async (e) => {\r\n+        e.preventDefault();\r\n+\r\n+        const userToChat = await JSON.parse(localStorage.getItem('userToChat')).id;\r\n+\r\n+        const response = await fetch(SERVERLINK + '/api/messages/send/' + userToChat, {\r\n+            method: \"POST\",\r\n+            headers: {\r\n+                \"Content-Type\": \"application/json\",\r\n+                \"token\": token\r\n+            },\r\n+            body: JSON.stringify({ message: messInput })\r\n+        });\r\n+\r\n+        const answer = await response.json();\r\n+\r\n+        handleShown(endOfMessagesRef);\r\n+\r\n+        console.log(answer);\r\n+        setMessInput(\"\");\r\n+    }\r\n+    return (\r\n+        <section\r\n+            className=\"flex flex-col items-center justify-center w-full gap-4  rounded-xl bg-white-100 h-[85vh] relative overflow-hidden\">\r\n+            <div\r\n+                className=\"flex items-center justify-between w-full py-4 px-6 border-0 border-b border-b-black-20  bg-white-100 top-0 z-40\">\r\n+                <div className=\"flex items-center justify-between \">\r\n+                    <Icon variant=\"ghost\" icon=\"bi bi-chevron-left \" onClick={handleClick}/>\r\n+                    <div className=\"flex items-center gap-2 cursor-pointer\">\r\n+                        <img src={userToChat.pic} className={\"size-[54px] rounded-full bg-black-20\"}/>\r\n+                        <p className={\"text-black-100 text-lead\"}>{userToChat.fullName}<span\r\n+                            className=\"text-small-1 text-black-80\">({userToChat.accounttype})</span>\r\n+                        </p>\r\n+                    </div>\r\n+                </div>\r\n+                <Button variant=\"secondary\">Profile</Button>\r\n+            </div>\r\n+            <div\r\n+                className=\"flex flex-col gap-4 items-start justify-start h-screen px-6 py-[24px] w-full scrollbar-none overflow-y-scroll \">\r\n+                {\r\n+                    messages.length > 0 ? messages.map(message =>\r\n+                        (<>\r\n+                                {\r\n+                                    message.receiverid === userToChat.id ? (\r\n+                                        <div className=\"w-full flex justify-start\">\r\n+                                            <Message\r\n+                                                message={message.content}\r\n+                                                sentDate={message.sentdate}/>\r\n+                                        </div>\r\n+                                    ) : (\r\n+                                        <div className=\"w-full flex justify-end\">\r\n+                                            <Message\r\n+                                                message={message.content}\r\n+                                                sentDate={message.sentdate} sentByCurrentUser/>\r\n+                                        </div>\r\n+                                    )\r\n+                                }\r\n+                            </>\r\n+                        )) : (\r\n+                        <p className=\"text-black-40 w-full h-screen text-center flex items-center justify-center text-subtitle-3\">\r\n+                            Envoyer un message!\r\n+                        </p>\r\n+                    )\r\n+                    \r\n+                }\r\n+                <div ref={endOfMessagesRef}/>\r\n+            </div>\r\n+            <div className=\"border-0 bg-white-100 px-6 py-4 w-full border-t border-t-black-20  bottom-0 z-40\">\r\n+                <form className=\"flex items-center justify-between gap-4\" onSubmit={handleSendMessage}>\r\n+                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-image\"/>\r\n+                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-emoji-smile\"/>\r\n+                    <TextInput rounded=\"full\" block\r\n+                               className=\"flex-1 outline-none bg-gray-100  text-base text-black-80 px-6 py-3\"\r\n+                               placeholder=\"Ecrire un message ....\"\r\n+                               onChange={handleInputChange}\r\n+                               value={messInput}\r\n+                    />\r\n+                    <Icon onClick={handleSendMessage} icon=\"bi bi-arrow-up\" size=\"sm\"/>\r\n+                </form>\r\n+            </div>\r\n+        </section>\r\n+    )\r\n+}\r\n+\r\n+\r\n+const Message = ({message, sentDate, sentByCurrentUser = false}) => {\r\n+\r\n+    const { timeSince } = useApp()\r\n+\r\n+    return <div className={`space-y-1 max-w-1/2`}>\r\n+        <div className={`p-4  rounded-2xl space-y-3 w-full ${sentByCurrentUser ? 'bg-primary-20' : 'bg-black-10'}`}>\r\n+            <p className=\"text-small-2 text-black-80 \">{timeSince(message.sentdate, 3)}</p>\r\n+            <p className=\"text-small-1 text-black-100\">{message}</p>\r\n+        </div>\r\n+\r\n+        <div className={`flex items-center  w-full gap-2 ${sentByCurrentUser ? 'justify-end' : 'justify-start'}`}>\r\n+            <Icon variant=\"ghost\" icon=\"bi bi-trash\" size=\"sm\"/>\r\n+            {\r\n+                !sentByCurrentUser &&\r\n+                <Icon variant=\"ghost\" icon=\"bi bi-arrow-90deg-down\" className=\"-rotate-90\" size=\"sm\"/>\r\n+            }\r\n+        </div>\r\n+    </div>\r\n+}\r\n+\r\n+export default Messages;\r\n+\r\n"
                },
                {
                    "date": 1722235233609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,159 @@\n+import {useNavigate} from \"react-router-dom\";\r\n+import {Button, TextArea, TextInput} from \"../../styles/components\";\r\n+import {useAuth} from \"../../context/AuthProvider\";\r\n+import {useApp} from \"../../context/AppPorvider\";\r\n+import {useEffect, useRef, useState} from \"react\";\r\n+import {useSocketContext} from \"../../context/SocketContext\";\r\n+import {SERVERLINK} from \"../../constants\";\r\n+import Mess from \"../../components/pages/conversations/Message.jsx\";\r\n+import Icon from \"../../components/ui/Icon.jsx\";\r\n+import {Input} from \"postcss\";\r\n+\r\n+const Messages = () => {\r\n+\r\n+\r\n+    const navigate = useNavigate();\r\n+\r\n+    const { token } = useAuth();\r\n+\r\n+    const { messages, setMessages, userToChat, handleCountUnread, handleShown } = useApp()\r\n+\r\n+    const [messInput, setMessInput] = useState(\"\");\r\n+\r\n+    const endOfMessagesRef = useRef(null);\r\n+\r\n+    const handleClick = () => {\r\n+        localStorage.removeItem('userToChat');\r\n+        navigate('/discussion');\r\n+    }\r\n+\r\n+    const handleInputChange = (e) => {\r\n+        setMessInput(e.target.value)\r\n+    }\r\n+\r\n+    const { socket } = useSocketContext();\r\n+\r\n+\r\n+    useEffect(() => {\r\n+\r\n+        handleShown(endOfMessagesRef);\r\n+\r\n+        socket?.on(\"newMessage\", async () => {\r\n+            // setMessages([...messages, await newMessage]);\r\n+            handleShown(endOfMessagesRef);\r\n+            handleCountUnread();\r\n+        });\r\n+\r\n+        return () => socket?.off(\"newMessage\");\r\n+\r\n+    }, [socket]);\r\n+\r\n+\r\n+\r\n+    const handleSendMessage = async (e) => {\r\n+        e.preventDefault();\r\n+\r\n+        const userToChat = await JSON.parse(localStorage.getItem('userToChat')).id;\r\n+\r\n+        const response = await fetch(SERVERLINK + '/api/messages/send/' + userToChat, {\r\n+            method: \"POST\",\r\n+            headers: {\r\n+                \"Content-Type\": \"application/json\",\r\n+                \"token\": token\r\n+            },\r\n+            body: JSON.stringify({ message: messInput })\r\n+        });\r\n+\r\n+        const answer = await response.json();\r\n+\r\n+        handleShown(endOfMessagesRef);\r\n+\r\n+        console.log(answer);\r\n+        setMessInput(\"\");\r\n+    }\r\n+    return (\r\n+        <section\r\n+            className=\"flex flex-col items-center justify-center w-full gap-4  rounded-xl bg-white-100 h-[85vh] relative overflow-hidden\">\r\n+            <div\r\n+                className=\"flex items-center justify-between w-full py-4 px-6 border-0 border-b border-b-black-20  bg-white-100 top-0 z-40\">\r\n+                <div className=\"flex items-center justify-between \">\r\n+                    <Icon variant=\"ghost\" icon=\"bi bi-chevron-left \" onClick={handleClick}/>\r\n+                    <div className=\"flex items-center gap-2 cursor-pointer\">\r\n+                        <img src={userToChat.pic} className={\"size-[54px] rounded-full bg-black-20\"}/>\r\n+                        <p className={\"text-black-100 text-lead\"}>{userToChat.fullName}<span\r\n+                            className=\"text-small-1 text-black-80\">({userToChat.accounttype})</span>\r\n+                        </p>\r\n+                    </div>\r\n+                </div>\r\n+                <Button variant=\"secondary\">Profile</Button>\r\n+            </div>\r\n+            <div\r\n+                className=\"flex flex-col gap-4 items-start justify-start h-screen px-6 py-[24px] w-full scrollbar-none overflow-y-scroll \">\r\n+                {\r\n+                    messages.length > 0 ? messages.map(message =>\r\n+                        (<>\r\n+                                {\r\n+                                    message.receiverid === userToChat.id ? (\r\n+                                        <div className=\"w-full flex justify-start\">\r\n+                                            <Message\r\n+                                                message={message.content}\r\n+                                                sentDate={message.sentdate}/>\r\n+                                        </div>\r\n+                                    ) : (\r\n+                                        <div className=\"w-full flex justify-end\">\r\n+                                            <Message\r\n+                                                message={message.content}\r\n+                                                sentDate={message.sentdate} sentByCurrentUser/>\r\n+                                        </div>\r\n+                                    )\r\n+                                }\r\n+                            </>\r\n+                        )) : (\r\n+                        <p className=\"text-black-40 w-full h-screen text-center flex items-center justify-center text-subtitle-3\">\r\n+                            Envoyer un message!\r\n+                        </p>\r\n+                    )\r\n+                    \r\n+                }\r\n+                <div ref={endOfMessagesRef}/>\r\n+            </div>\r\n+            <div className=\"border-0 bg-white-100 px-6 py-4 w-full border-t border-t-black-20  bottom-0 z-40\">\r\n+                <form className=\"flex items-center justify-between gap-4\" onSubmit={handleSendMessage}>\r\n+                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-image\"/>\r\n+                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-emoji-smile\"/>\r\n+                    <TextInput rounded=\"full\" block\r\n+                               className=\"flex-1 outline-none bg-gray-100  text-base text-black-80 px-6 py-3\"\r\n+                               placeholder=\"Ecrire un message ....\"\r\n+                               onChange={handleInputChange}\r\n+                               value={messInput}\r\n+                    />\r\n+                    <Icon onClick={handleSendMessage} icon=\"bi bi-arrow-up\" size=\"sm\"/>\r\n+                </form>\r\n+            </div>\r\n+        </section>\r\n+    )\r\n+}\r\n+\r\n+\r\n+const Message = ({message, sentDate, sentByCurrentUser = false}) => {\r\n+\r\n+    const { timeSince } = useApp()\r\n+\r\n+    return <div className={`space-y-1 max-w-1/2`}>\r\n+        <div className={`p-4  rounded-2xl space-y-3 w-full ${sentByCurrentUser ? 'bg-primary-20' : 'bg-black-10'}`}>\r\n+            <p className=\"text-small-2 text-black-80 \">{timeSince(message.sentdate, 3)}</p>\r\n+            <p className=\"text-small-1 text-black-100\">{message}</p>\r\n+        </div>\r\n+\r\n+        <div className={`flex items-center  w-full gap-2 ${sentByCurrentUser ? 'justify-end' : 'justify-start'}`}>\r\n+            <Icon variant=\"ghost\" icon=\"bi bi-trash\" size=\"sm\"/>\r\n+            {\r\n+                !sentByCurrentUser &&\r\n+                <Icon variant=\"ghost\" icon=\"bi bi-arrow-90deg-down\" className=\"-rotate-90\" size=\"sm\"/>\r\n+            }\r\n+        </div>\r\n+    </div>\r\n+}\r\n+\r\n+export default Messages;\r\n+\r\n"
                },
                {
                    "date": 1722235276027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     const navigate = useNavigate();\r\n \r\n     const { token } = useAuth();\r\n \r\n-    const { messages, setMessages, userToChat, handleCountUnread, handleShown } = useApp()\r\n+    const { messages, userToChat, handleCountUnread, handleShown } = useApp()\r\n \r\n     const [messInput, setMessInput] = useState(\"\");\r\n \r\n     const endOfMessagesRef = useRef(null);\r\n@@ -140,9 +140,9 @@\n     const { timeSince } = useApp()\r\n \r\n     return <div className={`space-y-1 max-w-1/2`}>\r\n         <div className={`p-4  rounded-2xl space-y-3 w-full ${sentByCurrentUser ? 'bg-primary-20' : 'bg-black-10'}`}>\r\n-            <p className=\"text-small-2 text-black-80 \">{timeSince(message.sentdate, 3)}</p>\r\n+            <p className=\"text-small-2 text-black-80 \">{timeSince(sent, 3)}</p>\r\n             <p className=\"text-small-1 text-black-100\">{message}</p>\r\n         </div>\r\n \r\n         <div className={`flex items-center  w-full gap-2 ${sentByCurrentUser ? 'justify-end' : 'justify-start'}`}>\r\n@@ -156,322 +156,4 @@\n }\r\n \r\n export default Messages;\r\n \r\n-import {useNavigate} from \"react-router-dom\";\r\n-import {Button, TextArea, TextInput} from \"../../styles/components\";\r\n-import {useAuth} from \"../../context/AuthProvider\";\r\n-import {useApp} from \"../../context/AppPorvider\";\r\n-import {useEffect, useRef, useState} from \"react\";\r\n-import {useSocketContext} from \"../../context/SocketContext\";\r\n-import {SERVERLINK} from \"../../constants\";\r\n-import Mess from \"../../components/pages/conversations/Message.jsx\";\r\n-import Icon from \"../../components/ui/Icon.jsx\";\r\n-import {Input} from \"postcss\";\r\n-\r\n-const Messages = () => {\r\n-\r\n-\r\n-    const navigate = useNavigate();\r\n-\r\n-    const { token } = useAuth();\r\n-\r\n-    const { messages, setMessages, userToChat, setUserToChat, handleCountUnread, handleShown } = useApp()\r\n-\r\n-    const [messInput, setMessInput] = useState(\"\");\r\n-\r\n-    const endOfMessagesRef = useRef(null);\r\n-\r\n-    const handleClick = () => {\r\n-        localStorage.removeItem('userToChat');\r\n-        navigate('/discussion');\r\n-    }\r\n-\r\n-    const handleInputChange = (e) => {\r\n-        setMessInput(e.target.value)\r\n-    }\r\n-\r\n-    const { socket } = useSocketContext();\r\n-\r\n-\r\n-    useEffect(() => {\r\n-\r\n-        handleShown(endOfMessagesRef);\r\n-\r\n-        socket?.on(\"newMessage\", async () => {\r\n-            // setMessages([...messages, await newMessage]);\r\n-            handleShown(endOfMessagesRef);\r\n-            handleCountUnread();\r\n-        });\r\n-\r\n-        return () => socket?.off(\"newMessage\");\r\n-\r\n-    }, [socket]);\r\n-\r\n-\r\n-\r\n-    const handleSendMessage = async (e) => {\r\n-        e.preventDefault();\r\n-\r\n-        const userToChat = await JSON.parse(localStorage.getItem('userToChat')).id;\r\n-\r\n-        const response = await fetch(SERVERLINK + '/api/messages/send/' + userToChat, {\r\n-            method: \"POST\",\r\n-            headers: {\r\n-                \"Content-Type\": \"application/json\",\r\n-                \"token\": token\r\n-            },\r\n-            body: JSON.stringify({ message: messInput })\r\n-        });\r\n-\r\n-        const answer = await response.json();\r\n-\r\n-        handleShown(endOfMessagesRef);\r\n-\r\n-        console.log(answer);\r\n-        setMessInput(\"\");\r\n-    }\r\n-    return (\r\n-        <section\r\n-            className=\"flex flex-col items-center justify-center w-full gap-4  rounded-xl bg-white-100 h-[85vh] relative overflow-hidden\">\r\n-            <div\r\n-                className=\"flex items-center justify-between w-full py-4 px-6 border-0 border-b border-b-black-20  bg-white-100 top-0 z-40\">\r\n-                <div className=\"flex items-center justify-between \">\r\n-                    <Icon variant=\"ghost\" icon=\"bi bi-chevron-left \" onClick={handleClick}/>\r\n-                    <div className=\"flex items-center gap-2 cursor-pointer\">\r\n-                        <img src={userToChat.pic} className={\"size-[54px] rounded-full bg-black-20\"}/>\r\n-                        <p className={\"text-black-100 text-lead\"}>{userToChat.fullName}<span\r\n-                            className=\"text-small-1 text-black-80\">({userToChat.accounttype})</span>\r\n-                        </p>\r\n-                    </div>\r\n-                </div>\r\n-                <Button variant=\"secondary\">Profile</Button>\r\n-            </div>\r\n-            <div\r\n-                className=\"flex flex-col gap-4 items-start justify-start h-screen px-6 py-[24px] w-full scrollbar-none overflow-y-scroll \">\r\n-                {\r\n-                    messages.length > 0 ? messages.map(message =>\r\n-                        (<>\r\n-                                {\r\n-                                    message.receiverid === userToChat.id ? (\r\n-                                        <div className=\"w-full flex justify-start\">\r\n-                                            <Message\r\n-                                                message={message.content}\r\n-                                                sentDate={message.sentdate}/>\r\n-                                        </div>\r\n-                                    ) : (\r\n-                                        <div className=\"w-full flex justify-end\">\r\n-                                            <Message\r\n-                                                message={message.content}\r\n-                                                sentDate={message.sentdate} sentByCurrentUser/>\r\n-                                        </div>\r\n-                                    )\r\n-                                }\r\n-                            </>\r\n-                        )) : (\r\n-                        <p className=\"text-black-40 w-full h-screen text-center flex items-center justify-center text-subtitle-3\">\r\n-                            Envoyer un message!\r\n-                        </p>\r\n-                    )\r\n-                    \r\n-                }\r\n-                <div ref={endOfMessagesRef}/>\r\n-            </div>\r\n-            <div className=\"border-0 bg-white-100 px-6 py-4 w-full border-t border-t-black-20  bottom-0 z-40\">\r\n-                <form className=\"flex items-center justify-between gap-4\" onSubmit={handleSendMessage}>\r\n-                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-image\"/>\r\n-                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-emoji-smile\"/>\r\n-                    <TextInput rounded=\"full\" block\r\n-                               className=\"flex-1 outline-none bg-gray-100  text-base text-black-80 px-6 py-3\"\r\n-                               placeholder=\"Ecrire un message ....\"\r\n-                               onChange={handleInputChange}\r\n-                               value={messInput}\r\n-                    />\r\n-                    <Icon onClick={handleSendMessage} icon=\"bi bi-arrow-up\" size=\"sm\"/>\r\n-                </form>\r\n-            </div>\r\n-        </section>\r\n-    )\r\n-}\r\n-\r\n-\r\n-const Message = ({message, sentDate, sentByCurrentUser = false}) => {\r\n-\r\n-    const { timeSince } = useApp()\r\n-\r\n-    return <div className={`space-y-1 max-w-1/2`}>\r\n-        <div className={`p-4  rounded-2xl space-y-3 w-full ${sentByCurrentUser ? 'bg-primary-20' : 'bg-black-10'}`}>\r\n-            <p className=\"text-small-2 text-black-80 \">{timeSince(message.sentdate, 3)}</p>\r\n-            <p className=\"text-small-1 text-black-100\">{message}</p>\r\n-        </div>\r\n-\r\n-        <div className={`flex items-center  w-full gap-2 ${sentByCurrentUser ? 'justify-end' : 'justify-start'}`}>\r\n-            <Icon variant=\"ghost\" icon=\"bi bi-trash\" size=\"sm\"/>\r\n-            {\r\n-                !sentByCurrentUser &&\r\n-                <Icon variant=\"ghost\" icon=\"bi bi-arrow-90deg-down\" className=\"-rotate-90\" size=\"sm\"/>\r\n-            }\r\n-        </div>\r\n-    </div>\r\n-}\r\n-\r\n-export default Messages;\r\n-\r\n-import {useNavigate} from \"react-router-dom\";\r\n-import {Button, TextArea, TextInput} from \"../../styles/components\";\r\n-import {useAuth} from \"../../context/AuthProvider\";\r\n-import {useApp} from \"../../context/AppPorvider\";\r\n-import {useEffect, useRef, useState} from \"react\";\r\n-import {useSocketContext} from \"../../context/SocketContext\";\r\n-import {SERVERLINK} from \"../../constants\";\r\n-import Mess from \"../../components/pages/conversations/Message.jsx\";\r\n-import Icon from \"../../components/ui/Icon.jsx\";\r\n-import {Input} from \"postcss\";\r\n-\r\n-const Messages = () => {\r\n-\r\n-\r\n-    const navigate = useNavigate();\r\n-\r\n-    const { token } = useAuth();\r\n-\r\n-    const { messages, setMessages, userToChat, setUserToChat, handleCountUnread, handleShown } = useApp()\r\n-\r\n-    const [messInput, setMessInput] = useState(\"\");\r\n-\r\n-    const endOfMessagesRef = useRef(null);\r\n-\r\n-    const handleClick = () => {\r\n-        localStorage.removeItem('userToChat');\r\n-        navigate('/discussion');\r\n-    }\r\n-\r\n-    const handleInputChange = (e) => {\r\n-        setMessInput(e.target.value)\r\n-    }\r\n-\r\n-    const { socket } = useSocketContext();\r\n-\r\n-\r\n-    useEffect(() => {\r\n-\r\n-        handleShown(endOfMessagesRef);\r\n-\r\n-        socket?.on(\"newMessage\", async () => {\r\n-            // setMessages([...messages, await newMessage]);\r\n-            handleShown(endOfMessagesRef);\r\n-            handleCountUnread();\r\n-        });\r\n-\r\n-        return () => socket?.off(\"newMessage\");\r\n-\r\n-    }, [socket]);\r\n-\r\n-\r\n-\r\n-    const handleSendMessage = async (e) => {\r\n-        e.preventDefault();\r\n-\r\n-        const userToChat = await JSON.parse(localStorage.getItem('userToChat')).id;\r\n-\r\n-        const response = await fetch(SERVERLINK + '/api/messages/send/' + userToChat, {\r\n-            method: \"POST\",\r\n-            headers: {\r\n-                \"Content-Type\": \"application/json\",\r\n-                \"token\": token\r\n-            },\r\n-            body: JSON.stringify({ message: messInput })\r\n-        });\r\n-\r\n-        const answer = await response.json();\r\n-\r\n-        handleShown(endOfMessagesRef);\r\n-\r\n-        console.log(answer);\r\n-        setMessInput(\"\");\r\n-    }\r\n-    return (\r\n-        <section\r\n-            className=\"flex flex-col items-center justify-center w-full gap-4  rounded-xl bg-white-100 h-[85vh] relative overflow-hidden\">\r\n-            <div\r\n-                className=\"flex items-center justify-between w-full py-4 px-6 border-0 border-b border-b-black-20  bg-white-100 top-0 z-40\">\r\n-                <div className=\"flex items-center justify-between \">\r\n-                    <Icon variant=\"ghost\" icon=\"bi bi-chevron-left \" onClick={() => navigate(\"/discussion\")}/>\r\n-                    <div className=\"flex items-center gap-2 cursor-pointer\">\r\n-                        <img src={userToChat.pic} className={\"size-[54px] rounded-full bg-black-20\"}/>\r\n-                        <p className={\"text-black-100 text-lead\"}>{userToChat.fullName}<span\r\n-                            className=\"text-small-1 text-black-80\">({userToChat.accounttype})</span>\r\n-                        </p>\r\n-                    </div>\r\n-                </div>\r\n-                <Button variant=\"secondary\">Profile</Button>\r\n-            </div>\r\n-            <div\r\n-                className=\"flex flex-col gap-4 items-start justify-start h-screen px-6 py-[24px] w-full scrollbar-none overflow-y-scroll \">\r\n-                {\r\n-                    messages.length > 0 ? messages.map(message =>\r\n-                        (<>\r\n-                                {\r\n-                                    message.receiverid === userToChat.id ? (\r\n-                                        <div className=\"w-full flex justify-start\">\r\n-                                            <Message\r\n-                                                message={message.content}\r\n-                                                sentDate={message.sentdate}/>\r\n-                                        </div>\r\n-                                    ) : (\r\n-                                        <div className=\"w-full flex justify-end\">\r\n-                                            <Message\r\n-                                                message={message.content}\r\n-                                                sentDate={message.sentdate} sentByCurrentUser/>\r\n-                                        </div>\r\n-                                    )\r\n-                                }\r\n-                            </>\r\n-                        )) : (\r\n-                        <p className=\"text-black-40 w-full h-screen text-center flex items-center justify-center text-subtitle-3\">\r\n-                            Envoyer un message!\r\n-                        </p>\r\n-                    )\r\n-                    \r\n-                }\r\n-                <div ref={endOfMessagesRef}/>\r\n-            </div>\r\n-            <div className=\"border-0 bg-white-100 px-6 py-4 w-full border-t border-t-black-20  bottom-0 z-40\">\r\n-                <form className=\"flex items-center justify-between gap-4\" onSubmit={handleSendMessage}>\r\n-                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-image\"/>\r\n-                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-emoji-smile\"/>\r\n-                    <TextInput rounded=\"full\" block\r\n-                               className=\"flex-1 outline-none bg-gray-100  text-base text-black-80 px-6 py-3\"\r\n-                               placeholder=\"Ecrire un message ....\"\r\n-                               onChange={handleInputChange}\r\n-                               value={messInput}\r\n-                    />\r\n-                    <Icon onClick={handleSendMessage} icon=\"bi bi-arrow-up\" size=\"sm\"/>\r\n-                </form>\r\n-            </div>\r\n-        </section>\r\n-    )\r\n-}\r\n-\r\n-\r\n-const Message = ({message, sentDate, sentByCurrentUser = false}) => {\r\n-\r\n-    const { timeSince } = useApp()\r\n-\r\n-    return <div className={`space-y-1 max-w-1/2`}>\r\n-        <div className={`p-4  rounded-2xl space-y-3 w-full ${sentByCurrentUser ? 'bg-primary-20' : 'bg-black-10'}`}>\r\n-            <p className=\"text-small-2 text-black-80 \">{timeSince(message.sentdate, 3)}</p>\r\n-            <p className=\"text-small-1 text-black-100\">{message}</p>\r\n-        </div>\r\n-\r\n-        <div className={`flex items-center  w-full gap-2 ${sentByCurrentUser ? 'justify-end' : 'justify-start'}`}>\r\n-            <Icon variant=\"ghost\" icon=\"bi bi-trash\" size=\"sm\"/>\r\n-            {\r\n-                !sentByCurrentUser &&\r\n-                <Icon variant=\"ghost\" icon=\"bi bi-arrow-90deg-down\" className=\"-rotate-90\" size=\"sm\"/>\r\n-            }\r\n-        </div>\r\n-    </div>\r\n-}\r\n-\r\n-export default Messages;\r\n-\r\n"
                },
                {
                    "date": 1722235345594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n                                     ) : (\r\n                                         <div className=\"w-full flex justify-end\">\r\n                                             <Message\r\n                                                 message={message.content}\r\n-                                                sentDate={message.sentdate} sentByCurrentUser/>\r\n+                                                sentDate={message.sentdate}/>\r\n                                         </div>\r\n                                     )\r\n                                 }\r\n                             </>\r\n@@ -140,9 +140,9 @@\n     const { timeSince } = useApp()\r\n \r\n     return <div className={`space-y-1 max-w-1/2`}>\r\n         <div className={`p-4  rounded-2xl space-y-3 w-full ${sentByCurrentUser ? 'bg-primary-20' : 'bg-black-10'}`}>\r\n-            <p className=\"text-small-2 text-black-80 \">{timeSince(sent, 3)}</p>\r\n+            <p className=\"text-small-2 text-black-80 \">{timeSince(sentDate, 3)}</p>\r\n             <p className=\"text-small-1 text-black-100\">{message}</p>\r\n         </div>\r\n \r\n         <div className={`flex items-center  w-full gap-2 ${sentByCurrentUser ? 'justify-end' : 'justify-start'}`}>\r\n"
                },
                {
                    "date": 1722235356537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,159 @@\n+import {useNavigate} from \"react-router-dom\";\r\n+import {Button, TextArea, TextInput} from \"../../styles/components\";\r\n+import {useAuth} from \"../../context/AuthProvider\";\r\n+import {useApp} from \"../../context/AppPorvider\";\r\n+import {useEffect, useRef, useState} from \"react\";\r\n+import {useSocketContext} from \"../../context/SocketContext\";\r\n+import {SERVERLINK} from \"../../constants\";\r\n+import Mess from \"../../components/pages/conversations/Message.jsx\";\r\n+import Icon from \"../../components/ui/Icon.jsx\";\r\n+import {Input} from \"postcss\";\r\n+\r\n+const Messages = () => {\r\n+\r\n+\r\n+    const navigate = useNavigate();\r\n+\r\n+    const { token } = useAuth();\r\n+\r\n+    const { messages, userToChat, handleCountUnread, handleShown } = useApp()\r\n+\r\n+    const [messInput, setMessInput] = useState(\"\");\r\n+\r\n+    const endOfMessagesRef = useRef(null);\r\n+\r\n+    const handleClick = () => {\r\n+        localStorage.removeItem('userToChat');\r\n+        navigate('/discussion');\r\n+    }\r\n+\r\n+    const handleInputChange = (e) => {\r\n+        setMessInput(e.target.value)\r\n+    }\r\n+\r\n+    const { socket } = useSocketContext();\r\n+\r\n+\r\n+    useEffect(() => {\r\n+\r\n+        handleShown(endOfMessagesRef);\r\n+\r\n+        socket?.on(\"newMessage\", async () => {\r\n+            // setMessages([...messages, await newMessage]);\r\n+            handleShown(endOfMessagesRef);\r\n+            handleCountUnread();\r\n+        });\r\n+\r\n+        return () => socket?.off(\"newMessage\");\r\n+\r\n+    }, [socket]);\r\n+\r\n+\r\n+\r\n+    const handleSendMessage = async (e) => {\r\n+        e.preventDefault();\r\n+\r\n+        const userToChat = await JSON.parse(localStorage.getItem('userToChat')).id;\r\n+\r\n+        const response = await fetch(SERVERLINK + '/api/messages/send/' + userToChat, {\r\n+            method: \"POST\",\r\n+            headers: {\r\n+                \"Content-Type\": \"application/json\",\r\n+                \"token\": token\r\n+            },\r\n+            body: JSON.stringify({ message: messInput })\r\n+        });\r\n+\r\n+        const answer = await response.json();\r\n+\r\n+        handleShown(endOfMessagesRef);\r\n+\r\n+        console.log(answer);\r\n+        setMessInput(\"\");\r\n+    }\r\n+    return (\r\n+        <section\r\n+            className=\"flex flex-col items-center justify-center w-full gap-4  rounded-xl bg-white-100 h-[85vh] relative overflow-hidden\">\r\n+            <div\r\n+                className=\"flex items-center justify-between w-full py-4 px-6 border-0 border-b border-b-black-20  bg-white-100 top-0 z-40\">\r\n+                <div className=\"flex items-center justify-between \">\r\n+                    <Icon variant=\"ghost\" icon=\"bi bi-chevron-left \" onClick={handleClick}/>\r\n+                    <div className=\"flex items-center gap-2 cursor-pointer\">\r\n+                        <img src={userToChat.pic} className={\"size-[54px] rounded-full bg-black-20\"}/>\r\n+                        <p className={\"text-black-100 text-lead\"}>{userToChat.fullName}<span\r\n+                            className=\"text-small-1 text-black-80\">({userToChat.accounttype})</span>\r\n+                        </p>\r\n+                    </div>\r\n+                </div>\r\n+                <Button variant=\"secondary\">Profile</Button>\r\n+            </div>\r\n+            <div\r\n+                className=\"flex flex-col gap-4 items-start justify-start h-screen px-6 py-[24px] w-full scrollbar-none overflow-y-scroll \">\r\n+                {\r\n+                    messages.length > 0 ? messages.map(message =>\r\n+                        (<>\r\n+                                {\r\n+                                    message.receiverid === userToChat.id ? (\r\n+                                        <div className=\"w-full flex justify-start\">\r\n+                                            <Message\r\n+                                                message={message.content}\r\n+                                                sentDate={message.sentdate}  sentByCurrentUser/>\r\n+                                        </div>\r\n+                                    ) : (\r\n+                                        <div className=\"w-full flex justify-end\">\r\n+                                            <Message\r\n+                                                message={message.content}\r\n+                                                sentDate={message.sentdate}/>\r\n+                                        </div>\r\n+                                    )\r\n+                                }\r\n+                            </>\r\n+                        )) : (\r\n+                        <p className=\"text-black-40 w-full h-screen text-center flex items-center justify-center text-subtitle-3\">\r\n+                            Envoyer un message!\r\n+                        </p>\r\n+                    )\r\n+                    \r\n+                }\r\n+                <div ref={endOfMessagesRef}/>\r\n+            </div>\r\n+            <div className=\"border-0 bg-white-100 px-6 py-4 w-full border-t border-t-black-20  bottom-0 z-40\">\r\n+                <form className=\"flex items-center justify-between gap-4\" onSubmit={handleSendMessage}>\r\n+                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-image\"/>\r\n+                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-emoji-smile\"/>\r\n+                    <TextInput rounded=\"full\" block\r\n+                               className=\"flex-1 outline-none bg-gray-100  text-base text-black-80 px-6 py-3\"\r\n+                               placeholder=\"Ecrire un message ....\"\r\n+                               onChange={handleInputChange}\r\n+                               value={messInput}\r\n+                    />\r\n+                    <Icon onClick={handleSendMessage} icon=\"bi bi-arrow-up\" size=\"sm\"/>\r\n+                </form>\r\n+            </div>\r\n+        </section>\r\n+    )\r\n+}\r\n+\r\n+\r\n+const Message = ({message, sentDate, sentByCurrentUser = false}) => {\r\n+\r\n+    const { timeSince } = useApp()\r\n+\r\n+    return <div className={`space-y-1 max-w-1/2`}>\r\n+        <div className={`p-4  rounded-2xl space-y-3 w-full ${sentByCurrentUser ? 'bg-primary-20' : 'bg-black-10'}`}>\r\n+            <p className=\"text-small-2 text-black-80 \">{timeSince(sentDate, 3)}</p>\r\n+            <p className=\"text-small-1 text-black-100\">{message}</p>\r\n+        </div>\r\n+\r\n+        <div className={`flex items-center  w-full gap-2 ${sentByCurrentUser ? 'justify-end' : 'justify-start'}`}>\r\n+            <Icon variant=\"ghost\" icon=\"bi bi-trash\" size=\"sm\"/>\r\n+            {\r\n+                !sentByCurrentUser &&\r\n+                <Icon variant=\"ghost\" icon=\"bi bi-arrow-90deg-down\" className=\"-rotate-90\" size=\"sm\"/>\r\n+            }\r\n+        </div>\r\n+    </div>\r\n+}\r\n+\r\n+export default Messages;\r\n+\r\n"
                },
                {
                    "date": 1722235370503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,174 +96,15 @@\n                                     message.receiverid === userToChat.id ? (\r\n                                         <div className=\"w-full flex justify-start\">\r\n                                             <Message\r\n                                                 message={message.content}\r\n-                                                sentDate={message.sentdate}  sentByCurrentUser/>\r\n-                                        </div>\r\n-                                    ) : (\r\n-                                        <div className=\"w-full flex justify-end\">\r\n-                                            <Message\r\n-                                                message={message.content}\r\n                                                 sentDate={message.sentdate}/>\r\n                                         </div>\r\n-                                    )\r\n-                                }\r\n-                            </>\r\n-                        )) : (\r\n-                        <p className=\"text-black-40 w-full h-screen text-center flex items-center justify-center text-subtitle-3\">\r\n-                            Envoyer un message!\r\n-                        </p>\r\n-                    )\r\n-                    \r\n-                }\r\n-                <div ref={endOfMessagesRef}/>\r\n-            </div>\r\n-            <div className=\"border-0 bg-white-100 px-6 py-4 w-full border-t border-t-black-20  bottom-0 z-40\">\r\n-                <form className=\"flex items-center justify-between gap-4\" onSubmit={handleSendMessage}>\r\n-                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-image\"/>\r\n-                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-emoji-smile\"/>\r\n-                    <TextInput rounded=\"full\" block\r\n-                               className=\"flex-1 outline-none bg-gray-100  text-base text-black-80 px-6 py-3\"\r\n-                               placeholder=\"Ecrire un message ....\"\r\n-                               onChange={handleInputChange}\r\n-                               value={messInput}\r\n-                    />\r\n-                    <Icon onClick={handleSendMessage} icon=\"bi bi-arrow-up\" size=\"sm\"/>\r\n-                </form>\r\n-            </div>\r\n-        </section>\r\n-    )\r\n-}\r\n-\r\n-\r\n-const Message = ({message, sentDate, sentByCurrentUser = false}) => {\r\n-\r\n-    const { timeSince } = useApp()\r\n-\r\n-    return <div className={`space-y-1 max-w-1/2`}>\r\n-        <div className={`p-4  rounded-2xl space-y-3 w-full ${sentByCurrentUser ? 'bg-primary-20' : 'bg-black-10'}`}>\r\n-            <p className=\"text-small-2 text-black-80 \">{timeSince(sentDate, 3)}</p>\r\n-            <p className=\"text-small-1 text-black-100\">{message}</p>\r\n-        </div>\r\n-\r\n-        <div className={`flex items-center  w-full gap-2 ${sentByCurrentUser ? 'justify-end' : 'justify-start'}`}>\r\n-            <Icon variant=\"ghost\" icon=\"bi bi-trash\" size=\"sm\"/>\r\n-            {\r\n-                !sentByCurrentUser &&\r\n-                <Icon variant=\"ghost\" icon=\"bi bi-arrow-90deg-down\" className=\"-rotate-90\" size=\"sm\"/>\r\n-            }\r\n-        </div>\r\n-    </div>\r\n-}\r\n-\r\n-export default Messages;\r\n-\r\n-import {useNavigate} from \"react-router-dom\";\r\n-import {Button, TextArea, TextInput} from \"../../styles/components\";\r\n-import {useAuth} from \"../../context/AuthProvider\";\r\n-import {useApp} from \"../../context/AppPorvider\";\r\n-import {useEffect, useRef, useState} from \"react\";\r\n-import {useSocketContext} from \"../../context/SocketContext\";\r\n-import {SERVERLINK} from \"../../constants\";\r\n-import Mess from \"../../components/pages/conversations/Message.jsx\";\r\n-import Icon from \"../../components/ui/Icon.jsx\";\r\n-import {Input} from \"postcss\";\r\n-\r\n-const Messages = () => {\r\n-\r\n-\r\n-    const navigate = useNavigate();\r\n-\r\n-    const { token } = useAuth();\r\n-\r\n-    const { messages, userToChat, handleCountUnread, handleShown } = useApp()\r\n-\r\n-    const [messInput, setMessInput] = useState(\"\");\r\n-\r\n-    const endOfMessagesRef = useRef(null);\r\n-\r\n-    const handleClick = () => {\r\n-        localStorage.removeItem('userToChat');\r\n-        navigate('/discussion');\r\n-    }\r\n-\r\n-    const handleInputChange = (e) => {\r\n-        setMessInput(e.target.value)\r\n-    }\r\n-\r\n-    const { socket } = useSocketContext();\r\n-\r\n-\r\n-    useEffect(() => {\r\n-\r\n-        handleShown(endOfMessagesRef);\r\n-\r\n-        socket?.on(\"newMessage\", async () => {\r\n-            // setMessages([...messages, await newMessage]);\r\n-            handleShown(endOfMessagesRef);\r\n-            handleCountUnread();\r\n-        });\r\n-\r\n-        return () => socket?.off(\"newMessage\");\r\n-\r\n-    }, [socket]);\r\n-\r\n-\r\n-\r\n-    const handleSendMessage = async (e) => {\r\n-        e.preventDefault();\r\n-\r\n-        const userToChat = await JSON.parse(localStorage.getItem('userToChat')).id;\r\n-\r\n-        const response = await fetch(SERVERLINK + '/api/messages/send/' + userToChat, {\r\n-            method: \"POST\",\r\n-            headers: {\r\n-                \"Content-Type\": \"application/json\",\r\n-                \"token\": token\r\n-            },\r\n-            body: JSON.stringify({ message: messInput })\r\n-        });\r\n-\r\n-        const answer = await response.json();\r\n-\r\n-        handleShown(endOfMessagesRef);\r\n-\r\n-        console.log(answer);\r\n-        setMessInput(\"\");\r\n-    }\r\n-    return (\r\n-        <section\r\n-            className=\"flex flex-col items-center justify-center w-full gap-4  rounded-xl bg-white-100 h-[85vh] relative overflow-hidden\">\r\n-            <div\r\n-                className=\"flex items-center justify-between w-full py-4 px-6 border-0 border-b border-b-black-20  bg-white-100 top-0 z-40\">\r\n-                <div className=\"flex items-center justify-between \">\r\n-                    <Icon variant=\"ghost\" icon=\"bi bi-chevron-left \" onClick={handleClick}/>\r\n-                    <div className=\"flex items-center gap-2 cursor-pointer\">\r\n-                        <img src={userToChat.pic} className={\"size-[54px] rounded-full bg-black-20\"}/>\r\n-                        <p className={\"text-black-100 text-lead\"}>{userToChat.fullName}<span\r\n-                            className=\"text-small-1 text-black-80\">({userToChat.accounttype})</span>\r\n-                        </p>\r\n-                    </div>\r\n-                </div>\r\n-                <Button variant=\"secondary\">Profile</Button>\r\n-            </div>\r\n-            <div\r\n-                className=\"flex flex-col gap-4 items-start justify-start h-screen px-6 py-[24px] w-full scrollbar-none overflow-y-scroll \">\r\n-                {\r\n-                    messages.length > 0 ? messages.map(message =>\r\n-                        (<>\r\n-                                {\r\n-                                    message.receiverid === userToChat.id ? (\r\n-                                        <div className=\"w-full flex justify-start\">\r\n-                                            <Message\r\n-                                                message={message.content}\r\n-                                                sentDate={message.sentdate}/>\r\n-                                        </div>\r\n                                     ) : (\r\n                                         <div className=\"w-full flex justify-end\">\r\n                                             <Message\r\n                                                 message={message.content}\r\n-                                                sentDate={message.sentdate}/>\r\n+                                                sentDate={message.sentdate} sentByCurrentUser/>\r\n                                         </div>\r\n                                     )\r\n                                 }\r\n                             </>\r\n"
                },
                {
                    "date": 1722235379616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,159 @@\n+import {useNavigate} from \"react-router-dom\";\r\n+import {Button, TextArea, TextInput} from \"../../styles/components\";\r\n+import {useAuth} from \"../../context/AuthProvider\";\r\n+import {useApp} from \"../../context/AppPorvider\";\r\n+import {useEffect, useRef, useState} from \"react\";\r\n+import {useSocketContext} from \"../../context/SocketContext\";\r\n+import {SERVERLINK} from \"../../constants\";\r\n+import Mess from \"../../components/pages/conversations/Message.jsx\";\r\n+import Icon from \"../../components/ui/Icon.jsx\";\r\n+import {Input} from \"postcss\";\r\n+\r\n+const Messages = () => {\r\n+\r\n+\r\n+    const navigate = useNavigate();\r\n+\r\n+    const { token } = useAuth();\r\n+\r\n+    const { messages, userToChat, handleCountUnread, handleShown } = useApp()\r\n+\r\n+    const [messInput, setMessInput] = useState(\"\");\r\n+\r\n+    const endOfMessagesRef = useRef(null);\r\n+\r\n+    const handleClick = () => {\r\n+        localStorage.removeItem('userToChat');\r\n+        navigate('/discussion');\r\n+    }\r\n+\r\n+    const handleInputChange = (e) => {\r\n+        setMessInput(e.target.value)\r\n+    }\r\n+\r\n+    const { socket } = useSocketContext();\r\n+\r\n+\r\n+    useEffect(() => {\r\n+\r\n+        handleShown(endOfMessagesRef);\r\n+\r\n+        socket?.on(\"newMessage\", async () => {\r\n+            // setMessages([...messages, await newMessage]);\r\n+            handleShown(endOfMessagesRef);\r\n+            handleCountUnread();\r\n+        });\r\n+\r\n+        return () => socket?.off(\"newMessage\");\r\n+\r\n+    }, [socket]);\r\n+\r\n+\r\n+\r\n+    const handleSendMessage = async (e) => {\r\n+        e.preventDefault();\r\n+\r\n+        const userToChat = await JSON.parse(localStorage.getItem('userToChat')).id;\r\n+\r\n+        const response = await fetch(SERVERLINK + '/api/messages/send/' + userToChat, {\r\n+            method: \"POST\",\r\n+            headers: {\r\n+                \"Content-Type\": \"application/json\",\r\n+                \"token\": token\r\n+            },\r\n+            body: JSON.stringify({ message: messInput })\r\n+        });\r\n+\r\n+        const answer = await response.json();\r\n+\r\n+        handleShown(endOfMessagesRef);\r\n+\r\n+        console.log(answer);\r\n+        setMessInput(\"\");\r\n+    }\r\n+    return (\r\n+        <section\r\n+            className=\"flex flex-col items-center justify-center w-full gap-4  rounded-xl bg-white-100 h-[85vh] relative overflow-hidden\">\r\n+            <div\r\n+                className=\"flex items-center justify-between w-full py-4 px-6 border-0 border-b border-b-black-20  bg-white-100 top-0 z-40\">\r\n+                <div className=\"flex items-center justify-between \">\r\n+                    <Icon variant=\"ghost\" icon=\"bi bi-chevron-left \" onClick={handleClick}/>\r\n+                    <div className=\"flex items-center gap-2 cursor-pointer\">\r\n+                        <img src={userToChat.pic} className={\"size-[54px] rounded-full bg-black-20\"}/>\r\n+                        <p className={\"text-black-100 text-lead\"}>{userToChat.fullName}<span\r\n+                            className=\"text-small-1 text-black-80\">({userToChat.accounttype})</span>\r\n+                        </p>\r\n+                    </div>\r\n+                </div>\r\n+                <Button variant=\"secondary\">Profile</Button>\r\n+            </div>\r\n+            <div\r\n+                className=\"flex flex-col gap-4 items-start justify-start h-screen px-6 py-[24px] w-full scrollbar-none overflow-y-scroll \">\r\n+                {\r\n+                    messages.length > 0 ? messages.map(message =>\r\n+                        (<>\r\n+                                {\r\n+                                    !message.receiverid === userToChat.id ? (\r\n+                                        <div className=\"w-full flex justify-start\">\r\n+                                            <Message\r\n+                                                message={message.content}\r\n+                                                sentDate={message.sentdate}/>\r\n+                                        </div>\r\n+                                    ) : (\r\n+                                        <div className=\"w-full flex justify-end\">\r\n+                                            <Message\r\n+                                                message={message.content}\r\n+                                                sentDate={message.sentdate} sentByCurrentUser/>\r\n+                                        </div>\r\n+                                    )\r\n+                                }\r\n+                            </>\r\n+                        )) : (\r\n+                        <p className=\"text-black-40 w-full h-screen text-center flex items-center justify-center text-subtitle-3\">\r\n+                            Envoyer un message!\r\n+                        </p>\r\n+                    )\r\n+                    \r\n+                }\r\n+                <div ref={endOfMessagesRef}/>\r\n+            </div>\r\n+            <div className=\"border-0 bg-white-100 px-6 py-4 w-full border-t border-t-black-20  bottom-0 z-40\">\r\n+                <form className=\"flex items-center justify-between gap-4\" onSubmit={handleSendMessage}>\r\n+                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-image\"/>\r\n+                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-emoji-smile\"/>\r\n+                    <TextInput rounded=\"full\" block\r\n+                               className=\"flex-1 outline-none bg-gray-100  text-base text-black-80 px-6 py-3\"\r\n+                               placeholder=\"Ecrire un message ....\"\r\n+                               onChange={handleInputChange}\r\n+                               value={messInput}\r\n+                    />\r\n+                    <Icon onClick={handleSendMessage} icon=\"bi bi-arrow-up\" size=\"sm\"/>\r\n+                </form>\r\n+            </div>\r\n+        </section>\r\n+    )\r\n+}\r\n+\r\n+\r\n+const Message = ({message, sentDate, sentByCurrentUser = false}) => {\r\n+\r\n+    const { timeSince } = useApp()\r\n+\r\n+    return <div className={`space-y-1 max-w-1/2`}>\r\n+        <div className={`p-4  rounded-2xl space-y-3 w-full ${sentByCurrentUser ? 'bg-primary-20' : 'bg-black-10'}`}>\r\n+            <p className=\"text-small-2 text-black-80 \">{timeSince(sentDate, 3)}</p>\r\n+            <p className=\"text-small-1 text-black-100\">{message}</p>\r\n+        </div>\r\n+\r\n+        <div className={`flex items-center  w-full gap-2 ${sentByCurrentUser ? 'justify-end' : 'justify-start'}`}>\r\n+            <Icon variant=\"ghost\" icon=\"bi bi-trash\" size=\"sm\"/>\r\n+            {\r\n+                !sentByCurrentUser &&\r\n+                <Icon variant=\"ghost\" icon=\"bi bi-arrow-90deg-down\" className=\"-rotate-90\" size=\"sm\"/>\r\n+            }\r\n+        </div>\r\n+    </div>\r\n+}\r\n+\r\n+export default Messages;\r\n+\r\n"
                },
                {
                    "date": 1722235388067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,159 @@\n+import {useNavigate} from \"react-router-dom\";\r\n+import {Button, TextArea, TextInput} from \"../../styles/components\";\r\n+import {useAuth} from \"../../context/AuthProvider\";\r\n+import {useApp} from \"../../context/AppPorvider\";\r\n+import {useEffect, useRef, useState} from \"react\";\r\n+import {useSocketContext} from \"../../context/SocketContext\";\r\n+import {SERVERLINK} from \"../../constants\";\r\n+import Mess from \"../../components/pages/conversations/Message.jsx\";\r\n+import Icon from \"../../components/ui/Icon.jsx\";\r\n+import {Input} from \"postcss\";\r\n+\r\n+const Messages = () => {\r\n+\r\n+\r\n+    const navigate = useNavigate();\r\n+\r\n+    const { token } = useAuth();\r\n+\r\n+    const { messages, userToChat, handleCountUnread, handleShown } = useApp()\r\n+\r\n+    const [messInput, setMessInput] = useState(\"\");\r\n+\r\n+    const endOfMessagesRef = useRef(null);\r\n+\r\n+    const handleClick = () => {\r\n+        localStorage.removeItem('userToChat');\r\n+        navigate('/discussion');\r\n+    }\r\n+\r\n+    const handleInputChange = (e) => {\r\n+        setMessInput(e.target.value)\r\n+    }\r\n+\r\n+    const { socket } = useSocketContext();\r\n+\r\n+\r\n+    useEffect(() => {\r\n+\r\n+        handleShown(endOfMessagesRef);\r\n+\r\n+        socket?.on(\"newMessage\", async () => {\r\n+            // setMessages([...messages, await newMessage]);\r\n+            handleShown(endOfMessagesRef);\r\n+            handleCountUnread();\r\n+        });\r\n+\r\n+        return () => socket?.off(\"newMessage\");\r\n+\r\n+    }, [socket]);\r\n+\r\n+\r\n+\r\n+    const handleSendMessage = async (e) => {\r\n+        e.preventDefault();\r\n+\r\n+        const userToChat = await JSON.parse(localStorage.getItem('userToChat')).id;\r\n+\r\n+        const response = await fetch(SERVERLINK + '/api/messages/send/' + userToChat, {\r\n+            method: \"POST\",\r\n+            headers: {\r\n+                \"Content-Type\": \"application/json\",\r\n+                \"token\": token\r\n+            },\r\n+            body: JSON.stringify({ message: messInput })\r\n+        });\r\n+\r\n+        const answer = await response.json();\r\n+\r\n+        handleShown(endOfMessagesRef);\r\n+\r\n+        console.log(answer);\r\n+        setMessInput(\"\");\r\n+    }\r\n+    return (\r\n+        <section\r\n+            className=\"flex flex-col items-center justify-center w-full gap-4  rounded-xl bg-white-100 h-[85vh] relative overflow-hidden\">\r\n+            <div\r\n+                className=\"flex items-center justify-between w-full py-4 px-6 border-0 border-b border-b-black-20  bg-white-100 top-0 z-40\">\r\n+                <div className=\"flex items-center justify-between \">\r\n+                    <Icon variant=\"ghost\" icon=\"bi bi-chevron-left \" onClick={handleClick}/>\r\n+                    <div className=\"flex items-center gap-2 cursor-pointer\">\r\n+                        <img src={userToChat.pic} className={\"size-[54px] rounded-full bg-black-20\"}/>\r\n+                        <p className={\"text-black-100 text-lead\"}>{userToChat.fullName}<span\r\n+                            className=\"text-small-1 text-black-80\">({userToChat.accounttype})</span>\r\n+                        </p>\r\n+                    </div>\r\n+                </div>\r\n+                <Button variant=\"secondary\">Profile</Button>\r\n+            </div>\r\n+            <div\r\n+                className=\"flex flex-col gap-4 items-start justify-start h-screen px-6 py-[24px] w-full scrollbar-none overflow-y-scroll \">\r\n+                {\r\n+                    messages.length > 0 ? messages.map(message =>\r\n+                        (<>\r\n+                                {\r\n+                                    !(message.receiverid === userToChat.id) ? (\r\n+                                        <div className=\"w-full flex justify-start\">\r\n+                                            <Message\r\n+                                                message={message.content}\r\n+                                                sentDate={message.sentdate}/>\r\n+                                        </div>\r\n+                                    ) : (\r\n+                                        <div className=\"w-full flex justify-end\">\r\n+                                            <Message\r\n+                                                message={message.content}\r\n+                                                sentDate={message.sentdate} sentByCurrentUser/>\r\n+                                        </div>\r\n+                                    )\r\n+                                }\r\n+                            </>\r\n+                        )) : (\r\n+                        <p className=\"text-black-40 w-full h-screen text-center flex items-center justify-center text-subtitle-3\">\r\n+                            Envoyer un message!\r\n+                        </p>\r\n+                    )\r\n+                    \r\n+                }\r\n+                <div ref={endOfMessagesRef}/>\r\n+            </div>\r\n+            <div className=\"border-0 bg-white-100 px-6 py-4 w-full border-t border-t-black-20  bottom-0 z-40\">\r\n+                <form className=\"flex items-center justify-between gap-4\" onSubmit={handleSendMessage}>\r\n+                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-image\"/>\r\n+                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-emoji-smile\"/>\r\n+                    <TextInput rounded=\"full\" block\r\n+                               className=\"flex-1 outline-none bg-gray-100  text-base text-black-80 px-6 py-3\"\r\n+                               placeholder=\"Ecrire un message ....\"\r\n+                               onChange={handleInputChange}\r\n+                               value={messInput}\r\n+                    />\r\n+                    <Icon onClick={handleSendMessage} icon=\"bi bi-arrow-up\" size=\"sm\"/>\r\n+                </form>\r\n+            </div>\r\n+        </section>\r\n+    )\r\n+}\r\n+\r\n+\r\n+const Message = ({message, sentDate, sentByCurrentUser = false}) => {\r\n+\r\n+    const { timeSince } = useApp()\r\n+\r\n+    return <div className={`space-y-1 max-w-1/2`}>\r\n+        <div className={`p-4  rounded-2xl space-y-3 w-full ${sentByCurrentUser ? 'bg-primary-20' : 'bg-black-10'}`}>\r\n+            <p className=\"text-small-2 text-black-80 \">{timeSince(sentDate, 3)}</p>\r\n+            <p className=\"text-small-1 text-black-100\">{message}</p>\r\n+        </div>\r\n+\r\n+        <div className={`flex items-center  w-full gap-2 ${sentByCurrentUser ? 'justify-end' : 'justify-start'}`}>\r\n+            <Icon variant=\"ghost\" icon=\"bi bi-trash\" size=\"sm\"/>\r\n+            {\r\n+                !sentByCurrentUser &&\r\n+                <Icon variant=\"ghost\" icon=\"bi bi-arrow-90deg-down\" className=\"-rotate-90\" size=\"sm\"/>\r\n+            }\r\n+        </div>\r\n+    </div>\r\n+}\r\n+\r\n+export default Messages;\r\n+\r\n"
                },
                {
                    "date": 1722235975060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n const Message = ({message, sentDate, sentByCurrentUser = false}) => {\r\n \r\n     const { timeSince } = useApp()\r\n \r\n-    return <div className={`space-y-1 max-w-1/2`}>\r\n+    return <div className={`space-y-1 max-w-[]`}>\r\n         <div className={`p-4  rounded-2xl space-y-3 w-full ${sentByCurrentUser ? 'bg-primary-20' : 'bg-black-10'}`}>\r\n             <p className=\"text-small-2 text-black-80 \">{timeSince(sentDate, 3)}</p>\r\n             <p className=\"text-small-1 text-black-100\">{message}</p>\r\n         </div>\r\n@@ -156,322 +156,4 @@\n }\r\n \r\n export default Messages;\r\n \r\n-import {useNavigate} from \"react-router-dom\";\r\n-import {Button, TextArea, TextInput} from \"../../styles/components\";\r\n-import {useAuth} from \"../../context/AuthProvider\";\r\n-import {useApp} from \"../../context/AppPorvider\";\r\n-import {useEffect, useRef, useState} from \"react\";\r\n-import {useSocketContext} from \"../../context/SocketContext\";\r\n-import {SERVERLINK} from \"../../constants\";\r\n-import Mess from \"../../components/pages/conversations/Message.jsx\";\r\n-import Icon from \"../../components/ui/Icon.jsx\";\r\n-import {Input} from \"postcss\";\r\n-\r\n-const Messages = () => {\r\n-\r\n-\r\n-    const navigate = useNavigate();\r\n-\r\n-    const { token } = useAuth();\r\n-\r\n-    const { messages, userToChat, handleCountUnread, handleShown } = useApp()\r\n-\r\n-    const [messInput, setMessInput] = useState(\"\");\r\n-\r\n-    const endOfMessagesRef = useRef(null);\r\n-\r\n-    const handleClick = () => {\r\n-        localStorage.removeItem('userToChat');\r\n-        navigate('/discussion');\r\n-    }\r\n-\r\n-    const handleInputChange = (e) => {\r\n-        setMessInput(e.target.value)\r\n-    }\r\n-\r\n-    const { socket } = useSocketContext();\r\n-\r\n-\r\n-    useEffect(() => {\r\n-\r\n-        handleShown(endOfMessagesRef);\r\n-\r\n-        socket?.on(\"newMessage\", async () => {\r\n-            // setMessages([...messages, await newMessage]);\r\n-            handleShown(endOfMessagesRef);\r\n-            handleCountUnread();\r\n-        });\r\n-\r\n-        return () => socket?.off(\"newMessage\");\r\n-\r\n-    }, [socket]);\r\n-\r\n-\r\n-\r\n-    const handleSendMessage = async (e) => {\r\n-        e.preventDefault();\r\n-\r\n-        const userToChat = await JSON.parse(localStorage.getItem('userToChat')).id;\r\n-\r\n-        const response = await fetch(SERVERLINK + '/api/messages/send/' + userToChat, {\r\n-            method: \"POST\",\r\n-            headers: {\r\n-                \"Content-Type\": \"application/json\",\r\n-                \"token\": token\r\n-            },\r\n-            body: JSON.stringify({ message: messInput })\r\n-        });\r\n-\r\n-        const answer = await response.json();\r\n-\r\n-        handleShown(endOfMessagesRef);\r\n-\r\n-        console.log(answer);\r\n-        setMessInput(\"\");\r\n-    }\r\n-    return (\r\n-        <section\r\n-            className=\"flex flex-col items-center justify-center w-full gap-4  rounded-xl bg-white-100 h-[85vh] relative overflow-hidden\">\r\n-            <div\r\n-                className=\"flex items-center justify-between w-full py-4 px-6 border-0 border-b border-b-black-20  bg-white-100 top-0 z-40\">\r\n-                <div className=\"flex items-center justify-between \">\r\n-                    <Icon variant=\"ghost\" icon=\"bi bi-chevron-left \" onClick={handleClick}/>\r\n-                    <div className=\"flex items-center gap-2 cursor-pointer\">\r\n-                        <img src={userToChat.pic} className={\"size-[54px] rounded-full bg-black-20\"}/>\r\n-                        <p className={\"text-black-100 text-lead\"}>{userToChat.fullName}<span\r\n-                            className=\"text-small-1 text-black-80\">({userToChat.accounttype})</span>\r\n-                        </p>\r\n-                    </div>\r\n-                </div>\r\n-                <Button variant=\"secondary\">Profile</Button>\r\n-            </div>\r\n-            <div\r\n-                className=\"flex flex-col gap-4 items-start justify-start h-screen px-6 py-[24px] w-full scrollbar-none overflow-y-scroll \">\r\n-                {\r\n-                    messages.length > 0 ? messages.map(message =>\r\n-                        (<>\r\n-                                {\r\n-                                    !message.receiverid === userToChat.id ? (\r\n-                                        <div className=\"w-full flex justify-start\">\r\n-                                            <Message\r\n-                                                message={message.content}\r\n-                                                sentDate={message.sentdate}/>\r\n-                                        </div>\r\n-                                    ) : (\r\n-                                        <div className=\"w-full flex justify-end\">\r\n-                                            <Message\r\n-                                                message={message.content}\r\n-                                                sentDate={message.sentdate} sentByCurrentUser/>\r\n-                                        </div>\r\n-                                    )\r\n-                                }\r\n-                            </>\r\n-                        )) : (\r\n-                        <p className=\"text-black-40 w-full h-screen text-center flex items-center justify-center text-subtitle-3\">\r\n-                            Envoyer un message!\r\n-                        </p>\r\n-                    )\r\n-                    \r\n-                }\r\n-                <div ref={endOfMessagesRef}/>\r\n-            </div>\r\n-            <div className=\"border-0 bg-white-100 px-6 py-4 w-full border-t border-t-black-20  bottom-0 z-40\">\r\n-                <form className=\"flex items-center justify-between gap-4\" onSubmit={handleSendMessage}>\r\n-                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-image\"/>\r\n-                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-emoji-smile\"/>\r\n-                    <TextInput rounded=\"full\" block\r\n-                               className=\"flex-1 outline-none bg-gray-100  text-base text-black-80 px-6 py-3\"\r\n-                               placeholder=\"Ecrire un message ....\"\r\n-                               onChange={handleInputChange}\r\n-                               value={messInput}\r\n-                    />\r\n-                    <Icon onClick={handleSendMessage} icon=\"bi bi-arrow-up\" size=\"sm\"/>\r\n-                </form>\r\n-            </div>\r\n-        </section>\r\n-    )\r\n-}\r\n-\r\n-\r\n-const Message = ({message, sentDate, sentByCurrentUser = false}) => {\r\n-\r\n-    const { timeSince } = useApp()\r\n-\r\n-    return <div className={`space-y-1 max-w-1/2`}>\r\n-        <div className={`p-4  rounded-2xl space-y-3 w-full ${sentByCurrentUser ? 'bg-primary-20' : 'bg-black-10'}`}>\r\n-            <p className=\"text-small-2 text-black-80 \">{timeSince(sentDate, 3)}</p>\r\n-            <p className=\"text-small-1 text-black-100\">{message}</p>\r\n-        </div>\r\n-\r\n-        <div className={`flex items-center  w-full gap-2 ${sentByCurrentUser ? 'justify-end' : 'justify-start'}`}>\r\n-            <Icon variant=\"ghost\" icon=\"bi bi-trash\" size=\"sm\"/>\r\n-            {\r\n-                !sentByCurrentUser &&\r\n-                <Icon variant=\"ghost\" icon=\"bi bi-arrow-90deg-down\" className=\"-rotate-90\" size=\"sm\"/>\r\n-            }\r\n-        </div>\r\n-    </div>\r\n-}\r\n-\r\n-export default Messages;\r\n-\r\n-import {useNavigate} from \"react-router-dom\";\r\n-import {Button, TextArea, TextInput} from \"../../styles/components\";\r\n-import {useAuth} from \"../../context/AuthProvider\";\r\n-import {useApp} from \"../../context/AppPorvider\";\r\n-import {useEffect, useRef, useState} from \"react\";\r\n-import {useSocketContext} from \"../../context/SocketContext\";\r\n-import {SERVERLINK} from \"../../constants\";\r\n-import Mess from \"../../components/pages/conversations/Message.jsx\";\r\n-import Icon from \"../../components/ui/Icon.jsx\";\r\n-import {Input} from \"postcss\";\r\n-\r\n-const Messages = () => {\r\n-\r\n-\r\n-    const navigate = useNavigate();\r\n-\r\n-    const { token } = useAuth();\r\n-\r\n-    const { messages, userToChat, handleCountUnread, handleShown } = useApp()\r\n-\r\n-    const [messInput, setMessInput] = useState(\"\");\r\n-\r\n-    const endOfMessagesRef = useRef(null);\r\n-\r\n-    const handleClick = () => {\r\n-        localStorage.removeItem('userToChat');\r\n-        navigate('/discussion');\r\n-    }\r\n-\r\n-    const handleInputChange = (e) => {\r\n-        setMessInput(e.target.value)\r\n-    }\r\n-\r\n-    const { socket } = useSocketContext();\r\n-\r\n-\r\n-    useEffect(() => {\r\n-\r\n-        handleShown(endOfMessagesRef);\r\n-\r\n-        socket?.on(\"newMessage\", async () => {\r\n-            // setMessages([...messages, await newMessage]);\r\n-            handleShown(endOfMessagesRef);\r\n-            handleCountUnread();\r\n-        });\r\n-\r\n-        return () => socket?.off(\"newMessage\");\r\n-\r\n-    }, [socket]);\r\n-\r\n-\r\n-\r\n-    const handleSendMessage = async (e) => {\r\n-        e.preventDefault();\r\n-\r\n-        const userToChat = await JSON.parse(localStorage.getItem('userToChat')).id;\r\n-\r\n-        const response = await fetch(SERVERLINK + '/api/messages/send/' + userToChat, {\r\n-            method: \"POST\",\r\n-            headers: {\r\n-                \"Content-Type\": \"application/json\",\r\n-                \"token\": token\r\n-            },\r\n-            body: JSON.stringify({ message: messInput })\r\n-        });\r\n-\r\n-        const answer = await response.json();\r\n-\r\n-        handleShown(endOfMessagesRef);\r\n-\r\n-        console.log(answer);\r\n-        setMessInput(\"\");\r\n-    }\r\n-    return (\r\n-        <section\r\n-            className=\"flex flex-col items-center justify-center w-full gap-4  rounded-xl bg-white-100 h-[85vh] relative overflow-hidden\">\r\n-            <div\r\n-                className=\"flex items-center justify-between w-full py-4 px-6 border-0 border-b border-b-black-20  bg-white-100 top-0 z-40\">\r\n-                <div className=\"flex items-center justify-between \">\r\n-                    <Icon variant=\"ghost\" icon=\"bi bi-chevron-left \" onClick={handleClick}/>\r\n-                    <div className=\"flex items-center gap-2 cursor-pointer\">\r\n-                        <img src={userToChat.pic} className={\"size-[54px] rounded-full bg-black-20\"}/>\r\n-                        <p className={\"text-black-100 text-lead\"}>{userToChat.fullName}<span\r\n-                            className=\"text-small-1 text-black-80\">({userToChat.accounttype})</span>\r\n-                        </p>\r\n-                    </div>\r\n-                </div>\r\n-                <Button variant=\"secondary\">Profile</Button>\r\n-            </div>\r\n-            <div\r\n-                className=\"flex flex-col gap-4 items-start justify-start h-screen px-6 py-[24px] w-full scrollbar-none overflow-y-scroll \">\r\n-                {\r\n-                    messages.length > 0 ? messages.map(message =>\r\n-                        (<>\r\n-                                {\r\n-                                    message.receiverid === userToChat.id ? (\r\n-                                        <div className=\"w-full flex justify-start\">\r\n-                                            <Message\r\n-                                                message={message.content}\r\n-                                                sentDate={message.sentdate}/>\r\n-                                        </div>\r\n-                                    ) : (\r\n-                                        <div className=\"w-full flex justify-end\">\r\n-                                            <Message\r\n-                                                message={message.content}\r\n-                                                sentDate={message.sentdate} sentByCurrentUser/>\r\n-                                        </div>\r\n-                                    )\r\n-                                }\r\n-                            </>\r\n-                        )) : (\r\n-                        <p className=\"text-black-40 w-full h-screen text-center flex items-center justify-center text-subtitle-3\">\r\n-                            Envoyer un message!\r\n-                        </p>\r\n-                    )\r\n-                    \r\n-                }\r\n-                <div ref={endOfMessagesRef}/>\r\n-            </div>\r\n-            <div className=\"border-0 bg-white-100 px-6 py-4 w-full border-t border-t-black-20  bottom-0 z-40\">\r\n-                <form className=\"flex items-center justify-between gap-4\" onSubmit={handleSendMessage}>\r\n-                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-image\"/>\r\n-                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-emoji-smile\"/>\r\n-                    <TextInput rounded=\"full\" block\r\n-                               className=\"flex-1 outline-none bg-gray-100  text-base text-black-80 px-6 py-3\"\r\n-                               placeholder=\"Ecrire un message ....\"\r\n-                               onChange={handleInputChange}\r\n-                               value={messInput}\r\n-                    />\r\n-                    <Icon onClick={handleSendMessage} icon=\"bi bi-arrow-up\" size=\"sm\"/>\r\n-                </form>\r\n-            </div>\r\n-        </section>\r\n-    )\r\n-}\r\n-\r\n-\r\n-const Message = ({message, sentDate, sentByCurrentUser = false}) => {\r\n-\r\n-    const { timeSince } = useApp()\r\n-\r\n-    return <div className={`space-y-1 max-w-1/2`}>\r\n-        <div className={`p-4  rounded-2xl space-y-3 w-full ${sentByCurrentUser ? 'bg-primary-20' : 'bg-black-10'}`}>\r\n-            <p className=\"text-small-2 text-black-80 \">{timeSince(sentDate, 3)}</p>\r\n-            <p className=\"text-small-1 text-black-100\">{message}</p>\r\n-        </div>\r\n-\r\n-        <div className={`flex items-center  w-full gap-2 ${sentByCurrentUser ? 'justify-end' : 'justify-start'}`}>\r\n-            <Icon variant=\"ghost\" icon=\"bi bi-trash\" size=\"sm\"/>\r\n-            {\r\n-                !sentByCurrentUser &&\r\n-                <Icon variant=\"ghost\" icon=\"bi bi-arrow-90deg-down\" className=\"-rotate-90\" size=\"sm\"/>\r\n-            }\r\n-        </div>\r\n-    </div>\r\n-}\r\n-\r\n-export default Messages;\r\n-\r\n"
                },
                {
                    "date": 1722235988227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,159 @@\n+import {useNavigate} from \"react-router-dom\";\r\n+import {Button, TextArea, TextInput} from \"../../styles/components\";\r\n+import {useAuth} from \"../../context/AuthProvider\";\r\n+import {useApp} from \"../../context/AppPorvider\";\r\n+import {useEffect, useRef, useState} from \"react\";\r\n+import {useSocketContext} from \"../../context/SocketContext\";\r\n+import {SERVERLINK} from \"../../constants\";\r\n+import Mess from \"../../components/pages/conversations/Message.jsx\";\r\n+import Icon from \"../../components/ui/Icon.jsx\";\r\n+import {Input} from \"postcss\";\r\n+\r\n+const Messages = () => {\r\n+\r\n+\r\n+    const navigate = useNavigate();\r\n+\r\n+    const { token } = useAuth();\r\n+\r\n+    const { messages, userToChat, handleCountUnread, handleShown } = useApp()\r\n+\r\n+    const [messInput, setMessInput] = useState(\"\");\r\n+\r\n+    const endOfMessagesRef = useRef(null);\r\n+\r\n+    const handleClick = () => {\r\n+        localStorage.removeItem('userToChat');\r\n+        navigate('/discussion');\r\n+    }\r\n+\r\n+    const handleInputChange = (e) => {\r\n+        setMessInput(e.target.value)\r\n+    }\r\n+\r\n+    const { socket } = useSocketContext();\r\n+\r\n+\r\n+    useEffect(() => {\r\n+\r\n+        handleShown(endOfMessagesRef);\r\n+\r\n+        socket?.on(\"newMessage\", async () => {\r\n+            // setMessages([...messages, await newMessage]);\r\n+            handleShown(endOfMessagesRef);\r\n+            handleCountUnread();\r\n+        });\r\n+\r\n+        return () => socket?.off(\"newMessage\");\r\n+\r\n+    }, [socket]);\r\n+\r\n+\r\n+\r\n+    const handleSendMessage = async (e) => {\r\n+        e.preventDefault();\r\n+\r\n+        const userToChat = await JSON.parse(localStorage.getItem('userToChat')).id;\r\n+\r\n+        const response = await fetch(SERVERLINK + '/api/messages/send/' + userToChat, {\r\n+            method: \"POST\",\r\n+            headers: {\r\n+                \"Content-Type\": \"application/json\",\r\n+                \"token\": token\r\n+            },\r\n+            body: JSON.stringify({ message: messInput })\r\n+        });\r\n+\r\n+        const answer = await response.json();\r\n+\r\n+        handleShown(endOfMessagesRef);\r\n+\r\n+        console.log(answer);\r\n+        setMessInput(\"\");\r\n+    }\r\n+    return (\r\n+        <section\r\n+            className=\"flex flex-col items-center justify-center w-full gap-4  rounded-xl bg-white-100 h-[85vh] relative overflow-hidden\">\r\n+            <div\r\n+                className=\"flex items-center justify-between w-full py-4 px-6 border-0 border-b border-b-black-20  bg-white-100 top-0 z-40\">\r\n+                <div className=\"flex items-center justify-between \">\r\n+                    <Icon variant=\"ghost\" icon=\"bi bi-chevron-left \" onClick={handleClick}/>\r\n+                    <div className=\"flex items-center gap-2 cursor-pointer\">\r\n+                        <img src={userToChat.pic} className={\"size-[54px] rounded-full bg-black-20\"}/>\r\n+                        <p className={\"text-black-100 text-lead\"}>{userToChat.fullName}<span\r\n+                            className=\"text-small-1 text-black-80\">({userToChat.accounttype})</span>\r\n+                        </p>\r\n+                    </div>\r\n+                </div>\r\n+                <Button variant=\"secondary\">Profile</Button>\r\n+            </div>\r\n+            <div\r\n+                className=\"flex flex-col gap-4 items-start justify-start h-screen px-6 py-[24px] w-full scrollbar-none overflow-y-scroll \">\r\n+                {\r\n+                    messages.length > 0 ? messages.map(message =>\r\n+                        (<>\r\n+                                {\r\n+                                    !(message.receiverid === userToChat.id) ? (\r\n+                                        <div className=\"w-full flex justify-start\">\r\n+                                            <Message\r\n+                                                message={message.content}\r\n+                                                sentDate={message.sentdate}/>\r\n+                                        </div>\r\n+                                    ) : (\r\n+                                        <div className=\"w-full flex justify-end\">\r\n+                                            <Message\r\n+                                                message={message.content}\r\n+                                                sentDate={message.sentdate} sentByCurrentUser/>\r\n+                                        </div>\r\n+                                    )\r\n+                                }\r\n+                            </>\r\n+                        )) : (\r\n+                        <p className=\"text-black-40 w-full h-screen text-center flex items-center justify-center text-subtitle-3\">\r\n+                            Envoyer un message!\r\n+                        </p>\r\n+                    )\r\n+                    \r\n+                }\r\n+                <div ref={endOfMessagesRef}/>\r\n+            </div>\r\n+            <div className=\"border-0 bg-white-100 px-6 py-4 w-full border-t border-t-black-20  bottom-0 z-40\">\r\n+                <form className=\"flex items-center justify-between gap-4\" onSubmit={handleSendMessage}>\r\n+                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-image\"/>\r\n+                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-emoji-smile\"/>\r\n+                    <TextInput rounded=\"full\" block\r\n+                               className=\"flex-1 outline-none bg-gray-100  text-base text-black-80 px-6 py-3\"\r\n+                               placeholder=\"Ecrire un message ....\"\r\n+                               onChange={handleInputChange}\r\n+                               value={messInput}\r\n+                    />\r\n+                    <Icon onClick={handleSendMessage} icon=\"bi bi-arrow-up\" size=\"sm\"/>\r\n+                </form>\r\n+            </div>\r\n+        </section>\r\n+    )\r\n+}\r\n+\r\n+\r\n+const Message = ({message, sentDate, sentByCurrentUser = false}) => {\r\n+\r\n+    const { timeSince } = useApp()\r\n+\r\n+    return <div className={`space-y-1 max-w-[420px] text`}>\r\n+        <div className={`p-4  rounded-2xl space-y-3 w-full ${sentByCurrentUser ? 'bg-primary-20' : 'bg-black-10'}`}>\r\n+            <p className=\"text-small-2 text-black-80 \">{timeSince(sentDate, 3)}</p>\r\n+            <p className=\"text-small-1 text-black-100\">{message}</p>\r\n+        </div>\r\n+\r\n+        <div className={`flex items-center  w-full gap-2 ${sentByCurrentUser ? 'justify-end' : 'justify-start'}`}>\r\n+            <Icon variant=\"ghost\" icon=\"bi bi-trash\" size=\"sm\"/>\r\n+            {\r\n+                !sentByCurrentUser &&\r\n+                <Icon variant=\"ghost\" icon=\"bi bi-arrow-90deg-down\" className=\"-rotate-90\" size=\"sm\"/>\r\n+            }\r\n+        </div>\r\n+    </div>\r\n+}\r\n+\r\n+export default Messages;\r\n+\r\n"
                },
                {
                    "date": 1722236000639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n const Message = ({message, sentDate, sentByCurrentUser = false}) => {\r\n \r\n     const { timeSince } = useApp()\r\n \r\n-    return <div className={`space-y-1 max-w-[420px] text`}>\r\n+    return <div className={`space-y-1 max-w-[420px] word`}>\r\n         <div className={`p-4  rounded-2xl space-y-3 w-full ${sentByCurrentUser ? 'bg-primary-20' : 'bg-black-10'}`}>\r\n             <p className=\"text-small-2 text-black-80 \">{timeSince(sentDate, 3)}</p>\r\n             <p className=\"text-small-1 text-black-100\">{message}</p>\r\n         </div>\r\n@@ -156,163 +156,4 @@\n }\r\n \r\n export default Messages;\r\n \r\n-import {useNavigate} from \"react-router-dom\";\r\n-import {Button, TextArea, TextInput} from \"../../styles/components\";\r\n-import {useAuth} from \"../../context/AuthProvider\";\r\n-import {useApp} from \"../../context/AppPorvider\";\r\n-import {useEffect, useRef, useState} from \"react\";\r\n-import {useSocketContext} from \"../../context/SocketContext\";\r\n-import {SERVERLINK} from \"../../constants\";\r\n-import Mess from \"../../components/pages/conversations/Message.jsx\";\r\n-import Icon from \"../../components/ui/Icon.jsx\";\r\n-import {Input} from \"postcss\";\r\n-\r\n-const Messages = () => {\r\n-\r\n-\r\n-    const navigate = useNavigate();\r\n-\r\n-    const { token } = useAuth();\r\n-\r\n-    const { messages, userToChat, handleCountUnread, handleShown } = useApp()\r\n-\r\n-    const [messInput, setMessInput] = useState(\"\");\r\n-\r\n-    const endOfMessagesRef = useRef(null);\r\n-\r\n-    const handleClick = () => {\r\n-        localStorage.removeItem('userToChat');\r\n-        navigate('/discussion');\r\n-    }\r\n-\r\n-    const handleInputChange = (e) => {\r\n-        setMessInput(e.target.value)\r\n-    }\r\n-\r\n-    const { socket } = useSocketContext();\r\n-\r\n-\r\n-    useEffect(() => {\r\n-\r\n-        handleShown(endOfMessagesRef);\r\n-\r\n-        socket?.on(\"newMessage\", async () => {\r\n-            // setMessages([...messages, await newMessage]);\r\n-            handleShown(endOfMessagesRef);\r\n-            handleCountUnread();\r\n-        });\r\n-\r\n-        return () => socket?.off(\"newMessage\");\r\n-\r\n-    }, [socket]);\r\n-\r\n-\r\n-\r\n-    const handleSendMessage = async (e) => {\r\n-        e.preventDefault();\r\n-\r\n-        const userToChat = await JSON.parse(localStorage.getItem('userToChat')).id;\r\n-\r\n-        const response = await fetch(SERVERLINK + '/api/messages/send/' + userToChat, {\r\n-            method: \"POST\",\r\n-            headers: {\r\n-                \"Content-Type\": \"application/json\",\r\n-                \"token\": token\r\n-            },\r\n-            body: JSON.stringify({ message: messInput })\r\n-        });\r\n-\r\n-        const answer = await response.json();\r\n-\r\n-        handleShown(endOfMessagesRef);\r\n-\r\n-        console.log(answer);\r\n-        setMessInput(\"\");\r\n-    }\r\n-    return (\r\n-        <section\r\n-            className=\"flex flex-col items-center justify-center w-full gap-4  rounded-xl bg-white-100 h-[85vh] relative overflow-hidden\">\r\n-            <div\r\n-                className=\"flex items-center justify-between w-full py-4 px-6 border-0 border-b border-b-black-20  bg-white-100 top-0 z-40\">\r\n-                <div className=\"flex items-center justify-between \">\r\n-                    <Icon variant=\"ghost\" icon=\"bi bi-chevron-left \" onClick={handleClick}/>\r\n-                    <div className=\"flex items-center gap-2 cursor-pointer\">\r\n-                        <img src={userToChat.pic} className={\"size-[54px] rounded-full bg-black-20\"}/>\r\n-                        <p className={\"text-black-100 text-lead\"}>{userToChat.fullName}<span\r\n-                            className=\"text-small-1 text-black-80\">({userToChat.accounttype})</span>\r\n-                        </p>\r\n-                    </div>\r\n-                </div>\r\n-                <Button variant=\"secondary\">Profile</Button>\r\n-            </div>\r\n-            <div\r\n-                className=\"flex flex-col gap-4 items-start justify-start h-screen px-6 py-[24px] w-full scrollbar-none overflow-y-scroll \">\r\n-                {\r\n-                    messages.length > 0 ? messages.map(message =>\r\n-                        (<>\r\n-                                {\r\n-                                    !(message.receiverid === userToChat.id) ? (\r\n-                                        <div className=\"w-full flex justify-start\">\r\n-                                            <Message\r\n-                                                message={message.content}\r\n-                                                sentDate={message.sentdate}/>\r\n-                                        </div>\r\n-                                    ) : (\r\n-                                        <div className=\"w-full flex justify-end\">\r\n-                                            <Message\r\n-                                                message={message.content}\r\n-                                                sentDate={message.sentdate} sentByCurrentUser/>\r\n-                                        </div>\r\n-                                    )\r\n-                                }\r\n-                            </>\r\n-                        )) : (\r\n-                        <p className=\"text-black-40 w-full h-screen text-center flex items-center justify-center text-subtitle-3\">\r\n-                            Envoyer un message!\r\n-                        </p>\r\n-                    )\r\n-                    \r\n-                }\r\n-                <div ref={endOfMessagesRef}/>\r\n-            </div>\r\n-            <div className=\"border-0 bg-white-100 px-6 py-4 w-full border-t border-t-black-20  bottom-0 z-40\">\r\n-                <form className=\"flex items-center justify-between gap-4\" onSubmit={handleSendMessage}>\r\n-                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-image\"/>\r\n-                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-emoji-smile\"/>\r\n-                    <TextInput rounded=\"full\" block\r\n-                               className=\"flex-1 outline-none bg-gray-100  text-base text-black-80 px-6 py-3\"\r\n-                               placeholder=\"Ecrire un message ....\"\r\n-                               onChange={handleInputChange}\r\n-                               value={messInput}\r\n-                    />\r\n-                    <Icon onClick={handleSendMessage} icon=\"bi bi-arrow-up\" size=\"sm\"/>\r\n-                </form>\r\n-            </div>\r\n-        </section>\r\n-    )\r\n-}\r\n-\r\n-\r\n-const Message = ({message, sentDate, sentByCurrentUser = false}) => {\r\n-\r\n-    const { timeSince } = useApp()\r\n-\r\n-    return <div className={`space-y-1 max-w-[]`}>\r\n-        <div className={`p-4  rounded-2xl space-y-3 w-full ${sentByCurrentUser ? 'bg-primary-20' : 'bg-black-10'}`}>\r\n-            <p className=\"text-small-2 text-black-80 \">{timeSince(sentDate, 3)}</p>\r\n-            <p className=\"text-small-1 text-black-100\">{message}</p>\r\n-        </div>\r\n-\r\n-        <div className={`flex items-center  w-full gap-2 ${sentByCurrentUser ? 'justify-end' : 'justify-start'}`}>\r\n-            <Icon variant=\"ghost\" icon=\"bi bi-trash\" size=\"sm\"/>\r\n-            {\r\n-                !sentByCurrentUser &&\r\n-                <Icon variant=\"ghost\" icon=\"bi bi-arrow-90deg-down\" className=\"-rotate-90\" size=\"sm\"/>\r\n-            }\r\n-        </div>\r\n-    </div>\r\n-}\r\n-\r\n-export default Messages;\r\n-\r\n"
                },
                {
                    "date": 1722236008352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n const Message = ({message, sentDate, sentByCurrentUser = false}) => {\r\n \r\n     const { timeSince } = useApp()\r\n \r\n-    return <div className={`space-y-1 max-w-[420px] word->\r\n+    return <div className={`space-y-1 max-w-[420px] word-\">\r\n         <div className={`p-4  rounded-2xl space-y-3 w-full ${sentByCurrentUser ? 'bg-primary-20' : 'bg-black-10'}`}>\r\n             <p className=\"text-small-2 text-black-80 \">{timeSince(sentDate, 3)}</p>\r\n             <p className=\"text-small-1 text-black-100\">{message}</p>\r\n         </div>\r\n"
                },
                {
                    "date": 1722236018377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,159 @@\n+import {useNavigate} from \"react-router-dom\";\r\n+import {Button, TextArea, TextInput} from \"../../styles/components\";\r\n+import {useAuth} from \"../../context/AuthProvider\";\r\n+import {useApp} from \"../../context/AppPorvider\";\r\n+import {useEffect, useRef, useState} from \"react\";\r\n+import {useSocketContext} from \"../../context/SocketContext\";\r\n+import {SERVERLINK} from \"../../constants\";\r\n+import Mess from \"../../components/pages/conversations/Message.jsx\";\r\n+import Icon from \"../../components/ui/Icon.jsx\";\r\n+import {Input} from \"postcss\";\r\n+\r\n+const Messages = () => {\r\n+\r\n+\r\n+    const navigate = useNavigate();\r\n+\r\n+    const { token } = useAuth();\r\n+\r\n+    const { messages, userToChat, handleCountUnread, handleShown } = useApp()\r\n+\r\n+    const [messInput, setMessInput] = useState(\"\");\r\n+\r\n+    const endOfMessagesRef = useRef(null);\r\n+\r\n+    const handleClick = () => {\r\n+        localStorage.removeItem('userToChat');\r\n+        navigate('/discussion');\r\n+    }\r\n+\r\n+    const handleInputChange = (e) => {\r\n+        setMessInput(e.target.value)\r\n+    }\r\n+\r\n+    const { socket } = useSocketContext();\r\n+\r\n+\r\n+    useEffect(() => {\r\n+\r\n+        handleShown(endOfMessagesRef);\r\n+\r\n+        socket?.on(\"newMessage\", async () => {\r\n+            // setMessages([...messages, await newMessage]);\r\n+            handleShown(endOfMessagesRef);\r\n+            handleCountUnread();\r\n+        });\r\n+\r\n+        return () => socket?.off(\"newMessage\");\r\n+\r\n+    }, [socket]);\r\n+\r\n+\r\n+\r\n+    const handleSendMessage = async (e) => {\r\n+        e.preventDefault();\r\n+\r\n+        const userToChat = await JSON.parse(localStorage.getItem('userToChat')).id;\r\n+\r\n+        const response = await fetch(SERVERLINK + '/api/messages/send/' + userToChat, {\r\n+            method: \"POST\",\r\n+            headers: {\r\n+                \"Content-Type\": \"application/json\",\r\n+                \"token\": token\r\n+            },\r\n+            body: JSON.stringify({ message: messInput })\r\n+        });\r\n+\r\n+        const answer = await response.json();\r\n+\r\n+        handleShown(endOfMessagesRef);\r\n+\r\n+        console.log(answer);\r\n+        setMessInput(\"\");\r\n+    }\r\n+    return (\r\n+        <section\r\n+            className=\"flex flex-col items-center justify-center w-full gap-4  rounded-xl bg-white-100 h-[85vh] relative overflow-hidden\">\r\n+            <div\r\n+                className=\"flex items-center justify-between w-full py-4 px-6 border-0 border-b border-b-black-20  bg-white-100 top-0 z-40\">\r\n+                <div className=\"flex items-center justify-between \">\r\n+                    <Icon variant=\"ghost\" icon=\"bi bi-chevron-left \" onClick={handleClick}/>\r\n+                    <div className=\"flex items-center gap-2 cursor-pointer\">\r\n+                        <img src={userToChat.pic} className={\"size-[54px] rounded-full bg-black-20\"}/>\r\n+                        <p className={\"text-black-100 text-lead\"}>{userToChat.fullName}<span\r\n+                            className=\"text-small-1 text-black-80\">({userToChat.accounttype})</span>\r\n+                        </p>\r\n+                    </div>\r\n+                </div>\r\n+                <Button variant=\"secondary\">Profile</Button>\r\n+            </div>\r\n+            <div\r\n+                className=\"flex flex-col gap-4 items-start justify-start h-screen px-6 py-[24px] w-full scrollbar-none overflow-y-scroll \">\r\n+                {\r\n+                    messages.length > 0 ? messages.map(message =>\r\n+                        (<>\r\n+                                {\r\n+                                    !(message.receiverid === userToChat.id) ? (\r\n+                                        <div className=\"w-full flex justify-start\">\r\n+                                            <Message\r\n+                                                message={message.content}\r\n+                                                sentDate={message.sentdate}/>\r\n+                                        </div>\r\n+                                    ) : (\r\n+                                        <div className=\"w-full flex justify-end\">\r\n+                                            <Message\r\n+                                                message={message.content}\r\n+                                                sentDate={message.sentdate} sentByCurrentUser/>\r\n+                                        </div>\r\n+                                    )\r\n+                                }\r\n+                            </>\r\n+                        )) : (\r\n+                        <p className=\"text-black-40 w-full h-screen text-center flex items-center justify-center text-subtitle-3\">\r\n+                            Envoyer un message!\r\n+                        </p>\r\n+                    )\r\n+                    \r\n+                }\r\n+                <div ref={endOfMessagesRef}/>\r\n+            </div>\r\n+            <div className=\"border-0 bg-white-100 px-6 py-4 w-full border-t border-t-black-20  bottom-0 z-40\">\r\n+                <form className=\"flex items-center justify-between gap-4\" onSubmit={handleSendMessage}>\r\n+                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-image\"/>\r\n+                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-emoji-smile\"/>\r\n+                    <TextInput rounded=\"full\" block\r\n+                               className=\"flex-1 outline-none bg-gray-100  text-base text-black-80 px-6 py-3\"\r\n+                               placeholder=\"Ecrire un message ....\"\r\n+                               onChange={handleInputChange}\r\n+                               value={messInput}\r\n+                    />\r\n+                    <Icon onClick={handleSendMessage} icon=\"bi bi-arrow-up\" size=\"sm\"/>\r\n+                </form>\r\n+            </div>\r\n+        </section>\r\n+    )\r\n+}\r\n+\r\n+\r\n+const Message = ({message, sentDate, sentByCurrentUser = false}) => {\r\n+\r\n+    const { timeSince } = useApp()\r\n+\r\n+    return <div className=\"space-y-1 max-w-[420px] word-\">\r\n+        <div className={`p-4  rounded-2xl space-y-3 w-full ${sentByCurrentUser ? 'bg-primary-20' : 'bg-black-10'}`}>\r\n+            <p className=\"text-small-2 text-black-80 \">{timeSince(sentDate, 3)}</p>\r\n+            <p className=\"text-small-1 text-black-100\">{message}</p>\r\n+        </div>\r\n+\r\n+        <div className={`flex items-center  w-full gap-2 ${sentByCurrentUser ? 'justify-end' : 'justify-start'}`}>\r\n+            <Icon variant=\"ghost\" icon=\"bi bi-trash\" size=\"sm\"/>\r\n+            {\r\n+                !sentByCurrentUser &&\r\n+                <Icon variant=\"ghost\" icon=\"bi bi-arrow-90deg-down\" className=\"-rotate-90\" size=\"sm\"/>\r\n+            }\r\n+        </div>\r\n+    </div>\r\n+}\r\n+\r\n+export default Messages;\r\n+\r\n"
                }
            ],
            "date": 1722234846982,
            "name": "Commit-0",
            "content": "import {useNavigate} from \"react-router-dom\";\r\nimport {Button, TextArea, TextInput} from \"../../styles/components\";\r\nimport {useAuth} from \"../../context/AuthProvider\";\r\nimport {useApp} from \"../../context/AppPorvider\";\r\nimport {useEffect, useRef, useState} from \"react\";\r\nimport {useSocketContext} from \"../../context/SocketContext\";\r\nimport {SERVERLINK} from \"../../constants\";\r\nimport Mess from \"../../components/pages/conversations/Message.jsx\";\r\nimport Icon from \"../../components/ui/Icon.jsx\";\r\nimport {Input} from \"postcss\";\r\n\r\nconst Messages = () => {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const {token} = useAuth();\r\n\r\n    const {messages, setMessages, userToChat, setUserToChat, handleCountUnread} = useApp()\r\n\r\n    const [messInput, setMessInput] = useState(\"\");\r\n\r\n    const endOfMessagesRef = useRef(null);\r\n\r\n    const scrollToBottom = () => {\r\n        // endOfMessagesRef.current?.scrollIntoView({behavior: 'smooth'});\r\n    };\r\n\r\n    const handleClick = () => {\r\n        localStorage.removeItem('userToChat');\r\n        navigate('/discussion');\r\n    }\r\n\r\n    const handleInputChange = (e) => {\r\n        setMessInput(e.target.value)\r\n    }\r\n\r\n    const {socket} = useSocketContext();\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const handleShown = async () => {\r\n\r\n            const user = await JSON.parse(localStorage.getItem('userToChat'));\r\n\r\n            setUserToChat({\r\n                id: user.id,\r\n                fullName: user.fullName,\r\n                accountType: user.accountType,\r\n                pic: user.pic\r\n            })\r\n\r\n            const messagesRes = await fetch(SERVERLINK + '/api/messages/' + await user.id, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"token\": token\r\n                }\r\n            })\r\n\r\n            const allMessages = await messagesRes.json();\r\n\r\n            setMessages(await allMessages.messages);\r\n\r\n            scrollToBottom();\r\n\r\n        }\r\n\r\n        handleShown();\r\n\r\n        socket?.on(\"newMessage\", (newMessage) => {\r\n            setMessages([...messages, newMessage]);\r\n            handleCountUnread();\r\n            handleShowConversation();\r\n        });\r\n\r\n        return () => socket?.off(\"newMessage\");\r\n\r\n    }, [messages, socket]);\r\n\r\n\r\n    const handleSendMessage = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const userToChat = await JSON.parse(localStorage.getItem('userToChat')).id;\r\n\r\n        const response = await fetch(SERVERLINK + '/api/messages/send/' + userToChat, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"token\": token\r\n            },\r\n            body: JSON.stringify({message: messInput})\r\n        });\r\n\r\n        const answer = await response.json();\r\n\r\n        console.log(answer);\r\n        setMessInput(\"\");\r\n        scrollToBottom();\r\n    }\r\n    return (\r\n        <section\r\n            className=\"flex flex-col items-center justify-center w-full gap-4  rounded-xl bg-white-100 h-[85vh] relative overflow-hidden\">\r\n            <div\r\n                className=\"flex items-center justify-between w-full py-4 px-6 border-0 border-b border-b-black-20  bg-white-100 top-0 z-40\">\r\n                <div className=\"flex items-center justify-between \">\r\n                    <Icon variant=\"ghost\" icon=\"bi bi-chevron-left \" onClick={() => navigate(\"/discussion\")}/>\r\n                    <div className=\"flex items-center gap-2 cursor-pointer\">\r\n                        <img src={userToChat.pic} className={\"size-[54px] rounded-full bg-black-20\"}/>\r\n                        <p className={\"text-black-100 text-lead\"}>{userToChat.fullName}<span\r\n                            className=\"text-small-1 text-black-80\">({userToChat.accounttype})</span>\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n                <Button variant=\"secondary\">Profile</Button>\r\n            </div>\r\n            <div\r\n                className=\"flex flex-col gap-4 items-start justify-start h-screen px-6 py-[24px] w-full scrollbar-none overflow-y-scroll \">\r\n                {\r\n                    messages.length > 0 ? messages.map(message =>\r\n                        (<>\r\n                                {\r\n                                    message.receiverid === userToChat.id ? (\r\n                                        <div className=\"w-full flex justify-start\">\r\n                                            <Message\r\n                                                message={message.content}\r\n                                                sentDate=\"2 minutes\"/>\r\n                                        </div>\r\n                                    ) : (\r\n                                        <div className=\"w-full flex justify-end\">\r\n                                            <Message\r\n                                                message={message.content}\r\n                                                sentDate={new Date(message.sentdate).toLocaleString()} sentByCurrentUser/>\r\n                                        </div>\r\n                                    )\r\n                                }\r\n                            </>\r\n                        )) : (\r\n                        <p className=\"text-black-40 w-full h-screen text-center flex items-center justify-center text-subtitle-3\">\r\n                            Envoyer un message!\r\n                        </p>\r\n                    )\r\n                    \r\n                }\r\n                <div ref={endOfMessagesRef}/>\r\n            </div>\r\n            <div className=\"border-0 bg-white-100 px-6 py-4 w-full border-t border-t-black-20  bottom-0 z-40\">\r\n                <form className=\"flex items-center justify-between gap-4\" onSubmit={handleSendMessage}>\r\n                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-image\"/>\r\n                    <Icon size=\"md\" variant=\"ghost\" icon=\"bi bi-emoji-smile\"/>\r\n                    <TextInput rounded=\"full\" block\r\n                               className=\"flex-1 outline-none bg-gray-100  text-base text-black-80 px-6 py-3\"\r\n                               placeholder=\"Ecrire un message ....\"\r\n                               onChange={handleInputChange}\r\n                               value={messInput}\r\n                    />\r\n                    <Icon onClick={handleSendMessage} icon=\"bi bi-arrow-up\" size=\"sm\"/>\r\n                </form>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\n\r\nconst Message = ({message, sentDate, sentByCurrentUser = false}) => {\r\n    return <div className={`space-y-1 max-w-1/2`}>\r\n        <div className={`p-4  rounded-2xl space-y-3 w-full ${sentByCurrentUser ? 'bg-primary-20' : 'bg-black-10'}`}>\r\n            <p className=\"text-small-2 text-black-80 \">{sentDate}</p>\r\n            <p className=\"text-small-1 text-black-100\">{message}</p>\r\n        </div>\r\n\r\n        <div className={`flex items-center  w-full gap-2 ${sentByCurrentUser ? 'justify-end' : 'justify-start'}`}>\r\n            <Icon variant=\"ghost\" icon=\"bi bi-trash\" size=\"sm\"/>\r\n            {\r\n                !sentByCurrentUser &&\r\n                <Icon variant=\"ghost\" icon=\"bi bi-arrow-90deg-down\" className=\"-rotate-90\" size=\"sm\"/>\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Messages;\r\n\r\n"
        }
    ]
}