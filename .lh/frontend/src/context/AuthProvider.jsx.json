{
    "sourceFile": "frontend/src/context/AuthProvider.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1720602151503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1720602537299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { createContext, useContext, useEffect, useState } from \"react\";\r\n import { REGISRATION_STEPS, SERVERLINK } from \"../constants/index.js\";\r\n import { useNavigate } from \"react-router-dom\";\r\n-import \r\n+import axios from₼\r\n \r\n export const AuthContext = createContext({});\r\n \r\n const AuthProvider = ({ children }) => {\r\n"
                },
                {
                    "date": 1720602545050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,169 @@\n+import { createContext, useContext, useEffect, useState } from \"react\";\r\n+import { REGISRATION_STEPS, SERVERLINK } from \"../constants/index.js\";\r\n+import { useNavigate } from \"react-router-dom\";\r\n+import axios from₼ \"\"\r\n+\r\n+export const AuthContext = createContext({});\r\n+\r\n+const AuthProvider = ({ children }) => {\r\n+    const [isAuth, setIsAuth] = useState(false);\r\n+    const [personalInformation, setPersonalInformation] = useState([]);\r\n+    const [registerMode, setRegisterMode] = useState(\"Camionneur\"); // The account type thah the user selected\r\n+    const [registrationStep, setRegistrationStep] = useState(\r\n+        REGISRATION_STEPS.accoutType\r\n+    ); // In witch registration route is the user\r\n+    const [loading, setLoading] = useState(false)\r\n+\r\n+    const navigate = useNavigate();\r\n+\r\n+    // Register handler\r\n+    const [inputs, setInputs] = useState({\r\n+        firstname: \"\",\r\n+        lastname: \"\",\r\n+        userCin: \"\",\r\n+        companyNumber: \"\",\r\n+        phone: \"\",\r\n+        adress: \"\",\r\n+        email: \"\",\r\n+        bio: \"\",\r\n+        profileImage: \"\",\r\n+        accountId: 0,\r\n+        password: \"\",\r\n+        confirmPassword: \"\",\r\n+    });\r\n+\r\n+    const [errorData, setErrorData] = useState({\r\n+        firstname: true,\r\n+        lastname: true,\r\n+        userCin: true,\r\n+        companyNumber: true,\r\n+        phone: true,\r\n+        adress: true,\r\n+        email: true,\r\n+        bio: true,\r\n+        profileImage: true,\r\n+        accountId: true,\r\n+        password: true,\r\n+        confirmPassword: true\r\n+    })\r\n+\r\n+    const setAuth = (boolean) => {\r\n+        setIsAuth(boolean);\r\n+    };\r\n+\r\n+    const getInformation = async () => {\r\n+        const token = localStorage.getItem(\"accessToken\");\r\n+        try {\r\n+            const response = await fetch(SERVERLINK + \"/api/auth/me\", {\r\n+                method: \"GET\",\r\n+                headers: {\r\n+                    \"Content-Type\": \"application/json\",\r\n+                    token: token,\r\n+                },\r\n+            });\r\n+\r\n+            const parseRes = await response.json();\r\n+\r\n+            if (localStorage.getItem(\"accessToken\") && parseRes.error) {\r\n+                try {\r\n+                    const refreshToken = sessionStorage.getItem(\"refToken\");\r\n+                    const response = await fetch(SERVERLINK + '/api/auth/token',\r\n+                        {\r\n+                            method: \"POST\",\r\n+                            headers: { \"Content-Type\": \"application/json\" },\r\n+                            body: JSON.stringify({ refToken: refreshToken })\r\n+                        }\r\n+                    );\r\n+\r\n+                    const parseRes = await response.json();\r\n+\r\n+                    if (parseRes.auth === true) {\r\n+                        localStorage.setItem('accessToken', parseRes.accessToken);\r\n+                        getInformation();\r\n+                    } else {\r\n+                        console.log(parseRes.error)\r\n+                        localStorage.removeItem(\"accessToken\");\r\n+                        setAuth(false);\r\n+                    }\r\n+\r\n+                } catch (error) {\r\n+                    localStorage.removeItem(\"accessToken\");\r\n+                    setAuth(false);\r\n+                }\r\n+            }\r\n+\r\n+            setPersonalInformation(parseRes);\r\n+\r\n+            if (personalInformation.id) setAuth(true);\r\n+\r\n+            console.log(`PersonalInfo : ${personalInformation.id}`);\r\n+\r\n+        } catch (error) {\r\n+            console.log(\"erreur lors du chargement du profil\" + error);\r\n+        }\r\n+    };\r\n+\r\n+    useEffect(() => {\r\n+        const token = localStorage.getItem('accessToken');\r\n+        if (token) {\r\n+            navigate('/');\r\n+            getInformation();\r\n+        }\r\n+    }, []);\r\n+\r\n+    const logout = () => {\r\n+        localStorage.removeItem(\"accessToken\");\r\n+        setAuth(false);\r\n+        navigate(\"/login\");\r\n+    }\r\n+\r\n+    const login = async (parseRs) => {\r\n+        localStorage.setItem(\"accessToken\", parseRs.accessToken);\r\n+        setAuth(true);\r\n+        await getInformation();\r\n+        navigate(\"/\");\r\n+    }\r\n+\r\n+    const checkUserConnected = () => {\r\n+        console.log(\"checkUserConnected\")\r\n+        getInformation();\r\n+    }\r\n+\r\n+    useEffect(() => {\r\n+        console.log(\"checkUserConnected AuthProvider\")\r\n+        checkUserConnected();\r\n+    }, []);\r\n+\r\n+    return (\r\n+        <AuthContext.Provider\r\n+            value={{\r\n+                isAuth,\r\n+                setAuth,\r\n+                personalInformation,\r\n+                setPersonalInformation,\r\n+                getInformation,\r\n+                inputs,\r\n+                setInputs,\r\n+                errorData,\r\n+                setErrorData,\r\n+                registerMode,\r\n+                setRegisterMode,\r\n+                registrationStep,\r\n+                setRegistrationStep,\r\n+                logout,\r\n+                login,\r\n+                loading,\r\n+                setLoading,\r\n+                checkUserConnected\r\n+            }}\r\n+        >\r\n+            {children}\r\n+        </AuthContext.Provider>\r\n+    );\r\n+};\r\n+\r\n+export default AuthProvider;\r\n+\r\n+export const useAuth = () => {\r\n+    return useContext(AuthContext);\r\n+};\r\n"
                }
            ],
            "date": 1720602151503,
            "name": "Commit-0",
            "content": "import { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { REGISRATION_STEPS, SERVERLINK } from \"../constants/index.js\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport const AuthContext = createContext({});\r\n\r\nconst AuthProvider = ({ children }) => {\r\n    const [isAuth, setIsAuth] = useState(false);\r\n    const [personalInformation, setPersonalInformation] = useState([]);\r\n    const [registerMode, setRegisterMode] = useState(\"Camionneur\"); // The account type thah the user selected\r\n    const [registrationStep, setRegistrationStep] = useState(\r\n        REGISRATION_STEPS.accoutType\r\n    ); // In witch registration route is the user\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const navigate = useNavigate();\r\n\r\n    // Register handler\r\n    const [inputs, setInputs] = useState({\r\n        firstname: \"\",\r\n        lastname: \"\",\r\n        userCin: \"\",\r\n        companyNumber: \"\",\r\n        phone: \"\",\r\n        adress: \"\",\r\n        email: \"\",\r\n        bio: \"\",\r\n        profileImage: \"\",\r\n        accountId: 0,\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n    });\r\n\r\n    const [errorData, setErrorData] = useState({\r\n        firstname: true,\r\n        lastname: true,\r\n        userCin: true,\r\n        companyNumber: true,\r\n        phone: true,\r\n        adress: true,\r\n        email: true,\r\n        bio: true,\r\n        profileImage: true,\r\n        accountId: true,\r\n        password: true,\r\n        confirmPassword: true\r\n    })\r\n\r\n    const setAuth = (boolean) => {\r\n        setIsAuth(boolean);\r\n    };\r\n\r\n    const getInformation = async () => {\r\n        const token = localStorage.getItem(\"accessToken\");\r\n        try {\r\n            const response = await fetch(SERVERLINK + \"/api/auth/me\", {\r\n                method: \"GET\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    token: token,\r\n                },\r\n            });\r\n\r\n            const parseRes = await response.json();\r\n\r\n            if (localStorage.getItem(\"accessToken\") && parseRes.error) {\r\n                try {\r\n                    const refreshToken = sessionStorage.getItem(\"refToken\");\r\n                    const response = await fetch(SERVERLINK + '/api/auth/token',\r\n                        {\r\n                            method: \"POST\",\r\n                            headers: { \"Content-Type\": \"application/json\" },\r\n                            body: JSON.stringify({ refToken: refreshToken })\r\n                        }\r\n                    );\r\n\r\n                    const parseRes = await response.json();\r\n\r\n                    if (parseRes.auth === true) {\r\n                        localStorage.setItem('accessToken', parseRes.accessToken);\r\n                        getInformation();\r\n                    } else {\r\n                        console.log(parseRes.error)\r\n                        localStorage.removeItem(\"accessToken\");\r\n                        setAuth(false);\r\n                    }\r\n\r\n                } catch (error) {\r\n                    localStorage.removeItem(\"accessToken\");\r\n                    setAuth(false);\r\n                }\r\n            }\r\n\r\n            setPersonalInformation(parseRes);\r\n\r\n            if (personalInformation.id) setAuth(true);\r\n\r\n            console.log(`PersonalInfo : ${personalInformation.id}`);\r\n\r\n        } catch (error) {\r\n            console.log(\"erreur lors du chargement du profil\" + error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const token = localStorage.getItem('accessToken');\r\n        if (token) {\r\n            navigate('/');\r\n            getInformation();\r\n        }\r\n    }, []);\r\n\r\n    const logout = () => {\r\n        localStorage.removeItem(\"accessToken\");\r\n        setAuth(false);\r\n        navigate(\"/login\");\r\n    }\r\n\r\n    const login = async (parseRs) => {\r\n        localStorage.setItem(\"accessToken\", parseRs.accessToken);\r\n        setAuth(true);\r\n        await getInformation();\r\n        navigate(\"/\");\r\n    }\r\n\r\n    const checkUserConnected = () => {\r\n        console.log(\"checkUserConnected\")\r\n        getInformation();\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(\"checkUserConnected AuthProvider\")\r\n        checkUserConnected();\r\n    }, []);\r\n\r\n    return (\r\n        <AuthContext.Provider\r\n            value={{\r\n                isAuth,\r\n                setAuth,\r\n                personalInformation,\r\n                setPersonalInformation,\r\n                getInformation,\r\n                inputs,\r\n                setInputs,\r\n                errorData,\r\n                setErrorData,\r\n                registerMode,\r\n                setRegisterMode,\r\n                registrationStep,\r\n                setRegistrationStep,\r\n                logout,\r\n                login,\r\n                loading,\r\n                setLoading,\r\n                checkUserConnected\r\n            }}\r\n        >\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport default AuthProvider;\r\n\r\nexport const useAuth = () => {\r\n    return useContext(AuthContext);\r\n};\r\n"
        }
    ]
}