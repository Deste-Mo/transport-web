{
    "sourceFile": "frontend/src/context/AppPorvider.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1722234306106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722241300848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,13 +27,13 @@\n     const [countUnread, setCountUnread] = useState(0)\r\n \r\n     const [messages, setMessages] = useState([]);\r\n \r\n-    const [suggestions, setSuggestions] = useState([]); \r\n+    const [suggestions, setSuggestions] = useState([]);\r\n \r\n     const [homeOffers, setHomeOffers] = useState([]);\r\n \r\n-    const [ notifications, setNotifications ] = useState([]);\r\n+    const [notifications, setNotifications] = useState([]);\r\n \r\n     const handleShowConversation = async () => {\r\n \r\n         const conversationsRes = await fetch(SERVERLINK + '/api/messages/conversation', {\r\n@@ -47,10 +47,10 @@\n         const allConversations = await conversationsRes.json();\r\n \r\n         setConversations(await allConversations.conversations);\r\n     }\r\n-    \r\n \r\n+\r\n     const handleNotificationShow = async () => {\r\n \r\n         const notificationsRes = await fetch(SERVERLINK + '/api/notifs/getnotifs', {\r\n             method: \"GET\",\r\n@@ -159,9 +159,9 @@\n         const sugRes = await fetch(SERVERLINK + '/api/offres/suggestionoffers', {\r\n             method: \"GET\",\r\n             headers: {\r\n                 \"Content-Type\": \"application/json\",\r\n-                \"token\":token,\r\n+                \"token\": token,\r\n             }\r\n         })\r\n \r\n         const suggestionsRes = await sugRes.json();\r\n@@ -182,14 +182,28 @@\n         const homeoffersRes = await homeRes.json();\r\n \r\n         setHomeOffers(await homeoffersRes.offers);\r\n     }\r\n+    const handleHomeOffers = async () => {\r\n \r\n+        const homeRes = await fetch(SERVERLINK + '/api/offres/gethomepageoffers', {\r\n+            method: \"GET\",\r\n+            headers: {\r\n+                \"Content-Type\": \"application/json\",\r\n+                \"token\": token\r\n+            }\r\n+        })\r\n+\r\n+        const homeoffersRes = await homeRes.json();\r\n+\r\n+        setHomeOffers(await homeoffersRes.offers);\r\n+    }\r\n+\r\n     const timeSince = (date, max) => {\r\n         const now = new Date();\r\n         const secondsPast = Math.floor((now - new Date(date)) / 1000);\r\n         const maximum = max * 24 * 3600;\r\n-    \r\n+\r\n         if (secondsPast < 60) {\r\n             return `il y a ${secondsPast} secondes`;\r\n         }\r\n         if (secondsPast < 3600) {\r\n@@ -200,9 +214,9 @@\n         }\r\n         if (secondsPast < maximum) { // 7 jours\r\n             return `il y a ${Math.floor(secondsPast / 86400)} jours`;\r\n         }\r\n-        \r\n+\r\n         return new Date(date).toLocaleDateString();\r\n     };\r\n \r\n \r\n"
                },
                {
                    "date": 1722241308225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,10 +182,11 @@\n         const homeoffersRes = await homeRes.json();\r\n \r\n         setHomeOffers(await homeoffersRes.offers);\r\n     }\r\n-    const handleHomeOffers = async () => {\r\n \r\n+    const handleOffers = async () => {\r\n+\r\n         const homeRes = await fetch(SERVERLINK + '/api/offres/gethomepageoffers', {\r\n             method: \"GET\",\r\n             headers: {\r\n                 \"Content-Type\": \"application/json\",\r\n"
                },
                {
                    "date": 1722241351633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,11 +183,11 @@\n \r\n         setHomeOffers(await homeoffersRes.offers);\r\n     }\r\n \r\n-    const handleOffers = async () => {\r\n+    const handleOffersForUser = async () => {\r\n \r\n-        const homeRes = await fetch(SERVERLINK + '/api/offres/gethomepageoffers', {\r\n+        const homeRes = await fetch(SERVERLINK + '/api/offres//allofferforuser', {\r\n             method: \"GET\",\r\n             headers: {\r\n                 \"Content-Type\": \"application/json\",\r\n                 \"token\": token\r\n"
                },
                {
                    "date": 1722241370062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,11 +193,11 @@\n                 \"token\": token\r\n             }\r\n         })\r\n \r\n-        const offer = await homeRes.json();\r\n+        const offerR = await homeRes.json();\r\n \r\n-        setHomeOffers(await offer.offers);\r\n+        setHomeOffers(await offerR.offers);\r\n     }\r\n \r\n     const timeSince = (date, max) => {\r\n         const now = new Date();\r\n"
                },
                {
                    "date": 1722241386900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,265 @@\n+/* eslint-disable no-unused-vars */\r\n+import { createContext, useContext, useState } from \"react\";\r\n+import { useAuth } from \"./AuthProvider\";\r\n+import { SERVERLINK } from \"../constants\";\r\n+const AppContext = createContext({});\r\n+\r\n+const AppProvider = ({ children }) => {\r\n+\r\n+    const { token } = useAuth()\r\n+\r\n+    const [userToChat, setUserToChat] = useState({\r\n+        id: null,\r\n+        fullName: null,\r\n+        accountType: null,\r\n+        pic: null\r\n+    });\r\n+\r\n+    const [users, setUsers] = useState([]);\r\n+\r\n+\r\n+    const [conversations, setConversations] = useState([]);\r\n+\r\n+    const [friends, setFriends] = useState([]);\r\n+\r\n+    const [countFollow, setCountFollow] = useState(0);\r\n+\r\n+    const [countUnread, setCountUnread] = useState(0)\r\n+\r\n+    const [messages, setMessages] = useState([]);\r\n+\r\n+    const [suggestions, setSuggestions] = useState([]);\r\n+\r\n+    const [homeOffers, setHomeOffers] = useState([]);\r\n+\r\n+    const [notifications, setNotifications] = useState([]);\r\n+\r\n+    const handleShowConversation = async () => {\r\n+\r\n+        const conversationsRes = await fetch(SERVERLINK + '/api/messages/conversation', {\r\n+            method: \"GET\",\r\n+            headers: {\r\n+                \"Content-Type\": \"application/json\",\r\n+                \"token\": token\r\n+            }\r\n+        })\r\n+\r\n+        const allConversations = await conversationsRes.json();\r\n+\r\n+        setConversations(await allConversations.conversations);\r\n+    }\r\n+\r\n+\r\n+    const handleNotificationShow = async () => {\r\n+\r\n+        const notificationsRes = await fetch(SERVERLINK + '/api/notifs/getnotifs', {\r\n+            method: \"GET\",\r\n+            headers: {\r\n+                \"Content-Type\": \"application/json\",\r\n+                \"token\": token\r\n+            }\r\n+        })\r\n+\r\n+        const allNotifs = await notificationsRes.json();\r\n+\r\n+        setNotifications(await allNotifs.notifications);\r\n+    }\r\n+\r\n+    const handleUsersToShow = async () => {\r\n+        const conversationsRes = await fetch(SERVERLINK + '/api/messages/users', {\r\n+            method: \"GET\",\r\n+            headers: {\r\n+                \"Content-Type\": \"application/json\",\r\n+                \"token\": token\r\n+            }\r\n+        })\r\n+\r\n+        const allUsers = await conversationsRes.json();\r\n+\r\n+        setUsers(await allUsers.allUsers);\r\n+    }\r\n+\r\n+    const handleShown = async (endOfMessagesRef) => {\r\n+\r\n+        const scrollToBottom = () => {\r\n+            endOfMessagesRef.current?.scrollIntoView();\r\n+        };\r\n+\r\n+        const user = await JSON.parse(localStorage.getItem('userToChat'));\r\n+\r\n+        setUserToChat({\r\n+            id: user.id,\r\n+            fullName: user.fullName,\r\n+            accountType: user.accountType,\r\n+            pic: user.pic\r\n+        })\r\n+\r\n+        const messagesRes = await fetch(SERVERLINK + '/api/messages/' + await user.id, {\r\n+            method: \"GET\",\r\n+            headers: {\r\n+                \"Content-Type\": \"application/json\",\r\n+                \"token\": token\r\n+            }\r\n+        })\r\n+\r\n+        const allMessages = await messagesRes.json();\r\n+\r\n+        setMessages(await allMessages.messages);\r\n+\r\n+        scrollToBottom();\r\n+\r\n+    }\r\n+\r\n+    const handleFriends = async () => {\r\n+        const conversationsRes = await fetch(SERVERLINK + '/api/profile/friends', {\r\n+            method: \"GET\",\r\n+            headers: {\r\n+                \"Content-Type\": \"application/json\",\r\n+                \"token\": token\r\n+            }\r\n+        })\r\n+\r\n+        const allFriends = await conversationsRes.json();\r\n+\r\n+        setFriends(await allFriends.friends);\r\n+    }\r\n+\r\n+    const handleCountUnread = async () => {\r\n+\r\n+        const conversationsRes = await fetch(SERVERLINK + '/api/messages/count', {\r\n+            method: \"GET\",\r\n+            headers: {\r\n+                \"Content-Type\": \"application/json\",\r\n+                \"token\": token\r\n+            }\r\n+        })\r\n+\r\n+        const count = await conversationsRes.json();\r\n+\r\n+        setCountUnread(await count.unread);\r\n+    }\r\n+\r\n+    const handleCountFollow = async () => {\r\n+\r\n+        const conversationsRes = await fetch(SERVERLINK + '/api/profile/countfollow', {\r\n+            method: \"GET\",\r\n+            headers: {\r\n+                \"Content-Type\": \"application/json\",\r\n+                \"token\": token\r\n+            }\r\n+        })\r\n+\r\n+        const count = await conversationsRes.json();\r\n+\r\n+        setCountFollow(await count.count);\r\n+    }\r\n+\r\n+    const handleOfferSuggestion = async () => {\r\n+\r\n+        const sugRes = await fetch(SERVERLINK + '/api/offres/suggestionoffers', {\r\n+            method: \"GET\",\r\n+            headers: {\r\n+                \"Content-Type\": \"application/json\",\r\n+                \"token\": token,\r\n+            }\r\n+        })\r\n+\r\n+        const suggestionsRes = await sugRes.json();\r\n+\r\n+        setSuggestions(await suggestionsRes.suggestions);\r\n+    }\r\n+\r\n+    const handleHomeOffers = async () => {\r\n+\r\n+        const homeRes = await fetch(SERVERLINK + '/api/offres/gethomepageoffers', {\r\n+            method: \"GET\",\r\n+            headers: {\r\n+                \"Content-Type\": \"application/json\",\r\n+                \"token\": token\r\n+            }\r\n+        })\r\n+\r\n+        const homeoffersRes = await homeRes.json();\r\n+\r\n+        setHomeOffers(await homeoffersRes.offers);\r\n+    }\r\n+\r\n+    const handleOffersForUser = async () => {\r\n+\r\n+        const homeRes = await fetch(SERVERLINK + '/api/offres//allofferforuser', {\r\n+            method: \"GET\",\r\n+            headers: {\r\n+                \"Content-Type\": \"application/json\",\r\n+                \"token\": token\r\n+            }\r\n+        })\r\n+\r\n+        const offerRes = await homeRes.json();\r\n+\r\n+        setHomeOffers(await offerRes.offers);\r\n+    }\r\n+\r\n+    const timeSince = (date, max) => {\r\n+        const now = new Date();\r\n+        const secondsPast = Math.floor((now - new Date(date)) / 1000);\r\n+        const maximum = max * 24 * 3600;\r\n+\r\n+        if (secondsPast < 60) {\r\n+            return `il y a ${secondsPast} secondes`;\r\n+        }\r\n+        if (secondsPast < 3600) {\r\n+            return `il y a ${Math.floor(secondsPast / 60)} minutes`;\r\n+        }\r\n+        if (secondsPast < 86400) {\r\n+            return `il y a ${Math.floor(secondsPast / 3600)} heures`;\r\n+        }\r\n+        if (secondsPast < maximum) { // 7 jours\r\n+            return `il y a ${Math.floor(secondsPast / 86400)} jours`;\r\n+        }\r\n+\r\n+        return new Date(date).toLocaleDateString();\r\n+    };\r\n+\r\n+\r\n+    return <AppContext.Provider value={{\r\n+        userToChat,\r\n+        setUserToChat,\r\n+        messages,\r\n+        setMessages,\r\n+        users,\r\n+        setUsers,\r\n+        conversations,\r\n+        setConversations,\r\n+        handleShowConversation,\r\n+        handleUsersToShow,\r\n+        friends,\r\n+        setFriends,\r\n+        handleFriends,\r\n+        countUnread,\r\n+        setCountUnread,\r\n+        handleCountUnread,\r\n+        setCountFollow,\r\n+        countFollow,\r\n+        handleCountFollow,\r\n+        suggestions,\r\n+        setSuggestions,\r\n+        handleOfferSuggestion,\r\n+        notifications,\r\n+        setNotifications,\r\n+        handleNotificationShow,\r\n+        handleShown,\r\n+        homeOffers,\r\n+        setHomeOffers,\r\n+        handleHomeOffers,\r\n+        timeSince\r\n+    }}>\r\n+        {children}\r\n+    </AppContext.Provider>\r\n+}\r\n+\r\n+export default AppProvider;\r\n+\r\n+export const useApp = () => {\r\n+    return useContext(AppContext);\r\n+}\r\n+\r\n"
                }
            ],
            "date": 1722234306106,
            "name": "Commit-0",
            "content": "/* eslint-disable no-unused-vars */\r\nimport { createContext, useContext, useState } from \"react\";\r\nimport { useAuth } from \"./AuthProvider\";\r\nimport { SERVERLINK } from \"../constants\";\r\nconst AppContext = createContext({});\r\n\r\nconst AppProvider = ({ children }) => {\r\n\r\n    const { token } = useAuth()\r\n\r\n    const [userToChat, setUserToChat] = useState({\r\n        id: null,\r\n        fullName: null,\r\n        accountType: null,\r\n        pic: null\r\n    });\r\n\r\n    const [users, setUsers] = useState([]);\r\n\r\n\r\n    const [conversations, setConversations] = useState([]);\r\n\r\n    const [friends, setFriends] = useState([]);\r\n\r\n    const [countFollow, setCountFollow] = useState(0);\r\n\r\n    const [countUnread, setCountUnread] = useState(0)\r\n\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    const [suggestions, setSuggestions] = useState([]); \r\n\r\n    const [homeOffers, setHomeOffers] = useState([]);\r\n\r\n    const [ notifications, setNotifications ] = useState([]);\r\n\r\n    const handleShowConversation = async () => {\r\n\r\n        const conversationsRes = await fetch(SERVERLINK + '/api/messages/conversation', {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"token\": token\r\n            }\r\n        })\r\n\r\n        const allConversations = await conversationsRes.json();\r\n\r\n        setConversations(await allConversations.conversations);\r\n    }\r\n    \r\n\r\n    const handleNotificationShow = async () => {\r\n\r\n        const notificationsRes = await fetch(SERVERLINK + '/api/notifs/getnotifs', {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"token\": token\r\n            }\r\n        })\r\n\r\n        const allNotifs = await notificationsRes.json();\r\n\r\n        setNotifications(await allNotifs.notifications);\r\n    }\r\n\r\n    const handleUsersToShow = async () => {\r\n        const conversationsRes = await fetch(SERVERLINK + '/api/messages/users', {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"token\": token\r\n            }\r\n        })\r\n\r\n        const allUsers = await conversationsRes.json();\r\n\r\n        setUsers(await allUsers.allUsers);\r\n    }\r\n\r\n    const handleShown = async (endOfMessagesRef) => {\r\n\r\n        const scrollToBottom = () => {\r\n            endOfMessagesRef.current?.scrollIntoView();\r\n        };\r\n\r\n        const user = await JSON.parse(localStorage.getItem('userToChat'));\r\n\r\n        setUserToChat({\r\n            id: user.id,\r\n            fullName: user.fullName,\r\n            accountType: user.accountType,\r\n            pic: user.pic\r\n        })\r\n\r\n        const messagesRes = await fetch(SERVERLINK + '/api/messages/' + await user.id, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"token\": token\r\n            }\r\n        })\r\n\r\n        const allMessages = await messagesRes.json();\r\n\r\n        setMessages(await allMessages.messages);\r\n\r\n        scrollToBottom();\r\n\r\n    }\r\n\r\n    const handleFriends = async () => {\r\n        const conversationsRes = await fetch(SERVERLINK + '/api/profile/friends', {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"token\": token\r\n            }\r\n        })\r\n\r\n        const allFriends = await conversationsRes.json();\r\n\r\n        setFriends(await allFriends.friends);\r\n    }\r\n\r\n    const handleCountUnread = async () => {\r\n\r\n        const conversationsRes = await fetch(SERVERLINK + '/api/messages/count', {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"token\": token\r\n            }\r\n        })\r\n\r\n        const count = await conversationsRes.json();\r\n\r\n        setCountUnread(await count.unread);\r\n    }\r\n\r\n    const handleCountFollow = async () => {\r\n\r\n        const conversationsRes = await fetch(SERVERLINK + '/api/profile/countfollow', {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"token\": token\r\n            }\r\n        })\r\n\r\n        const count = await conversationsRes.json();\r\n\r\n        setCountFollow(await count.count);\r\n    }\r\n\r\n    const handleOfferSuggestion = async () => {\r\n\r\n        const sugRes = await fetch(SERVERLINK + '/api/offres/suggestionoffers', {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"token\":token,\r\n            }\r\n        })\r\n\r\n        const suggestionsRes = await sugRes.json();\r\n\r\n        setSuggestions(await suggestionsRes.suggestions);\r\n    }\r\n\r\n    const handleHomeOffers = async () => {\r\n\r\n        const homeRes = await fetch(SERVERLINK + '/api/offres/gethomepageoffers', {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"token\": token\r\n            }\r\n        })\r\n\r\n        const homeoffersRes = await homeRes.json();\r\n\r\n        setHomeOffers(await homeoffersRes.offers);\r\n    }\r\n\r\n    const timeSince = (date, max) => {\r\n        const now = new Date();\r\n        const secondsPast = Math.floor((now - new Date(date)) / 1000);\r\n        const maximum = max * 24 * 3600;\r\n    \r\n        if (secondsPast < 60) {\r\n            return `il y a ${secondsPast} secondes`;\r\n        }\r\n        if (secondsPast < 3600) {\r\n            return `il y a ${Math.floor(secondsPast / 60)} minutes`;\r\n        }\r\n        if (secondsPast < 86400) {\r\n            return `il y a ${Math.floor(secondsPast / 3600)} heures`;\r\n        }\r\n        if (secondsPast < maximum) { // 7 jours\r\n            return `il y a ${Math.floor(secondsPast / 86400)} jours`;\r\n        }\r\n        \r\n        return new Date(date).toLocaleDateString();\r\n    };\r\n\r\n\r\n    return <AppContext.Provider value={{\r\n        userToChat,\r\n        setUserToChat,\r\n        messages,\r\n        setMessages,\r\n        users,\r\n        setUsers,\r\n        conversations,\r\n        setConversations,\r\n        handleShowConversation,\r\n        handleUsersToShow,\r\n        friends,\r\n        setFriends,\r\n        handleFriends,\r\n        countUnread,\r\n        setCountUnread,\r\n        handleCountUnread,\r\n        setCountFollow,\r\n        countFollow,\r\n        handleCountFollow,\r\n        suggestions,\r\n        setSuggestions,\r\n        handleOfferSuggestion,\r\n        notifications,\r\n        setNotifications,\r\n        handleNotificationShow,\r\n        handleShown,\r\n        homeOffers,\r\n        setHomeOffers,\r\n        handleHomeOffers,\r\n        timeSince\r\n    }}>\r\n        {children}\r\n    </AppContext.Provider>\r\n}\r\n\r\nexport default AppProvider;\r\n\r\nexport const useApp = () => {\r\n    return useContext(AppContext);\r\n}\r\n\r\n"
        }
    ]
}